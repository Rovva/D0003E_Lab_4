
D0003E_Lab_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  0000219e  00002232  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000219e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000357  00800132  00800132  00002264  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002264  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002294  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  000022d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000317f  00000000  00000000  0000256c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001165  00000000  00000000  000056eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000174d  00000000  00000000  00006850  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c70  00000000  00000000  00007fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a6d  00000000  00000000  00008c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c53  00000000  00000000  0000967d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  0000c2d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 bb 04 	jmp	0x976	; 0x976 <__vector_1>
       8:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__vector_2>
       c:	0c 94 93 05 	jmp	0xb26	; 0xb26 <__vector_3>
      10:	0c 94 ff 05 	jmp	0xbfe	; 0xbfe <__vector_4>
      14:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 42 0d 	jmp	0x1a84	; 0x1a84 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 f0 0c 	jmp	0x19e0	; 0x19e0 <__vector_9>
      28:	0c 94 d7 06 	jmp	0xdae	; 0xdae <__vector_10>
      2c:	0c 94 43 07 	jmp	0xe86	; 0xe86 <__vector_11>
      30:	0c 94 af 07 	jmp	0xf5e	; 0xf5e <__vector_12>
      34:	0c 94 1b 08 	jmp	0x1036	; 0x1036 <__vector_13>
      38:	0c 94 87 08 	jmp	0x110e	; 0x110e <__vector_14>
      3c:	0c 94 f3 08 	jmp	0x11e6	; 0x11e6 <__vector_15>
      40:	0c 94 5f 09 	jmp	0x12be	; 0x12be <__vector_16>
      44:	0c 94 cb 09 	jmp	0x1396	; 0x1396 <__vector_17>
      48:	0c 94 37 0a 	jmp	0x146e	; 0x146e <__vector_18>
      4c:	0c 94 a3 0a 	jmp	0x1546	; 0x1546 <__vector_19>
      50:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__vector_20>
      54:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <__vector_21>
      58:	0c 94 e7 0b 	jmp	0x17ce	; 0x17ce <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	ee e9       	ldi	r30, 0x9E	; 158
      70:	f1 e2       	ldi	r31, 0x21	; 33
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	a2 33       	cpi	r26, 0x32	; 50
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	a2 e3       	ldi	r26, 0x32	; 50
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a9 38       	cpi	r26, 0x89	; 137
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <main>
      92:	0c 94 cd 10 	jmp	0x219a	; 0x219a <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <updateWriter>:
		self->CurrentHzValue = temp;
	}
}

// Method to constantly update the object "Write" to write to the port E
void updateWriter(Generator *self) {
      9a:	cf 92       	push	r12
      9c:	df 92       	push	r13
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	ec 01       	movw	r28, r24
	if(self->CurrentHzValue > 0) {
      ac:	8e 81       	ldd	r24, Y+6	; 0x06
      ae:	88 23       	and	r24, r24
      b0:	69 f1       	breq	.+90     	; 0x10c <updateWriter+0x72>
		ASYNC(self->writer, writeToPort, self->GeneratorNr);
      b2:	c8 84       	ldd	r12, Y+8	; 0x08
      b4:	d1 2c       	mov	r13, r1
      b6:	0c 81       	ldd	r16, Y+4	; 0x04
      b8:	1d 81       	ldd	r17, Y+5	; 0x05
      ba:	0f 2e       	mov	r0, r31
      bc:	f9 e3       	ldi	r31, 0x39	; 57
      be:	ef 2e       	mov	r14, r31
      c0:	f0 e1       	ldi	r31, 0x10	; 16
      c2:	ff 2e       	mov	r15, r31
      c4:	f0 2d       	mov	r31, r0
      c6:	20 e0       	ldi	r18, 0x00	; 0
      c8:	30 e0       	ldi	r19, 0x00	; 0
      ca:	a9 01       	movw	r20, r18
      cc:	60 e0       	ldi	r22, 0x00	; 0
      ce:	70 e0       	ldi	r23, 0x00	; 0
      d0:	cb 01       	movw	r24, r22
      d2:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <async>
		AFTER((MSEC(1000)/(self->CurrentHzValue)/2), self, updateWriter, 0);
      d6:	2e 81       	ldd	r18, Y+6	; 0x06
      d8:	30 e0       	ldi	r19, 0x00	; 0
      da:	40 e0       	ldi	r20, 0x00	; 0
      dc:	50 e0       	ldi	r21, 0x00	; 0
      de:	69 e0       	ldi	r22, 0x09	; 9
      e0:	7d e3       	ldi	r23, 0x3D	; 61
      e2:	80 e0       	ldi	r24, 0x00	; 0
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	0e 94 4b 10 	call	0x2096	; 0x2096 <__divmodsi4>
      ea:	ca 01       	movw	r24, r20
      ec:	b9 01       	movw	r22, r18
      ee:	c1 2c       	mov	r12, r1
      f0:	d1 2c       	mov	r13, r1
      f2:	0f 2e       	mov	r0, r31
      f4:	fd e4       	ldi	r31, 0x4D	; 77
      f6:	ef 2e       	mov	r14, r31
      f8:	f0 e0       	ldi	r31, 0x00	; 0
      fa:	ff 2e       	mov	r15, r31
      fc:	f0 2d       	mov	r31, r0
      fe:	8e 01       	movw	r16, r28
     100:	20 e0       	ldi	r18, 0x00	; 0
     102:	30 e0       	ldi	r19, 0x00	; 0
     104:	a9 01       	movw	r20, r18
     106:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <async>
     10a:	12 c0       	rjmp	.+36     	; 0x130 <updateWriter+0x96>
	} else {
		ASYNC(self->writer, disableOutput, self->GeneratorNr);
     10c:	c8 84       	ldd	r12, Y+8	; 0x08
     10e:	d1 2c       	mov	r13, r1
     110:	0c 81       	ldd	r16, Y+4	; 0x04
     112:	1d 81       	ldd	r17, Y+5	; 0x05
     114:	0f 2e       	mov	r0, r31
     116:	f5 e4       	ldi	r31, 0x45	; 69
     118:	ef 2e       	mov	r14, r31
     11a:	f0 e1       	ldi	r31, 0x10	; 16
     11c:	ff 2e       	mov	r15, r31
     11e:	f0 2d       	mov	r31, r0
     120:	20 e0       	ldi	r18, 0x00	; 0
     122:	30 e0       	ldi	r19, 0x00	; 0
     124:	a9 01       	movw	r20, r18
     126:	60 e0       	ldi	r22, 0x00	; 0
     128:	70 e0       	ldi	r23, 0x00	; 0
     12a:	cb 01       	movw	r24, r22
     12c:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <async>
	}
}
     130:	df 91       	pop	r29
     132:	cf 91       	pop	r28
     134:	1f 91       	pop	r17
     136:	0f 91       	pop	r16
     138:	ff 90       	pop	r15
     13a:	ef 90       	pop	r14
     13c:	df 90       	pop	r13
     13e:	cf 90       	pop	r12
     140:	08 95       	ret

00000142 <updatePulseValue>:

#include "Generator.h"
#include "Writer.h"

// Method that saves a value and resets frequency to 0
void updatePulseValue(Generator *self) {
     142:	fc 01       	movw	r30, r24
	uint8_t temp = 0;
	// If the generator has not been updated
	if(self->updated == 0 && self->CurrentHzValue != 0) {
     144:	81 85       	ldd	r24, Z+9	; 0x09
     146:	81 11       	cpse	r24, r1
     148:	08 c0       	rjmp	.+16     	; 0x15a <updatePulseValue+0x18>
     14a:	86 81       	ldd	r24, Z+6	; 0x06
     14c:	88 23       	and	r24, r24
     14e:	41 f0       	breq	.+16     	; 0x160 <updatePulseValue+0x1e>
		// Save current frequency in temp
		temp = self->CurrentHzValue;
		// Save the value in temp to the variable OldHzValue
		self->OldHzValue = temp;
     150:	87 83       	std	Z+7, r24	; 0x07
		// Set the current frequency to 0
		self->CurrentHzValue = 0;
     152:	16 82       	std	Z+6, r1	; 0x06
		self->updated = true;
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	81 87       	std	Z+9, r24	; 0x09
     158:	08 95       	ret
	} else if(self->CurrentHzValue == 0) {
     15a:	86 81       	ldd	r24, Z+6	; 0x06
     15c:	81 11       	cpse	r24, r1
     15e:	07 c0       	rjmp	.+14     	; 0x16e <updatePulseValue+0x2c>
		temp = self->OldHzValue;
		self->CurrentHzValue = temp;
     160:	87 81       	ldd	r24, Z+7	; 0x07
     162:	86 83       	std	Z+6, r24	; 0x06
		self->updated = false;
     164:	11 86       	std	Z+9, r1	; 0x09
		updateWriter(self);
     166:	cf 01       	movw	r24, r30
     168:	0e 94 4d 00 	call	0x9a	; 0x9a <updateWriter>
     16c:	08 95       	ret
	} else {
		temp = self->OldHzValue;
		self->CurrentHzValue = temp;
     16e:	87 81       	ldd	r24, Z+7	; 0x07
     170:	86 83       	std	Z+6, r24	; 0x06
		self->updated = false;
     172:	11 86       	std	Z+9, r1	; 0x09
		updateWriter(self);
     174:	cf 01       	movw	r24, r30
     176:	0e 94 4d 00 	call	0x9a	; 0x9a <updateWriter>
     17a:	08 95       	ret

0000017c <increaseFrequency>:
	}
}
// Increase the frequency by 1
void increaseFrequency(Generator *self) {
     17c:	fc 01       	movw	r30, r24
	uint8_t temp;
	temp = self->CurrentHzValue;
     17e:	96 81       	ldd	r25, Z+6	; 0x06
	if(temp < 99) {
     180:	93 36       	cpi	r25, 0x63	; 99
     182:	50 f4       	brcc	.+20     	; 0x198 <increaseFrequency+0x1c>
		if(self->CurrentHzValue == 0) {
     184:	91 11       	cpse	r25, r1
     186:	06 c0       	rjmp	.+12     	; 0x194 <increaseFrequency+0x18>
     188:	cf 01       	movw	r24, r30
			temp++;
			self->CurrentHzValue = temp;
     18a:	21 e0       	ldi	r18, 0x01	; 1
     18c:	26 83       	std	Z+6, r18	; 0x06
			updateWriter(self);
     18e:	0e 94 4d 00 	call	0x9a	; 0x9a <updateWriter>
     192:	08 95       	ret
		} else {
		temp++;
		self->CurrentHzValue = temp;
     194:	9f 5f       	subi	r25, 0xFF	; 255
     196:	96 83       	std	Z+6, r25	; 0x06
     198:	08 95       	ret

0000019a <decreaseFrequency>:
	}
	}
}
// Decrease the frequency by 1
void decreaseFrequency(Generator *self) {
     19a:	fc 01       	movw	r30, r24
	uint8_t temp = self->CurrentHzValue;
     19c:	96 81       	ldd	r25, Z+6	; 0x06
	if(temp > 0) {
     19e:	99 23       	and	r25, r25
     1a0:	11 f0       	breq	.+4      	; 0x1a6 <decreaseFrequency+0xc>
		temp--;
		self->CurrentHzValue = temp;
     1a2:	91 50       	subi	r25, 0x01	; 1
     1a4:	96 83       	std	Z+6, r25	; 0x06
     1a6:	08 95       	ret

000001a8 <increaseValue>:
void setFirstPress(GUI *self, bool i) {
	self->firstpress = i;
}

// Increase frequency with 1 Hz
void increaseValue(GUI *self, int pulseGenerator) {
     1a8:	cf 92       	push	r12
     1aa:	df 92       	push	r13
     1ac:	ef 92       	push	r14
     1ae:	ff 92       	push	r15
     1b0:	0f 93       	push	r16
     1b2:	1f 93       	push	r17
	if(pulseGenerator == 0) {
     1b4:	67 2b       	or	r22, r23
     1b6:	a1 f4       	brne	.+40     	; 0x1e0 <increaseValue+0x38>
		ASYNC(self->generator1, increaseFrequency, 0);
     1b8:	fc 01       	movw	r30, r24
     1ba:	07 81       	ldd	r16, Z+7	; 0x07
     1bc:	10 85       	ldd	r17, Z+8	; 0x08
     1be:	c1 2c       	mov	r12, r1
     1c0:	d1 2c       	mov	r13, r1
     1c2:	0f 2e       	mov	r0, r31
     1c4:	fe eb       	ldi	r31, 0xBE	; 190
     1c6:	ef 2e       	mov	r14, r31
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	ff 2e       	mov	r15, r31
     1cc:	f0 2d       	mov	r31, r0
     1ce:	20 e0       	ldi	r18, 0x00	; 0
     1d0:	30 e0       	ldi	r19, 0x00	; 0
     1d2:	a9 01       	movw	r20, r18
     1d4:	60 e0       	ldi	r22, 0x00	; 0
     1d6:	70 e0       	ldi	r23, 0x00	; 0
     1d8:	cb 01       	movw	r24, r22
     1da:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <async>
     1de:	13 c0       	rjmp	.+38     	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
	} else {
		ASYNC(self->generator2, increaseFrequency, 0);
     1e0:	fc 01       	movw	r30, r24
     1e2:	01 85       	ldd	r16, Z+9	; 0x09
     1e4:	12 85       	ldd	r17, Z+10	; 0x0a
     1e6:	c1 2c       	mov	r12, r1
     1e8:	d1 2c       	mov	r13, r1
     1ea:	0f 2e       	mov	r0, r31
     1ec:	fe eb       	ldi	r31, 0xBE	; 190
     1ee:	ef 2e       	mov	r14, r31
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	ff 2e       	mov	r15, r31
     1f4:	f0 2d       	mov	r31, r0
     1f6:	20 e0       	ldi	r18, 0x00	; 0
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	a9 01       	movw	r20, r18
     1fc:	60 e0       	ldi	r22, 0x00	; 0
     1fe:	70 e0       	ldi	r23, 0x00	; 0
     200:	cb 01       	movw	r24, r22
     202:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <async>
	}
}
     206:	1f 91       	pop	r17
     208:	0f 91       	pop	r16
     20a:	ff 90       	pop	r15
     20c:	ef 90       	pop	r14
     20e:	df 90       	pop	r13
     210:	cf 90       	pop	r12
     212:	08 95       	ret

00000214 <repeatIncrease>:
// Repeat increase in frequency until button is no longer pressed
void repeatIncrease(GUI *self, int pulseGenerator) {
     214:	af 92       	push	r10
     216:	bf 92       	push	r11
     218:	cf 92       	push	r12
     21a:	df 92       	push	r13
     21c:	ef 92       	push	r14
     21e:	ff 92       	push	r15
     220:	0f 93       	push	r16
     222:	1f 93       	push	r17
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	fc 01       	movw	r30, r24
	if(self->buttonPressed == 1 && self->firstpress == false) {
     22a:	85 85       	ldd	r24, Z+13	; 0x0d
     22c:	81 30       	cpi	r24, 0x01	; 1
     22e:	a9 f5       	brne	.+106    	; 0x29a <repeatIncrease+0x86>
     230:	83 85       	ldd	r24, Z+11	; 0x0b
     232:	81 11       	cpse	r24, r1
     234:	32 c0       	rjmp	.+100    	; 0x29a <repeatIncrease+0x86>
     236:	5b 01       	movw	r10, r22
		ASYNC(self, increaseValue, pulseGenerator);
     238:	6b 01       	movw	r12, r22
     23a:	0f 2e       	mov	r0, r31
     23c:	f4 ed       	ldi	r31, 0xD4	; 212
     23e:	ef 2e       	mov	r14, r31
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	ff 2e       	mov	r15, r31
     244:	f0 2d       	mov	r31, r0
     246:	8f 01       	movw	r16, r30
     248:	20 e0       	ldi	r18, 0x00	; 0
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	a9 01       	movw	r20, r18
     24e:	60 e0       	ldi	r22, 0x00	; 0
     250:	70 e0       	ldi	r23, 0x00	; 0
     252:	cb 01       	movw	r24, r22
     254:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <async>
		ASYNC(self, update_values, 0);
     258:	c1 2c       	mov	r12, r1
     25a:	d1 2c       	mov	r13, r1
     25c:	0f 2e       	mov	r0, r31
     25e:	f1 eb       	ldi	r31, 0xB1	; 177
     260:	ef 2e       	mov	r14, r31
     262:	f2 e0       	ldi	r31, 0x02	; 2
     264:	ff 2e       	mov	r15, r31
     266:	f0 2d       	mov	r31, r0
     268:	20 e0       	ldi	r18, 0x00	; 0
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	a9 01       	movw	r20, r18
     26e:	60 e0       	ldi	r22, 0x00	; 0
     270:	70 e0       	ldi	r23, 0x00	; 0
     272:	cb 01       	movw	r24, r22
     274:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <async>
		AFTER(MSEC(400), self, repeatIncrease, pulseGenerator);
     278:	65 01       	movw	r12, r10
     27a:	0f 2e       	mov	r0, r31
     27c:	fa e0       	ldi	r31, 0x0A	; 10
     27e:	ef 2e       	mov	r14, r31
     280:	f1 e0       	ldi	r31, 0x01	; 1
     282:	ff 2e       	mov	r15, r31
     284:	f0 2d       	mov	r31, r0
     286:	20 e0       	ldi	r18, 0x00	; 0
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	a9 01       	movw	r20, r18
     28c:	64 ed       	ldi	r22, 0xD4	; 212
     28e:	70 e3       	ldi	r23, 0x30	; 48
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <async>
     298:	02 c0       	rjmp	.+4      	; 0x29e <repeatIncrease+0x8a>
	} else {
		self->firstpress = true;
     29a:	81 e0       	ldi	r24, 0x01	; 1
     29c:	83 87       	std	Z+11, r24	; 0x0b
	}
}
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	1f 91       	pop	r17
     2a4:	0f 91       	pop	r16
     2a6:	ff 90       	pop	r15
     2a8:	ef 90       	pop	r14
     2aa:	df 90       	pop	r13
     2ac:	cf 90       	pop	r12
     2ae:	bf 90       	pop	r11
     2b0:	af 90       	pop	r10
     2b2:	08 95       	ret

000002b4 <decreaseValue>:
// Decrease frequency with 1 Hz
void decreaseValue(GUI *self, int pulseGenerator) {
     2b4:	cf 92       	push	r12
     2b6:	df 92       	push	r13
     2b8:	ef 92       	push	r14
     2ba:	ff 92       	push	r15
     2bc:	0f 93       	push	r16
     2be:	1f 93       	push	r17
	if(pulseGenerator == 0) {
     2c0:	67 2b       	or	r22, r23
     2c2:	a1 f4       	brne	.+40     	; 0x2ec <decreaseValue+0x38>
		ASYNC(self->generator1, decreaseFrequency, 0);
     2c4:	fc 01       	movw	r30, r24
     2c6:	07 81       	ldd	r16, Z+7	; 0x07
     2c8:	10 85       	ldd	r17, Z+8	; 0x08
     2ca:	c1 2c       	mov	r12, r1
     2cc:	d1 2c       	mov	r13, r1
     2ce:	0f 2e       	mov	r0, r31
     2d0:	fd ec       	ldi	r31, 0xCD	; 205
     2d2:	ef 2e       	mov	r14, r31
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	ff 2e       	mov	r15, r31
     2d8:	f0 2d       	mov	r31, r0
     2da:	20 e0       	ldi	r18, 0x00	; 0
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	a9 01       	movw	r20, r18
     2e0:	60 e0       	ldi	r22, 0x00	; 0
     2e2:	70 e0       	ldi	r23, 0x00	; 0
     2e4:	cb 01       	movw	r24, r22
     2e6:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <async>
     2ea:	13 c0       	rjmp	.+38     	; 0x312 <decreaseValue+0x5e>
		} else {
		ASYNC(self->generator2, decreaseFrequency, 0);
     2ec:	fc 01       	movw	r30, r24
     2ee:	01 85       	ldd	r16, Z+9	; 0x09
     2f0:	12 85       	ldd	r17, Z+10	; 0x0a
     2f2:	c1 2c       	mov	r12, r1
     2f4:	d1 2c       	mov	r13, r1
     2f6:	0f 2e       	mov	r0, r31
     2f8:	fd ec       	ldi	r31, 0xCD	; 205
     2fa:	ef 2e       	mov	r14, r31
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	ff 2e       	mov	r15, r31
     300:	f0 2d       	mov	r31, r0
     302:	20 e0       	ldi	r18, 0x00	; 0
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	a9 01       	movw	r20, r18
     308:	60 e0       	ldi	r22, 0x00	; 0
     30a:	70 e0       	ldi	r23, 0x00	; 0
     30c:	cb 01       	movw	r24, r22
     30e:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <async>
	}
}
     312:	1f 91       	pop	r17
     314:	0f 91       	pop	r16
     316:	ff 90       	pop	r15
     318:	ef 90       	pop	r14
     31a:	df 90       	pop	r13
     31c:	cf 90       	pop	r12
     31e:	08 95       	ret

00000320 <repeatDecrease>:
// Repeat decrease in frequency until button is no longer pressed
void repeatDecrease(GUI *self, int pulseGenerator) {
     320:	af 92       	push	r10
     322:	bf 92       	push	r11
     324:	cf 92       	push	r12
     326:	df 92       	push	r13
     328:	ef 92       	push	r14
     32a:	ff 92       	push	r15
     32c:	0f 93       	push	r16
     32e:	1f 93       	push	r17
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	fc 01       	movw	r30, r24
	if(self->buttonPressed == 2 && self->firstpress == false) {
     336:	85 85       	ldd	r24, Z+13	; 0x0d
     338:	82 30       	cpi	r24, 0x02	; 2
     33a:	a9 f5       	brne	.+106    	; 0x3a6 <repeatDecrease+0x86>
     33c:	83 85       	ldd	r24, Z+11	; 0x0b
     33e:	81 11       	cpse	r24, r1
     340:	32 c0       	rjmp	.+100    	; 0x3a6 <repeatDecrease+0x86>
     342:	5b 01       	movw	r10, r22
		ASYNC(self, decreaseValue, pulseGenerator);
     344:	6b 01       	movw	r12, r22
     346:	0f 2e       	mov	r0, r31
     348:	fa e5       	ldi	r31, 0x5A	; 90
     34a:	ef 2e       	mov	r14, r31
     34c:	f1 e0       	ldi	r31, 0x01	; 1
     34e:	ff 2e       	mov	r15, r31
     350:	f0 2d       	mov	r31, r0
     352:	8f 01       	movw	r16, r30
     354:	20 e0       	ldi	r18, 0x00	; 0
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	a9 01       	movw	r20, r18
     35a:	60 e0       	ldi	r22, 0x00	; 0
     35c:	70 e0       	ldi	r23, 0x00	; 0
     35e:	cb 01       	movw	r24, r22
     360:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <async>
		ASYNC(self, update_values, 0);
     364:	c1 2c       	mov	r12, r1
     366:	d1 2c       	mov	r13, r1
     368:	0f 2e       	mov	r0, r31
     36a:	f1 eb       	ldi	r31, 0xB1	; 177
     36c:	ef 2e       	mov	r14, r31
     36e:	f2 e0       	ldi	r31, 0x02	; 2
     370:	ff 2e       	mov	r15, r31
     372:	f0 2d       	mov	r31, r0
     374:	20 e0       	ldi	r18, 0x00	; 0
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	a9 01       	movw	r20, r18
     37a:	60 e0       	ldi	r22, 0x00	; 0
     37c:	70 e0       	ldi	r23, 0x00	; 0
     37e:	cb 01       	movw	r24, r22
     380:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <async>
		AFTER(MSEC(400), self, repeatDecrease, pulseGenerator);
     384:	65 01       	movw	r12, r10
     386:	0f 2e       	mov	r0, r31
     388:	f0 e9       	ldi	r31, 0x90	; 144
     38a:	ef 2e       	mov	r14, r31
     38c:	f1 e0       	ldi	r31, 0x01	; 1
     38e:	ff 2e       	mov	r15, r31
     390:	f0 2d       	mov	r31, r0
     392:	20 e0       	ldi	r18, 0x00	; 0
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	a9 01       	movw	r20, r18
     398:	64 ed       	ldi	r22, 0xD4	; 212
     39a:	70 e3       	ldi	r23, 0x30	; 48
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <async>
     3a4:	02 c0       	rjmp	.+4      	; 0x3aa <repeatDecrease+0x8a>
	} else {
		self->firstpress = true;
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	83 87       	std	Z+11, r24	; 0x0b
	}
}
     3aa:	df 91       	pop	r29
     3ac:	cf 91       	pop	r28
     3ae:	1f 91       	pop	r17
     3b0:	0f 91       	pop	r16
     3b2:	ff 90       	pop	r15
     3b4:	ef 90       	pop	r14
     3b6:	df 90       	pop	r13
     3b8:	cf 90       	pop	r12
     3ba:	bf 90       	pop	r11
     3bc:	af 90       	pop	r10
     3be:	08 95       	ret

000003c0 <digitLookUp>:
#include "TinyTimber.h"

#include "GUI.h"
#include "Generator.h"

uint16_t digitLookUp(GUI *self, uint8_t c) {
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	cd b7       	in	r28, 0x3d	; 61
     3c6:	de b7       	in	r29, 0x3e	; 62
     3c8:	64 97       	sbiw	r28, 0x14	; 20
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	f8 94       	cli
     3ce:	de bf       	out	0x3e, r29	; 62
     3d0:	0f be       	out	0x3f, r0	; 63
     3d2:	cd bf       	out	0x3d, r28	; 61

	if(c < 48 || c > 57) {
     3d4:	80 ed       	ldi	r24, 0xD0	; 208
     3d6:	86 0f       	add	r24, r22
     3d8:	8a 30       	cpi	r24, 0x0A	; 10
     3da:	90 f5       	brcc	.+100    	; 0x440 <__DATA_REGION_LENGTH__+0x40>
		return 0;
	}

	uint16_t binary[10];

	binary[0] = 0b0001010101010001; // 0
     3dc:	81 e5       	ldi	r24, 0x51	; 81
     3de:	95 e1       	ldi	r25, 0x15	; 21
     3e0:	9a 83       	std	Y+2, r25	; 0x02
     3e2:	89 83       	std	Y+1, r24	; 0x01
	binary[1] = 0b0000000100010000; // 1
     3e4:	80 e1       	ldi	r24, 0x10	; 16
     3e6:	91 e0       	ldi	r25, 0x01	; 1
     3e8:	9c 83       	std	Y+4, r25	; 0x04
     3ea:	8b 83       	std	Y+3, r24	; 0x03
	binary[2] = 0b0001000111100001; // 2
     3ec:	81 ee       	ldi	r24, 0xE1	; 225
     3ee:	91 e1       	ldi	r25, 0x11	; 17
     3f0:	9e 83       	std	Y+6, r25	; 0x06
     3f2:	8d 83       	std	Y+5, r24	; 0x05
	binary[3] = 0b0001000110110001; // 3
     3f4:	81 eb       	ldi	r24, 0xB1	; 177
     3f6:	91 e1       	ldi	r25, 0x11	; 17
     3f8:	98 87       	std	Y+8, r25	; 0x08
     3fa:	8f 83       	std	Y+7, r24	; 0x07
	binary[4] = 0b0000010110110000; // 4
     3fc:	80 eb       	ldi	r24, 0xB0	; 176
     3fe:	95 e0       	ldi	r25, 0x05	; 5
     400:	9a 87       	std	Y+10, r25	; 0x0a
     402:	89 87       	std	Y+9, r24	; 0x09
	binary[5] = 0b0001010010110001; // 5
     404:	81 eb       	ldi	r24, 0xB1	; 177
     406:	94 e1       	ldi	r25, 0x14	; 20
     408:	9c 87       	std	Y+12, r25	; 0x0c
     40a:	8b 87       	std	Y+11, r24	; 0x0b
	binary[6] = 0b0001010011110001; // 6
     40c:	81 ef       	ldi	r24, 0xF1	; 241
     40e:	94 e1       	ldi	r25, 0x14	; 20
     410:	9e 87       	std	Y+14, r25	; 0x0e
     412:	8d 87       	std	Y+13, r24	; 0x0d
	binary[7] = 0b0001000100010000; // 7
     414:	80 e1       	ldi	r24, 0x10	; 16
     416:	91 e1       	ldi	r25, 0x11	; 17
     418:	98 8b       	std	Y+16, r25	; 0x10
     41a:	8f 87       	std	Y+15, r24	; 0x0f
	binary[8] = 0b0001010111110001; // 8
     41c:	81 ef       	ldi	r24, 0xF1	; 241
     41e:	95 e1       	ldi	r25, 0x15	; 21
     420:	9a 8b       	std	Y+18, r25	; 0x12
     422:	89 8b       	std	Y+17, r24	; 0x11
	binary[9] = 0b0001010110110000; // 9
     424:	80 eb       	ldi	r24, 0xB0	; 176
     426:	95 e1       	ldi	r25, 0x15	; 21
     428:	9c 8b       	std	Y+20, r25	; 0x14
     42a:	8b 8b       	std	Y+19, r24	; 0x13
	binary[10] = '\0';

	return binary[(c - 48)];
     42c:	e6 2f       	mov	r30, r22
     42e:	f0 e0       	ldi	r31, 0x00	; 0
     430:	f0 97       	sbiw	r30, 0x30	; 48
     432:	ee 0f       	add	r30, r30
     434:	ff 1f       	adc	r31, r31
     436:	ec 0f       	add	r30, r28
     438:	fd 1f       	adc	r31, r29
     43a:	81 81       	ldd	r24, Z+1	; 0x01
     43c:	92 81       	ldd	r25, Z+2	; 0x02
     43e:	02 c0       	rjmp	.+4      	; 0x444 <__DATA_REGION_LENGTH__+0x44>
#include "Generator.h"

uint16_t digitLookUp(GUI *self, uint8_t c) {

	if(c < 48 || c > 57) {
		return 0;
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	90 e0       	ldi	r25, 0x00	; 0
	binary[8] = 0b0001010111110001; // 8
	binary[9] = 0b0001010110110000; // 9
	binary[10] = '\0';

	return binary[(c - 48)];
}
     444:	64 96       	adiw	r28, 0x14	; 20
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	f8 94       	cli
     44a:	de bf       	out	0x3e, r29	; 62
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	cd bf       	out	0x3d, r28	; 61
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	08 95       	ret

00000456 <writeChar>:

void writeChar(GUI *self, char ch, int pos) {
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
	// If pos is less than zero or greater than 5, do nothing
	if(pos < 0 || pos > 5) {
     45a:	46 30       	cpi	r20, 0x06	; 6
     45c:	51 05       	cpc	r21, r1
     45e:	e0 f5       	brcc	.+120    	; 0x4d8 <writeChar+0x82>
     460:	ea 01       	movw	r28, r20

	uint16_t digitBinary = 0;
	uint8_t nibble_0 = 0, nibble_1 = 0, nibble_2 = 0, nibble_3 = 0, oldValue = 0, mask = 0, increment = 0;

	// Fetch the value needed to display number "ch" in LCDDRx
	digitBinary = digitLookUp(self, ch);
     462:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <digitLookUp>

	// Bitshift 1 bit to get valid values for incrementing the pointer
	increment = pos >> 1;
     466:	fe 01       	movw	r30, r28
     468:	f5 95       	asr	r31
     46a:	e7 95       	ror	r30

	// Depending on if the value of pos is even or odd we adjust the nibbles
	// and mask correctly
	if((pos % 2) == 0) {
     46c:	c0 fd       	sbrc	r28, 0
     46e:	11 c0       	rjmp	.+34     	; 0x492 <writeChar+0x3c>
		nibble_0 = 0b00001111 & (digitBinary >> 12);
     470:	59 2f       	mov	r21, r25
     472:	52 95       	swap	r21
     474:	5f 70       	andi	r21, 0x0F	; 15
		nibble_1 = 0b00001111 & (digitBinary >> 8);
     476:	49 2f       	mov	r20, r25
     478:	4f 70       	andi	r20, 0x0F	; 15
		nibble_2 = 0b00001111 & (digitBinary >> 4);
     47a:	9c 01       	movw	r18, r24
     47c:	32 95       	swap	r19
     47e:	22 95       	swap	r18
     480:	2f 70       	andi	r18, 0x0F	; 15
     482:	23 27       	eor	r18, r19
     484:	3f 70       	andi	r19, 0x0F	; 15
     486:	23 27       	eor	r18, r19
     488:	32 2f       	mov	r19, r18
     48a:	3f 70       	andi	r19, 0x0F	; 15
		nibble_3 = 0b00001111 & digitBinary;
     48c:	8f 70       	andi	r24, 0x0F	; 15
		// This mask is needed to preserve what is on the right side of
		// LCDDRx
		mask = 0b11110000;
     48e:	90 ef       	ldi	r25, 0xF0	; 240
     490:	10 c0       	rjmp	.+32     	; 0x4b2 <writeChar+0x5c>
		} else {
		nibble_0 = 0b11110000 & (digitBinary >> 8);
     492:	59 2f       	mov	r21, r25
     494:	50 7f       	andi	r21, 0xF0	; 240
		nibble_1 = 0b11110000 & (digitBinary >> 4);
     496:	9c 01       	movw	r18, r24
     498:	32 95       	swap	r19
     49a:	22 95       	swap	r18
     49c:	2f 70       	andi	r18, 0x0F	; 15
     49e:	23 27       	eor	r18, r19
     4a0:	3f 70       	andi	r19, 0x0F	; 15
     4a2:	23 27       	eor	r18, r19
     4a4:	42 2f       	mov	r20, r18
     4a6:	40 7f       	andi	r20, 0xF0	; 240
		nibble_2 = 0b11110000 & digitBinary;
     4a8:	38 2f       	mov	r19, r24
     4aa:	30 7f       	andi	r19, 0xF0	; 240
		nibble_3 = 0b11110000 & (digitBinary << 4);
     4ac:	82 95       	swap	r24
     4ae:	80 7f       	andi	r24, 0xF0	; 240
		// Mask needed to preserve what is on the left side of LCDDRx
		mask = 0b00001111;
     4b0:	9f e0       	ldi	r25, 0x0F	; 15
	// Create a pointer and assign the memory address of LCDDR0
	// (is volatile really needed?)
	volatile uint8_t *LCDDRAddress = &LCDDR0;
	// Increment the pointers memory address with the value calculated earlier
	// This is needed to be able to use LCDDR0+x, LCDDR1+x, LCDDR2+x etc.
	LCDDRAddress = (LCDDRAddress + increment);
     4b2:	ff 27       	eor	r31, r31
     4b4:	e4 51       	subi	r30, 0x14	; 20
     4b6:	ff 4f       	sbci	r31, 0xFF	; 255
	// Preserve the old value by using a mask
	oldValue = mask & *LCDDRAddress;
     4b8:	20 81       	ld	r18, Z
	// Add the nibble using OR
	*LCDDRAddress = oldValue | nibble_0;
     4ba:	29 23       	and	r18, r25
     4bc:	25 2b       	or	r18, r21
     4be:	20 83       	st	Z, r18
	// Increase the memory address of the pointer with 5 to be able to
	// use LCDDRx+5
	LCDDRAddress = LCDDRAddress + 5;

	oldValue = mask & *LCDDRAddress;
     4c0:	25 81       	ldd	r18, Z+5	; 0x05
	*LCDDRAddress = oldValue | nibble_1;
     4c2:	29 23       	and	r18, r25
     4c4:	24 2b       	or	r18, r20
     4c6:	25 83       	std	Z+5, r18	; 0x05
	// Increase with 5 to be able to use LCDDRx+10
	LCDDRAddress = LCDDRAddress + 5;

	oldValue = mask & *LCDDRAddress;
     4c8:	22 85       	ldd	r18, Z+10	; 0x0a
	*LCDDRAddress = oldValue | nibble_2;
     4ca:	29 23       	and	r18, r25
     4cc:	23 2b       	or	r18, r19
     4ce:	22 87       	std	Z+10, r18	; 0x0a
	// Increase with 5 to be able to use LCDDRx+15
	LCDDRAddress = LCDDRAddress + 5;

	oldValue = mask & *LCDDRAddress;
     4d0:	27 85       	ldd	r18, Z+15	; 0x0f
	*LCDDRAddress = oldValue | nibble_3;
     4d2:	92 23       	and	r25, r18
     4d4:	89 2b       	or	r24, r25
     4d6:	87 87       	std	Z+15, r24	; 0x0f

}
     4d8:	df 91       	pop	r29
     4da:	cf 91       	pop	r28
     4dc:	08 95       	ret

000004de <printAt>:

void printAt(GUI *self, long num, int pos) {
     4de:	8f 92       	push	r8
     4e0:	9f 92       	push	r9
     4e2:	af 92       	push	r10
     4e4:	bf 92       	push	r11
     4e6:	cf 92       	push	r12
     4e8:	df 92       	push	r13
     4ea:	ef 92       	push	r14
     4ec:	ff 92       	push	r15
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	8c 01       	movw	r16, r24
     4f8:	4a 01       	movw	r8, r20
     4fa:	5b 01       	movw	r10, r22
     4fc:	e9 01       	movw	r28, r18
    int pp = pos;
    writeChar(self, (num % 100) / 10 + '0', pp);
     4fe:	cb 01       	movw	r24, r22
     500:	ba 01       	movw	r22, r20
     502:	24 e6       	ldi	r18, 0x64	; 100
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	40 e0       	ldi	r20, 0x00	; 0
     508:	50 e0       	ldi	r21, 0x00	; 0
     50a:	0e 94 4b 10 	call	0x2096	; 0x2096 <__divmodsi4>
     50e:	0f 2e       	mov	r0, r31
     510:	fa e0       	ldi	r31, 0x0A	; 10
     512:	cf 2e       	mov	r12, r31
     514:	d1 2c       	mov	r13, r1
     516:	e1 2c       	mov	r14, r1
     518:	f1 2c       	mov	r15, r1
     51a:	f0 2d       	mov	r31, r0
     51c:	a7 01       	movw	r20, r14
     51e:	96 01       	movw	r18, r12
     520:	0e 94 4b 10 	call	0x2096	; 0x2096 <__divmodsi4>
     524:	60 e3       	ldi	r22, 0x30	; 48
     526:	62 0f       	add	r22, r18
     528:	ae 01       	movw	r20, r28
     52a:	c8 01       	movw	r24, r16
     52c:	0e 94 2b 02 	call	0x456	; 0x456 <writeChar>
    pp++;
    writeChar(self, num % 10 + '0', pp);
     530:	21 96       	adiw	r28, 0x01	; 1
     532:	c5 01       	movw	r24, r10
     534:	b4 01       	movw	r22, r8
     536:	a7 01       	movw	r20, r14
     538:	96 01       	movw	r18, r12
     53a:	0e 94 4b 10 	call	0x2096	; 0x2096 <__divmodsi4>
     53e:	60 5d       	subi	r22, 0xD0	; 208
     540:	ae 01       	movw	r20, r28
     542:	c8 01       	movw	r24, r16
     544:	0e 94 2b 02 	call	0x456	; 0x456 <writeChar>
}
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	1f 91       	pop	r17
     54e:	0f 91       	pop	r16
     550:	ff 90       	pop	r15
     552:	ef 90       	pop	r14
     554:	df 90       	pop	r13
     556:	cf 90       	pop	r12
     558:	bf 90       	pop	r11
     55a:	af 90       	pop	r10
     55c:	9f 90       	pop	r9
     55e:	8f 90       	pop	r8
     560:	08 95       	ret

00000562 <update_values>:

// Update the values on the LCD display
void update_values(GUI *self) {
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	ec 01       	movw	r28, r24
	uint8_t mask;
	uint8_t temp;
	// Display current values for Generator 1 and 2
	printAt(self, self->generator1->CurrentHzValue, 0);
     568:	ef 81       	ldd	r30, Y+7	; 0x07
     56a:	f8 85       	ldd	r31, Y+8	; 0x08
     56c:	46 81       	ldd	r20, Z+6	; 0x06
     56e:	50 e0       	ldi	r21, 0x00	; 0
     570:	60 e0       	ldi	r22, 0x00	; 0
     572:	70 e0       	ldi	r23, 0x00	; 0
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	0e 94 6f 02 	call	0x4de	; 0x4de <printAt>
	printAt(self, self->generator2->CurrentHzValue, 4);
     57c:	e9 85       	ldd	r30, Y+9	; 0x09
     57e:	fa 85       	ldd	r31, Y+10	; 0x0a
     580:	46 81       	ldd	r20, Z+6	; 0x06
     582:	50 e0       	ldi	r21, 0x00	; 0
     584:	60 e0       	ldi	r22, 0x00	; 0
     586:	70 e0       	ldi	r23, 0x00	; 0
     588:	24 e0       	ldi	r18, 0x04	; 4
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	ce 01       	movw	r24, r28
     58e:	0e 94 6f 02 	call	0x4de	; 0x4de <printAt>

	// LCDDR0 0b00000100 = 1
	// LCDDR0 0b01000000 = 2
	// If Generator 1 then show a symbol 1 for that generator (S1)
	// otherwise symbol 2 (S2)
	if(self->whichPulse == 0) {
     592:	8e 81       	ldd	r24, Y+6	; 0x06
     594:	81 11       	cpse	r24, r1
     596:	09 c0       	rjmp	.+18     	; 0x5aa <update_values+0x48>
		LCDDR0 = LCDDR0 | 0b00000100;
     598:	ec ee       	ldi	r30, 0xEC	; 236
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	80 81       	ld	r24, Z
     59e:	84 60       	ori	r24, 0x04	; 4
     5a0:	80 83       	st	Z, r24
		mask = 0b10111111;
		temp = LCDDR0 & mask;
     5a2:	80 81       	ld	r24, Z
     5a4:	8f 7b       	andi	r24, 0xBF	; 191
		LCDDR0 = temp;
     5a6:	80 83       	st	Z, r24
     5a8:	08 c0       	rjmp	.+16     	; 0x5ba <update_values+0x58>
		//LCDDR0 = LCDDR0 ^ 0b01000000;
	} else {
		LCDDR0 = LCDDR0 | 0b01000000;
     5aa:	ec ee       	ldi	r30, 0xEC	; 236
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	80 81       	ld	r24, Z
     5b0:	80 64       	ori	r24, 0x40	; 64
     5b2:	80 83       	st	Z, r24
		mask = 0b11111011;
		temp = LCDDR0 & mask;
     5b4:	80 81       	ld	r24, Z
     5b6:	8b 7f       	andi	r24, 0xFB	; 251
		LCDDR0 = temp;
     5b8:	80 83       	st	Z, r24
	}
}
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	08 95       	ret

000005c0 <setButtonPressed>:

void setButtonPressed(GUI *self, int i) {
	self->buttonPressed = i;
     5c0:	fc 01       	movw	r30, r24
     5c2:	65 87       	std	Z+13, r22	; 0x0d
     5c4:	08 95       	ret

000005c6 <setFirstPress>:
}

void setFirstPress(GUI *self, bool i) {
	self->firstpress = i;
     5c6:	fc 01       	movw	r30, r24
     5c8:	63 87       	std	Z+11, r22	; 0x0b
     5ca:	08 95       	ret

000005cc <init_io>:
#include <avr/interrupt.h>
#include "init_io.h"

void init_io() {
	// Up, Down and Center
	PORTB = (1<<PB7) | (1<<PB6) | (1<<PB4);
     5cc:	90 ed       	ldi	r25, 0xD0	; 208
     5ce:	95 b9       	out	0x05, r25	; 5
	// Left and Right
	PORTE = (1<<PE3) | (1<<PE2);
     5d0:	8c e0       	ldi	r24, 0x0C	; 12
     5d2:	8e b9       	out	0x0e, r24	; 14
	
	// Set PIN 6 and 4 on PORT E as output
	DDRE = (1<<DDE6) | (1<<DDE4);
     5d4:	20 e5       	ldi	r18, 0x50	; 80
     5d6:	2d b9       	out	0x0d, r18	; 13

	// Pin Change Enable Mask (Up, Down and Center on joystick)
	PCMSK1 = (1<<PCINT15) | (1 << PCINT14) | (1<<PCINT12);
     5d8:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <__TEXT_REGION_LENGTH__+0x7fc06c>
	// Pin change Enable Mask (Left and Right on joystick)
	PCMSK0 = (1<<PCINT3) | (1<<PCINT2);
     5dc:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7fc06b>

	// External Interrupt Mask Register (EIMSK)
	EIMSK = (1<<PCIE1) | (1<<PCIE0);
     5e0:	80 ec       	ldi	r24, 0xC0	; 192
     5e2:	8d bb       	out	0x1d, r24	; 29
     5e4:	08 95       	ret

000005e6 <init_lcd>:

#include "init_lcd.h"

void init_lcd() {
	// LCD Enable (LCDEN) & Low Power Waveform (LCDAB)
	LCDCRA = (1<<LCDEN) | (1<<LCDAB) | (0<<LCDIF) | (0<<LCDIE) | (0<<LCDBL);
     5e6:	80 ec       	ldi	r24, 0xC0	; 192
     5e8:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>

	// external asynchronous clock source (LCDCS), 1/3 bias (LCD2B), 1/4 duty (LCDMUX1:0), 25 segments enabled (LCDPM2:0)
	LCDCRB = (1<<LCDCS) | (0<<LCD2B) | (1<<LCDMUX1) | (1<<LCDMUX0) | (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
     5ec:	87 eb       	ldi	r24, 0xB7	; 183
     5ee:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>

	// prescaler setting N=16 (LCDPS2:0), clock divider setting D=8 (LCDCD2:0)
	LCDFRR = (0<<LCDPS2) | (0<<LCDPS1) | (0<<LCDPS0) | (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
     5f2:	87 e0       	ldi	r24, 0x07	; 7
     5f4:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>

	// drive time 300 microseconds (LCDDC2:0), contrast control voltage 3.35 V (LCDCC3:0)
	LCDCCR = (0<<LCDDC2) | (0<<LCDDC1) | (0<<LCDDC0) | (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1) | (1<<LCDCC0);
     5f8:	8f e0       	ldi	r24, 0x0F	; 15
     5fa:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
     5fe:	08 95       	ret

00000600 <joystickInterrupt>:

#include "TinyTimber.h"
#include "Joystick.h"
#include "GUI.h"

void joystickInterrupt(Joystick *self) {
     600:	cf 92       	push	r12
     602:	df 92       	push	r13
     604:	ef 92       	push	r14
     606:	ff 92       	push	r15
     608:	0f 93       	push	r16
     60a:	1f 93       	push	r17
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	ec 01       	movw	r28, r24
	// Update the display
	ASYNC(self->gui, update_values, 0);
     612:	0c 81       	ldd	r16, Y+4	; 0x04
     614:	1d 81       	ldd	r17, Y+5	; 0x05
     616:	c1 2c       	mov	r12, r1
     618:	d1 2c       	mov	r13, r1
     61a:	0f 2e       	mov	r0, r31
     61c:	f1 eb       	ldi	r31, 0xB1	; 177
     61e:	ef 2e       	mov	r14, r31
     620:	f2 e0       	ldi	r31, 0x02	; 2
     622:	ff 2e       	mov	r15, r31
     624:	f0 2d       	mov	r31, r0
     626:	20 e0       	ldi	r18, 0x00	; 0
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	a9 01       	movw	r20, r18
     62c:	60 e0       	ldi	r22, 0x00	; 0
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	cb 01       	movw	r24, r22
     632:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <async>
	
	//  If Up or Down is pressed
	if(((PINB >> 6) & 1) == 0) {
     636:	1e 99       	sbic	0x03, 6	; 3
     638:	2c c0       	rjmp	.+88     	; 0x692 <joystickInterrupt+0x92>
		SYNC(self->gui, setButtonPressed, 1);
     63a:	41 e0       	ldi	r20, 0x01	; 1
     63c:	50 e0       	ldi	r21, 0x00	; 0
     63e:	60 ee       	ldi	r22, 0xE0	; 224
     640:	72 e0       	ldi	r23, 0x02	; 2
     642:	8c 81       	ldd	r24, Y+4	; 0x04
     644:	9d 81       	ldd	r25, Y+5	; 0x05
     646:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <sync>
		ASYNC(self->gui, setFirstPress, false);
     64a:	0c 81       	ldd	r16, Y+4	; 0x04
     64c:	1d 81       	ldd	r17, Y+5	; 0x05
     64e:	0f 2e       	mov	r0, r31
     650:	f3 ee       	ldi	r31, 0xE3	; 227
     652:	ef 2e       	mov	r14, r31
     654:	f2 e0       	ldi	r31, 0x02	; 2
     656:	ff 2e       	mov	r15, r31
     658:	f0 2d       	mov	r31, r0
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	a9 01       	movw	r20, r18
     660:	60 e0       	ldi	r22, 0x00	; 0
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	cb 01       	movw	r24, r22
     666:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <async>
		ASYNC(self->gui, repeatIncrease, self->gui->whichPulse );
     66a:	0c 81       	ldd	r16, Y+4	; 0x04
     66c:	1d 81       	ldd	r17, Y+5	; 0x05
     66e:	f8 01       	movw	r30, r16
     670:	c6 80       	ldd	r12, Z+6	; 0x06
     672:	d1 2c       	mov	r13, r1
     674:	0f 2e       	mov	r0, r31
     676:	fa e0       	ldi	r31, 0x0A	; 10
     678:	ef 2e       	mov	r14, r31
     67a:	f1 e0       	ldi	r31, 0x01	; 1
     67c:	ff 2e       	mov	r15, r31
     67e:	f0 2d       	mov	r31, r0
     680:	20 e0       	ldi	r18, 0x00	; 0
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	a9 01       	movw	r20, r18
     686:	60 e0       	ldi	r22, 0x00	; 0
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	cb 01       	movw	r24, r22
     68c:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <async>
     690:	4b c0       	rjmp	.+150    	; 0x728 <joystickInterrupt+0x128>
	} else if(((PINB >> 7) & 1) == 0) {
     692:	1f 99       	sbic	0x03, 7	; 3
     694:	2e c0       	rjmp	.+92     	; 0x6f2 <joystickInterrupt+0xf2>
		SYNC(self->gui, setButtonPressed, 2);
     696:	42 e0       	ldi	r20, 0x02	; 2
     698:	50 e0       	ldi	r21, 0x00	; 0
     69a:	60 ee       	ldi	r22, 0xE0	; 224
     69c:	72 e0       	ldi	r23, 0x02	; 2
     69e:	8c 81       	ldd	r24, Y+4	; 0x04
     6a0:	9d 81       	ldd	r25, Y+5	; 0x05
     6a2:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <sync>
		ASYNC(self->gui, setFirstPress, false);
     6a6:	0c 81       	ldd	r16, Y+4	; 0x04
     6a8:	1d 81       	ldd	r17, Y+5	; 0x05
     6aa:	c1 2c       	mov	r12, r1
     6ac:	d1 2c       	mov	r13, r1
     6ae:	0f 2e       	mov	r0, r31
     6b0:	f3 ee       	ldi	r31, 0xE3	; 227
     6b2:	ef 2e       	mov	r14, r31
     6b4:	f2 e0       	ldi	r31, 0x02	; 2
     6b6:	ff 2e       	mov	r15, r31
     6b8:	f0 2d       	mov	r31, r0
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	a9 01       	movw	r20, r18
     6c0:	60 e0       	ldi	r22, 0x00	; 0
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	cb 01       	movw	r24, r22
     6c6:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <async>
		ASYNC(self->gui, repeatDecrease, self->gui->whichPulse );
     6ca:	0c 81       	ldd	r16, Y+4	; 0x04
     6cc:	1d 81       	ldd	r17, Y+5	; 0x05
     6ce:	f8 01       	movw	r30, r16
     6d0:	c6 80       	ldd	r12, Z+6	; 0x06
     6d2:	d1 2c       	mov	r13, r1
     6d4:	0f 2e       	mov	r0, r31
     6d6:	f0 e9       	ldi	r31, 0x90	; 144
     6d8:	ef 2e       	mov	r14, r31
     6da:	f1 e0       	ldi	r31, 0x01	; 1
     6dc:	ff 2e       	mov	r15, r31
     6de:	f0 2d       	mov	r31, r0
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	a9 01       	movw	r20, r18
     6e6:	60 e0       	ldi	r22, 0x00	; 0
     6e8:	70 e0       	ldi	r23, 0x00	; 0
     6ea:	cb 01       	movw	r24, r22
     6ec:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <async>
     6f0:	1b c0       	rjmp	.+54     	; 0x728 <joystickInterrupt+0x128>
	} else {
		SYNC(self->gui, setButtonPressed, 0);
     6f2:	40 e0       	ldi	r20, 0x00	; 0
     6f4:	50 e0       	ldi	r21, 0x00	; 0
     6f6:	60 ee       	ldi	r22, 0xE0	; 224
     6f8:	72 e0       	ldi	r23, 0x02	; 2
     6fa:	8c 81       	ldd	r24, Y+4	; 0x04
     6fc:	9d 81       	ldd	r25, Y+5	; 0x05
     6fe:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <sync>
		ASYNC(self->gui, setFirstPress, true);
     702:	0c 81       	ldd	r16, Y+4	; 0x04
     704:	1d 81       	ldd	r17, Y+5	; 0x05
     706:	cc 24       	eor	r12, r12
     708:	c3 94       	inc	r12
     70a:	d1 2c       	mov	r13, r1
     70c:	0f 2e       	mov	r0, r31
     70e:	f3 ee       	ldi	r31, 0xE3	; 227
     710:	ef 2e       	mov	r14, r31
     712:	f2 e0       	ldi	r31, 0x02	; 2
     714:	ff 2e       	mov	r15, r31
     716:	f0 2d       	mov	r31, r0
     718:	20 e0       	ldi	r18, 0x00	; 0
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	a9 01       	movw	r20, r18
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	cb 01       	movw	r24, r22
     724:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <async>
	}
	// If Center is pressed, save frequency and reset
	if(((PINB >> 4) & 1) == 0) {
     728:	1c 99       	sbic	0x03, 4	; 3
     72a:	2a c0       	rjmp	.+84     	; 0x780 <joystickInterrupt+0x180>
		if(self->gui->whichPulse == 0) {
     72c:	ec 81       	ldd	r30, Y+4	; 0x04
     72e:	fd 81       	ldd	r31, Y+5	; 0x05
     730:	86 81       	ldd	r24, Z+6	; 0x06
     732:	81 11       	cpse	r24, r1
     734:	13 c0       	rjmp	.+38     	; 0x75c <joystickInterrupt+0x15c>
			ASYNC(self->gui->generator1, updatePulseValue, 0);
     736:	07 81       	ldd	r16, Z+7	; 0x07
     738:	10 85       	ldd	r17, Z+8	; 0x08
     73a:	c1 2c       	mov	r12, r1
     73c:	d1 2c       	mov	r13, r1
     73e:	0f 2e       	mov	r0, r31
     740:	f1 ea       	ldi	r31, 0xA1	; 161
     742:	ef 2e       	mov	r14, r31
     744:	f0 e0       	ldi	r31, 0x00	; 0
     746:	ff 2e       	mov	r15, r31
     748:	f0 2d       	mov	r31, r0
     74a:	20 e0       	ldi	r18, 0x00	; 0
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	a9 01       	movw	r20, r18
     750:	60 e0       	ldi	r22, 0x00	; 0
     752:	70 e0       	ldi	r23, 0x00	; 0
     754:	cb 01       	movw	r24, r22
     756:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <async>
     75a:	12 c0       	rjmp	.+36     	; 0x780 <joystickInterrupt+0x180>
		} else {
			ASYNC(self->gui->generator2, updatePulseValue, 0);
     75c:	01 85       	ldd	r16, Z+9	; 0x09
     75e:	12 85       	ldd	r17, Z+10	; 0x0a
     760:	c1 2c       	mov	r12, r1
     762:	d1 2c       	mov	r13, r1
     764:	0f 2e       	mov	r0, r31
     766:	f1 ea       	ldi	r31, 0xA1	; 161
     768:	ef 2e       	mov	r14, r31
     76a:	f0 e0       	ldi	r31, 0x00	; 0
     76c:	ff 2e       	mov	r15, r31
     76e:	f0 2d       	mov	r31, r0
     770:	20 e0       	ldi	r18, 0x00	; 0
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	a9 01       	movw	r20, r18
     776:	60 e0       	ldi	r22, 0x00	; 0
     778:	70 e0       	ldi	r23, 0x00	; 0
     77a:	cb 01       	movw	r24, r22
     77c:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <async>
		}
	}

	// If Left or Right is pressed then change active pulse generator input
	if(((PINE >> 2) & 1) == 0) {
     780:	62 99       	sbic	0x0c, 2	; 12
     782:	04 c0       	rjmp	.+8      	; 0x78c <joystickInterrupt+0x18c>
		self->gui->whichPulse = 0;
     784:	ec 81       	ldd	r30, Y+4	; 0x04
     786:	fd 81       	ldd	r31, Y+5	; 0x05
     788:	16 82       	std	Z+6, r1	; 0x06
     78a:	06 c0       	rjmp	.+12     	; 0x798 <joystickInterrupt+0x198>
	} else if(((PINE >> 3) & 1) == 0) {
     78c:	63 99       	sbic	0x0c, 3	; 12
     78e:	04 c0       	rjmp	.+8      	; 0x798 <joystickInterrupt+0x198>
		self->gui->whichPulse = 1;
     790:	ec 81       	ldd	r30, Y+4	; 0x04
     792:	fd 81       	ldd	r31, Y+5	; 0x05
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	86 83       	std	Z+6, r24	; 0x06
	}
}
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	1f 91       	pop	r17
     79e:	0f 91       	pop	r16
     7a0:	ff 90       	pop	r15
     7a2:	ef 90       	pop	r14
     7a4:	df 90       	pop	r13
     7a6:	cf 90       	pop	r12
     7a8:	08 95       	ret

000007aa <main>:
Joystick joy = initJoystick(&gui);

int main(void)
{
	// Setup the clockspeed
	CLKPR  = 0x80;
     7aa:	e1 e6       	ldi	r30, 0x61	; 97
     7ac:	f0 e0       	ldi	r31, 0x00	; 0
     7ae:	80 e8       	ldi	r24, 0x80	; 128
     7b0:	80 83       	st	Z, r24
	CLKPR  = 0x00;
     7b2:	10 82       	st	Z, r1

	// Initialize LCD and input/output
	init_lcd();
     7b4:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <init_lcd>
	init_io();
     7b8:	0e 94 e6 02 	call	0x5cc	; 0x5cc <init_io>

	// Install interrupts for joystick
	INSTALL(&joy, joystickInterrupt, IRQ_PCINT0);
     7bc:	41 e0       	ldi	r20, 0x01	; 1
     7be:	60 e0       	ldi	r22, 0x00	; 0
     7c0:	73 e0       	ldi	r23, 0x03	; 3
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	91 e0       	ldi	r25, 0x01	; 1
     7c6:	0e 94 03 10 	call	0x2006	; 0x2006 <install>
	INSTALL(&joy, joystickInterrupt, IRQ_PCINT1);
     7ca:	42 e0       	ldi	r20, 0x02	; 2
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	73 e0       	ldi	r23, 0x03	; 3
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	91 e0       	ldi	r25, 0x01	; 1
     7d4:	0e 94 03 10 	call	0x2006	; 0x2006 <install>
	return TINYTIMBER(&gui, update_values, 0);
     7d8:	40 e0       	ldi	r20, 0x00	; 0
     7da:	50 e0       	ldi	r21, 0x00	; 0
     7dc:	61 eb       	ldi	r22, 0xB1	; 177
     7de:	72 e0       	ldi	r23, 0x02	; 2
     7e0:	87 e0       	ldi	r24, 0x07	; 7
     7e2:	91 e0       	ldi	r25, 0x01	; 1
     7e4:	0e 94 1d 10 	call	0x203a	; 0x203a <tinytimber>
}
     7e8:	08 95       	ret

000007ea <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	00 d0       	rcall	.+0      	; 0x7f0 <initialize+0x6>
     7f0:	00 d0       	rcall	.+0      	; 0x7f2 <initialize+0x8>
     7f2:	cd b7       	in	r28, 0x3d	; 61
     7f4:	de b7       	in	r29, 0x3e	; 62
     7f6:	89 e2       	ldi	r24, 0x29	; 41
     7f8:	92 e0       	ldi	r25, 0x02	; 2
     7fa:	29 e0       	ldi	r18, 0x09	; 9
     7fc:	33 e0       	ldi	r19, 0x03	; 3
     7fe:	fc 01       	movw	r30, r24
     800:	70 97       	sbiw	r30, 0x10	; 16
     802:	91 83       	std	Z+1, r25	; 0x01
     804:	80 83       	st	Z, r24
     806:	40 96       	adiw	r24, 0x10	; 16
     808:	82 17       	cp	r24, r18
     80a:	93 07       	cpc	r25, r19
     80c:	c1 f7       	brne	.-16     	; 0x7fe <initialize+0x14>
     80e:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <messages+0xe1>
     812:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <messages+0xe0>
     816:	e4 e6       	ldi	r30, 0x64	; 100
     818:	f1 e0       	ldi	r31, 0x01	; 1
     81a:	81 e8       	ldi	r24, 0x81	; 129
     81c:	91 e0       	ldi	r25, 0x01	; 1
     81e:	91 83       	std	Z+1, r25	; 0x01
     820:	80 83       	st	Z, r24
     822:	8e e9       	ldi	r24, 0x9E	; 158
     824:	91 e0       	ldi	r25, 0x01	; 1
     826:	96 8f       	std	Z+30, r25	; 0x1e
     828:	85 8f       	std	Z+29, r24	; 0x1d
     82a:	ab eb       	ldi	r26, 0xBB	; 187
     82c:	b1 e0       	ldi	r27, 0x01	; 1
     82e:	b3 af       	std	Z+59, r27	; 0x3b
     830:	a2 af       	std	Z+58, r26	; 0x3a
     832:	1d 92       	st	X+, r1
     834:	1c 92       	st	X, r1
     836:	fa 83       	std	Y+2, r31	; 0x02
     838:	e9 83       	std	Y+1, r30	; 0x01
     83a:	e5 e6       	ldi	r30, 0x65	; 101
     83c:	f3 e0       	ldi	r31, 0x03	; 3
     83e:	fc 83       	std	Y+4, r31	; 0x04
     840:	eb 83       	std	Y+3, r30	; 0x03
     842:	89 81       	ldd	r24, Y+1	; 0x01
     844:	9a 81       	ldd	r25, Y+2	; 0x02
     846:	06 96       	adiw	r24, 0x06	; 6
     848:	0e 94 8c 10 	call	0x2118	; 0x2118 <setjmp>
     84c:	8b 81       	ldd	r24, Y+3	; 0x03
     84e:	9c 81       	ldd	r25, Y+4	; 0x04
     850:	e9 81       	ldd	r30, Y+1	; 0x01
     852:	fa 81       	ldd	r31, Y+2	; 0x02
     854:	97 8b       	std	Z+23, r25	; 0x17
     856:	86 8b       	std	Z+22, r24	; 0x16
     858:	91 8f       	std	Z+25, r25	; 0x19
     85a:	80 8f       	std	Z+24, r24	; 0x18
     85c:	85 e9       	ldi	r24, 0x95	; 149
     85e:	9f e0       	ldi	r25, 0x0F	; 15
     860:	94 8f       	std	Z+28, r25	; 0x1c
     862:	83 8f       	std	Z+27, r24	; 0x1b
     864:	15 82       	std	Z+5, r1	; 0x05
     866:	14 82       	std	Z+4, r1	; 0x04
     868:	7d 96       	adiw	r30, 0x1d	; 29
     86a:	fa 83       	std	Y+2, r31	; 0x02
     86c:	e9 83       	std	Y+1, r30	; 0x01
     86e:	eb 81       	ldd	r30, Y+3	; 0x03
     870:	fc 81       	ldd	r31, Y+4	; 0x04
     872:	e0 5a       	subi	r30, 0xA0	; 160
     874:	ff 4f       	sbci	r31, 0xFF	; 255
     876:	fc 83       	std	Y+4, r31	; 0x04
     878:	eb 83       	std	Y+3, r30	; 0x03
     87a:	89 81       	ldd	r24, Y+1	; 0x01
     87c:	9a 81       	ldd	r25, Y+2	; 0x02
     87e:	88 5d       	subi	r24, 0xD8	; 216
     880:	91 40       	sbci	r25, 0x01	; 1
     882:	f9 f6       	brne	.-66     	; 0x842 <initialize+0x58>
     884:	ec ef       	ldi	r30, 0xFC	; 252
     886:	f1 e0       	ldi	r31, 0x01	; 1
     888:	11 82       	std	Z+1, r1	; 0x01
     88a:	10 82       	st	Z, r1
     88c:	15 82       	std	Z+5, r1	; 0x05
     88e:	14 82       	std	Z+4, r1	; 0x04
     890:	13 82       	std	Z+3, r1	; 0x03
     892:	12 82       	std	Z+2, r1	; 0x02
     894:	e1 e6       	ldi	r30, 0x61	; 97
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	80 e8       	ldi	r24, 0x80	; 128
     89a:	80 83       	st	Z, r24
     89c:	10 82       	st	Z, r1
     89e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     8a2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     8a6:	84 e0       	ldi	r24, 0x04	; 4
     8a8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     8b2:	0f 90       	pop	r0
     8b4:	0f 90       	pop	r0
     8b6:	0f 90       	pop	r0
     8b8:	0f 90       	pop	r0
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	08 95       	ret

000008c0 <dispatch>:
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	00 d0       	rcall	.+0      	; 0x8c6 <dispatch+0x6>
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
     8ca:	9a 83       	std	Y+2, r25	; 0x02
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <current>
     8d2:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <current+0x1>
     8d6:	06 96       	adiw	r24, 0x06	; 6
     8d8:	0e 94 8c 10 	call	0x2118	; 0x2118 <setjmp>
     8dc:	89 2b       	or	r24, r25
     8de:	59 f4       	brne	.+22     	; 0x8f6 <dispatch+0x36>
     8e0:	89 81       	ldd	r24, Y+1	; 0x01
     8e2:	9a 81       	ldd	r25, Y+2	; 0x02
     8e4:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <current+0x1>
     8e8:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <current>
     8ec:	61 e0       	ldi	r22, 0x01	; 1
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	06 96       	adiw	r24, 0x06	; 6
     8f2:	0e 94 ac 10 	call	0x2158	; 0x2158 <longjmp>
     8f6:	0f 90       	pop	r0
     8f8:	0f 90       	pop	r0
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	08 95       	ret

00000900 <schedule>:
     900:	0f 93       	push	r16
     902:	1f 93       	push	r17
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
     908:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <msgQ>
     90c:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <msgQ+0x1>
     910:	30 97       	sbiw	r30, 0x00	; 0
     912:	61 f1       	breq	.+88     	; 0x96c <schedule+0x6c>
     914:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <threadPool>
     918:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <threadPool+0x1>
     91c:	00 97       	sbiw	r24, 0x00	; 0
     91e:	31 f1       	breq	.+76     	; 0x96c <schedule+0x6c>
     920:	c0 91 2b 01 	lds	r28, 0x012B	; 0x80012b <activeStack>
     924:	d0 91 2c 01 	lds	r29, 0x012C	; 0x80012c <activeStack+0x1>
     928:	aa 81       	ldd	r26, Y+2	; 0x02
     92a:	bb 81       	ldd	r27, Y+3	; 0x03
     92c:	10 97       	sbiw	r26, 0x00	; 0
     92e:	79 f0       	breq	.+30     	; 0x94e <schedule+0x4e>
     930:	46 81       	ldd	r20, Z+6	; 0x06
     932:	57 81       	ldd	r21, Z+7	; 0x07
     934:	60 85       	ldd	r22, Z+8	; 0x08
     936:	71 85       	ldd	r23, Z+9	; 0x09
     938:	16 96       	adiw	r26, 0x06	; 6
     93a:	0d 91       	ld	r16, X+
     93c:	1d 91       	ld	r17, X+
     93e:	2d 91       	ld	r18, X+
     940:	3c 91       	ld	r19, X
     942:	19 97       	sbiw	r26, 0x09	; 9
     944:	40 1b       	sub	r20, r16
     946:	51 0b       	sbc	r21, r17
     948:	62 0b       	sbc	r22, r18
     94a:	73 0b       	sbc	r23, r19
     94c:	7a f4       	brpl	.+30     	; 0x96c <schedule+0x6c>
     94e:	fc 01       	movw	r30, r24
     950:	20 81       	ld	r18, Z
     952:	31 81       	ldd	r19, Z+1	; 0x01
     954:	30 93 2e 01 	sts	0x012E, r19	; 0x80012e <threadPool+0x1>
     958:	20 93 2d 01 	sts	0x012D, r18	; 0x80012d <threadPool>
     95c:	d1 83       	std	Z+1, r29	; 0x01
     95e:	c0 83       	st	Z, r28
     960:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <activeStack+0x1>
     964:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <activeStack>
     968:	0e 94 60 04 	call	0x8c0	; 0x8c0 <dispatch>
     96c:	df 91       	pop	r29
     96e:	cf 91       	pop	r28
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	08 95       	ret

00000976 <__vector_1>:
     976:	1f 92       	push	r1
     978:	0f 92       	push	r0
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	0f 92       	push	r0
     97e:	11 24       	eor	r1, r1
     980:	2f 93       	push	r18
     982:	3f 93       	push	r19
     984:	4f 93       	push	r20
     986:	5f 93       	push	r21
     988:	6f 93       	push	r22
     98a:	7f 93       	push	r23
     98c:	8f 93       	push	r24
     98e:	9f 93       	push	r25
     990:	af 93       	push	r26
     992:	bf 93       	push	r27
     994:	ef 93       	push	r30
     996:	ff 93       	push	r31
     998:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
     99c:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
     9a0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     9a4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     9a8:	c9 01       	movw	r24, r18
     9aa:	03 2e       	mov	r0, r19
     9ac:	00 0c       	add	r0, r0
     9ae:	aa 0b       	sbc	r26, r26
     9b0:	bb 0b       	sbc	r27, r27
     9b2:	dc 01       	movw	r26, r24
     9b4:	99 27       	eor	r25, r25
     9b6:	88 27       	eor	r24, r24
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	84 2b       	or	r24, r20
     9be:	95 2b       	or	r25, r21
     9c0:	a6 2b       	or	r26, r22
     9c2:	b7 2b       	or	r27, r23
     9c4:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     9c8:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     9cc:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     9d0:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     9d4:	b0 9b       	sbis	0x16, 0	; 22
     9d6:	1b c0       	rjmp	.+54     	; 0xa0e <__vector_1+0x98>
     9d8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     9dc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     9e0:	c9 01       	movw	r24, r18
     9e2:	01 96       	adiw	r24, 0x01	; 1
     9e4:	09 2e       	mov	r0, r25
     9e6:	00 0c       	add	r0, r0
     9e8:	aa 0b       	sbc	r26, r26
     9ea:	bb 0b       	sbc	r27, r27
     9ec:	dc 01       	movw	r26, r24
     9ee:	99 27       	eor	r25, r25
     9f0:	88 27       	eor	r24, r24
     9f2:	60 e0       	ldi	r22, 0x00	; 0
     9f4:	70 e0       	ldi	r23, 0x00	; 0
     9f6:	84 2b       	or	r24, r20
     9f8:	95 2b       	or	r25, r21
     9fa:	a6 2b       	or	r26, r22
     9fc:	b7 2b       	or	r27, r23
     9fe:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     a02:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     a06:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     a0a:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     a0e:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <mtable>
     a12:	f0 91 d9 01 	lds	r31, 0x01D9	; 0x8001d9 <mtable+0x1>
     a16:	30 97       	sbiw	r30, 0x00	; 0
     a18:	39 f0       	breq	.+14     	; 0xa28 <__vector_1+0xb2>
     a1a:	60 e0       	ldi	r22, 0x00	; 0
     a1c:	70 e0       	ldi	r23, 0x00	; 0
     a1e:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <otable>
     a22:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <otable+0x1>
     a26:	09 95       	icall
     a28:	0e 94 80 04 	call	0x900	; 0x900 <schedule>
     a2c:	ff 91       	pop	r31
     a2e:	ef 91       	pop	r30
     a30:	bf 91       	pop	r27
     a32:	af 91       	pop	r26
     a34:	9f 91       	pop	r25
     a36:	8f 91       	pop	r24
     a38:	7f 91       	pop	r23
     a3a:	6f 91       	pop	r22
     a3c:	5f 91       	pop	r21
     a3e:	4f 91       	pop	r20
     a40:	3f 91       	pop	r19
     a42:	2f 91       	pop	r18
     a44:	0f 90       	pop	r0
     a46:	0f be       	out	0x3f, r0	; 63
     a48:	0f 90       	pop	r0
     a4a:	1f 90       	pop	r1
     a4c:	18 95       	reti

00000a4e <__vector_2>:
     a4e:	1f 92       	push	r1
     a50:	0f 92       	push	r0
     a52:	0f b6       	in	r0, 0x3f	; 63
     a54:	0f 92       	push	r0
     a56:	11 24       	eor	r1, r1
     a58:	2f 93       	push	r18
     a5a:	3f 93       	push	r19
     a5c:	4f 93       	push	r20
     a5e:	5f 93       	push	r21
     a60:	6f 93       	push	r22
     a62:	7f 93       	push	r23
     a64:	8f 93       	push	r24
     a66:	9f 93       	push	r25
     a68:	af 93       	push	r26
     a6a:	bf 93       	push	r27
     a6c:	ef 93       	push	r30
     a6e:	ff 93       	push	r31
     a70:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
     a74:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
     a78:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a7c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a80:	c9 01       	movw	r24, r18
     a82:	03 2e       	mov	r0, r19
     a84:	00 0c       	add	r0, r0
     a86:	aa 0b       	sbc	r26, r26
     a88:	bb 0b       	sbc	r27, r27
     a8a:	dc 01       	movw	r26, r24
     a8c:	99 27       	eor	r25, r25
     a8e:	88 27       	eor	r24, r24
     a90:	60 e0       	ldi	r22, 0x00	; 0
     a92:	70 e0       	ldi	r23, 0x00	; 0
     a94:	84 2b       	or	r24, r20
     a96:	95 2b       	or	r25, r21
     a98:	a6 2b       	or	r26, r22
     a9a:	b7 2b       	or	r27, r23
     a9c:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     aa0:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     aa4:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     aa8:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     aac:	b0 9b       	sbis	0x16, 0	; 22
     aae:	1b c0       	rjmp	.+54     	; 0xae6 <__vector_2+0x98>
     ab0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ab4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ab8:	c9 01       	movw	r24, r18
     aba:	01 96       	adiw	r24, 0x01	; 1
     abc:	09 2e       	mov	r0, r25
     abe:	00 0c       	add	r0, r0
     ac0:	aa 0b       	sbc	r26, r26
     ac2:	bb 0b       	sbc	r27, r27
     ac4:	dc 01       	movw	r26, r24
     ac6:	99 27       	eor	r25, r25
     ac8:	88 27       	eor	r24, r24
     aca:	60 e0       	ldi	r22, 0x00	; 0
     acc:	70 e0       	ldi	r23, 0x00	; 0
     ace:	84 2b       	or	r24, r20
     ad0:	95 2b       	or	r25, r21
     ad2:	a6 2b       	or	r26, r22
     ad4:	b7 2b       	or	r27, r23
     ad6:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     ada:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     ade:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     ae2:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     ae6:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <mtable+0x2>
     aea:	f0 91 db 01 	lds	r31, 0x01DB	; 0x8001db <mtable+0x3>
     aee:	30 97       	sbiw	r30, 0x00	; 0
     af0:	39 f0       	breq	.+14     	; 0xb00 <__vector_2+0xb2>
     af2:	61 e0       	ldi	r22, 0x01	; 1
     af4:	70 e0       	ldi	r23, 0x00	; 0
     af6:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <otable+0x2>
     afa:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <otable+0x3>
     afe:	09 95       	icall
     b00:	0e 94 80 04 	call	0x900	; 0x900 <schedule>
     b04:	ff 91       	pop	r31
     b06:	ef 91       	pop	r30
     b08:	bf 91       	pop	r27
     b0a:	af 91       	pop	r26
     b0c:	9f 91       	pop	r25
     b0e:	8f 91       	pop	r24
     b10:	7f 91       	pop	r23
     b12:	6f 91       	pop	r22
     b14:	5f 91       	pop	r21
     b16:	4f 91       	pop	r20
     b18:	3f 91       	pop	r19
     b1a:	2f 91       	pop	r18
     b1c:	0f 90       	pop	r0
     b1e:	0f be       	out	0x3f, r0	; 63
     b20:	0f 90       	pop	r0
     b22:	1f 90       	pop	r1
     b24:	18 95       	reti

00000b26 <__vector_3>:
     b26:	1f 92       	push	r1
     b28:	0f 92       	push	r0
     b2a:	0f b6       	in	r0, 0x3f	; 63
     b2c:	0f 92       	push	r0
     b2e:	11 24       	eor	r1, r1
     b30:	2f 93       	push	r18
     b32:	3f 93       	push	r19
     b34:	4f 93       	push	r20
     b36:	5f 93       	push	r21
     b38:	6f 93       	push	r22
     b3a:	7f 93       	push	r23
     b3c:	8f 93       	push	r24
     b3e:	9f 93       	push	r25
     b40:	af 93       	push	r26
     b42:	bf 93       	push	r27
     b44:	ef 93       	push	r30
     b46:	ff 93       	push	r31
     b48:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
     b4c:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
     b50:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b54:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b58:	c9 01       	movw	r24, r18
     b5a:	03 2e       	mov	r0, r19
     b5c:	00 0c       	add	r0, r0
     b5e:	aa 0b       	sbc	r26, r26
     b60:	bb 0b       	sbc	r27, r27
     b62:	dc 01       	movw	r26, r24
     b64:	99 27       	eor	r25, r25
     b66:	88 27       	eor	r24, r24
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	84 2b       	or	r24, r20
     b6e:	95 2b       	or	r25, r21
     b70:	a6 2b       	or	r26, r22
     b72:	b7 2b       	or	r27, r23
     b74:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     b78:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     b7c:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     b80:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     b84:	b0 9b       	sbis	0x16, 0	; 22
     b86:	1b c0       	rjmp	.+54     	; 0xbbe <__vector_3+0x98>
     b88:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b8c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b90:	c9 01       	movw	r24, r18
     b92:	01 96       	adiw	r24, 0x01	; 1
     b94:	09 2e       	mov	r0, r25
     b96:	00 0c       	add	r0, r0
     b98:	aa 0b       	sbc	r26, r26
     b9a:	bb 0b       	sbc	r27, r27
     b9c:	dc 01       	movw	r26, r24
     b9e:	99 27       	eor	r25, r25
     ba0:	88 27       	eor	r24, r24
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	84 2b       	or	r24, r20
     ba8:	95 2b       	or	r25, r21
     baa:	a6 2b       	or	r26, r22
     bac:	b7 2b       	or	r27, r23
     bae:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     bb2:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     bb6:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     bba:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     bbe:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <mtable+0x4>
     bc2:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <mtable+0x5>
     bc6:	30 97       	sbiw	r30, 0x00	; 0
     bc8:	39 f0       	breq	.+14     	; 0xbd8 <__vector_3+0xb2>
     bca:	62 e0       	ldi	r22, 0x02	; 2
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <otable+0x4>
     bd2:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <otable+0x5>
     bd6:	09 95       	icall
     bd8:	0e 94 80 04 	call	0x900	; 0x900 <schedule>
     bdc:	ff 91       	pop	r31
     bde:	ef 91       	pop	r30
     be0:	bf 91       	pop	r27
     be2:	af 91       	pop	r26
     be4:	9f 91       	pop	r25
     be6:	8f 91       	pop	r24
     be8:	7f 91       	pop	r23
     bea:	6f 91       	pop	r22
     bec:	5f 91       	pop	r21
     bee:	4f 91       	pop	r20
     bf0:	3f 91       	pop	r19
     bf2:	2f 91       	pop	r18
     bf4:	0f 90       	pop	r0
     bf6:	0f be       	out	0x3f, r0	; 63
     bf8:	0f 90       	pop	r0
     bfa:	1f 90       	pop	r1
     bfc:	18 95       	reti

00000bfe <__vector_4>:
     bfe:	1f 92       	push	r1
     c00:	0f 92       	push	r0
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	0f 92       	push	r0
     c06:	11 24       	eor	r1, r1
     c08:	2f 93       	push	r18
     c0a:	3f 93       	push	r19
     c0c:	4f 93       	push	r20
     c0e:	5f 93       	push	r21
     c10:	6f 93       	push	r22
     c12:	7f 93       	push	r23
     c14:	8f 93       	push	r24
     c16:	9f 93       	push	r25
     c18:	af 93       	push	r26
     c1a:	bf 93       	push	r27
     c1c:	ef 93       	push	r30
     c1e:	ff 93       	push	r31
     c20:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
     c24:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
     c28:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c2c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c30:	c9 01       	movw	r24, r18
     c32:	03 2e       	mov	r0, r19
     c34:	00 0c       	add	r0, r0
     c36:	aa 0b       	sbc	r26, r26
     c38:	bb 0b       	sbc	r27, r27
     c3a:	dc 01       	movw	r26, r24
     c3c:	99 27       	eor	r25, r25
     c3e:	88 27       	eor	r24, r24
     c40:	60 e0       	ldi	r22, 0x00	; 0
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	84 2b       	or	r24, r20
     c46:	95 2b       	or	r25, r21
     c48:	a6 2b       	or	r26, r22
     c4a:	b7 2b       	or	r27, r23
     c4c:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     c50:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     c54:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     c58:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     c5c:	b0 9b       	sbis	0x16, 0	; 22
     c5e:	1b c0       	rjmp	.+54     	; 0xc96 <__vector_4+0x98>
     c60:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c64:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c68:	c9 01       	movw	r24, r18
     c6a:	01 96       	adiw	r24, 0x01	; 1
     c6c:	09 2e       	mov	r0, r25
     c6e:	00 0c       	add	r0, r0
     c70:	aa 0b       	sbc	r26, r26
     c72:	bb 0b       	sbc	r27, r27
     c74:	dc 01       	movw	r26, r24
     c76:	99 27       	eor	r25, r25
     c78:	88 27       	eor	r24, r24
     c7a:	60 e0       	ldi	r22, 0x00	; 0
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	84 2b       	or	r24, r20
     c80:	95 2b       	or	r25, r21
     c82:	a6 2b       	or	r26, r22
     c84:	b7 2b       	or	r27, r23
     c86:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     c8a:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     c8e:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     c92:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     c96:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <mtable+0x6>
     c9a:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <mtable+0x7>
     c9e:	30 97       	sbiw	r30, 0x00	; 0
     ca0:	39 f0       	breq	.+14     	; 0xcb0 <__vector_4+0xb2>
     ca2:	63 e0       	ldi	r22, 0x03	; 3
     ca4:	70 e0       	ldi	r23, 0x00	; 0
     ca6:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <otable+0x6>
     caa:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <otable+0x7>
     cae:	09 95       	icall
     cb0:	0e 94 80 04 	call	0x900	; 0x900 <schedule>
     cb4:	ff 91       	pop	r31
     cb6:	ef 91       	pop	r30
     cb8:	bf 91       	pop	r27
     cba:	af 91       	pop	r26
     cbc:	9f 91       	pop	r25
     cbe:	8f 91       	pop	r24
     cc0:	7f 91       	pop	r23
     cc2:	6f 91       	pop	r22
     cc4:	5f 91       	pop	r21
     cc6:	4f 91       	pop	r20
     cc8:	3f 91       	pop	r19
     cca:	2f 91       	pop	r18
     ccc:	0f 90       	pop	r0
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	0f 90       	pop	r0
     cd2:	1f 90       	pop	r1
     cd4:	18 95       	reti

00000cd6 <__vector_5>:
     cd6:	1f 92       	push	r1
     cd8:	0f 92       	push	r0
     cda:	0f b6       	in	r0, 0x3f	; 63
     cdc:	0f 92       	push	r0
     cde:	11 24       	eor	r1, r1
     ce0:	2f 93       	push	r18
     ce2:	3f 93       	push	r19
     ce4:	4f 93       	push	r20
     ce6:	5f 93       	push	r21
     ce8:	6f 93       	push	r22
     cea:	7f 93       	push	r23
     cec:	8f 93       	push	r24
     cee:	9f 93       	push	r25
     cf0:	af 93       	push	r26
     cf2:	bf 93       	push	r27
     cf4:	ef 93       	push	r30
     cf6:	ff 93       	push	r31
     cf8:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
     cfc:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
     d00:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d04:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d08:	c9 01       	movw	r24, r18
     d0a:	03 2e       	mov	r0, r19
     d0c:	00 0c       	add	r0, r0
     d0e:	aa 0b       	sbc	r26, r26
     d10:	bb 0b       	sbc	r27, r27
     d12:	dc 01       	movw	r26, r24
     d14:	99 27       	eor	r25, r25
     d16:	88 27       	eor	r24, r24
     d18:	60 e0       	ldi	r22, 0x00	; 0
     d1a:	70 e0       	ldi	r23, 0x00	; 0
     d1c:	84 2b       	or	r24, r20
     d1e:	95 2b       	or	r25, r21
     d20:	a6 2b       	or	r26, r22
     d22:	b7 2b       	or	r27, r23
     d24:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     d28:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     d2c:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     d30:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     d34:	b0 9b       	sbis	0x16, 0	; 22
     d36:	1b c0       	rjmp	.+54     	; 0xd6e <__vector_5+0x98>
     d38:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d3c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d40:	c9 01       	movw	r24, r18
     d42:	01 96       	adiw	r24, 0x01	; 1
     d44:	09 2e       	mov	r0, r25
     d46:	00 0c       	add	r0, r0
     d48:	aa 0b       	sbc	r26, r26
     d4a:	bb 0b       	sbc	r27, r27
     d4c:	dc 01       	movw	r26, r24
     d4e:	99 27       	eor	r25, r25
     d50:	88 27       	eor	r24, r24
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	70 e0       	ldi	r23, 0x00	; 0
     d56:	84 2b       	or	r24, r20
     d58:	95 2b       	or	r25, r21
     d5a:	a6 2b       	or	r26, r22
     d5c:	b7 2b       	or	r27, r23
     d5e:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     d62:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     d66:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     d6a:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     d6e:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <mtable+0x8>
     d72:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <mtable+0x9>
     d76:	30 97       	sbiw	r30, 0x00	; 0
     d78:	39 f0       	breq	.+14     	; 0xd88 <__vector_5+0xb2>
     d7a:	64 e0       	ldi	r22, 0x04	; 4
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <otable+0x8>
     d82:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <otable+0x9>
     d86:	09 95       	icall
     d88:	0e 94 80 04 	call	0x900	; 0x900 <schedule>
     d8c:	ff 91       	pop	r31
     d8e:	ef 91       	pop	r30
     d90:	bf 91       	pop	r27
     d92:	af 91       	pop	r26
     d94:	9f 91       	pop	r25
     d96:	8f 91       	pop	r24
     d98:	7f 91       	pop	r23
     d9a:	6f 91       	pop	r22
     d9c:	5f 91       	pop	r21
     d9e:	4f 91       	pop	r20
     da0:	3f 91       	pop	r19
     da2:	2f 91       	pop	r18
     da4:	0f 90       	pop	r0
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	0f 90       	pop	r0
     daa:	1f 90       	pop	r1
     dac:	18 95       	reti

00000dae <__vector_10>:
     dae:	1f 92       	push	r1
     db0:	0f 92       	push	r0
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	0f 92       	push	r0
     db6:	11 24       	eor	r1, r1
     db8:	2f 93       	push	r18
     dba:	3f 93       	push	r19
     dbc:	4f 93       	push	r20
     dbe:	5f 93       	push	r21
     dc0:	6f 93       	push	r22
     dc2:	7f 93       	push	r23
     dc4:	8f 93       	push	r24
     dc6:	9f 93       	push	r25
     dc8:	af 93       	push	r26
     dca:	bf 93       	push	r27
     dcc:	ef 93       	push	r30
     dce:	ff 93       	push	r31
     dd0:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
     dd4:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
     dd8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ddc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     de0:	c9 01       	movw	r24, r18
     de2:	03 2e       	mov	r0, r19
     de4:	00 0c       	add	r0, r0
     de6:	aa 0b       	sbc	r26, r26
     de8:	bb 0b       	sbc	r27, r27
     dea:	dc 01       	movw	r26, r24
     dec:	99 27       	eor	r25, r25
     dee:	88 27       	eor	r24, r24
     df0:	60 e0       	ldi	r22, 0x00	; 0
     df2:	70 e0       	ldi	r23, 0x00	; 0
     df4:	84 2b       	or	r24, r20
     df6:	95 2b       	or	r25, r21
     df8:	a6 2b       	or	r26, r22
     dfa:	b7 2b       	or	r27, r23
     dfc:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     e00:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     e04:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     e08:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     e0c:	b0 9b       	sbis	0x16, 0	; 22
     e0e:	1b c0       	rjmp	.+54     	; 0xe46 <__vector_10+0x98>
     e10:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e14:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e18:	c9 01       	movw	r24, r18
     e1a:	01 96       	adiw	r24, 0x01	; 1
     e1c:	09 2e       	mov	r0, r25
     e1e:	00 0c       	add	r0, r0
     e20:	aa 0b       	sbc	r26, r26
     e22:	bb 0b       	sbc	r27, r27
     e24:	dc 01       	movw	r26, r24
     e26:	99 27       	eor	r25, r25
     e28:	88 27       	eor	r24, r24
     e2a:	60 e0       	ldi	r22, 0x00	; 0
     e2c:	70 e0       	ldi	r23, 0x00	; 0
     e2e:	84 2b       	or	r24, r20
     e30:	95 2b       	or	r25, r21
     e32:	a6 2b       	or	r26, r22
     e34:	b7 2b       	or	r27, r23
     e36:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     e3a:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     e3e:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     e42:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     e46:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <mtable+0xa>
     e4a:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <mtable+0xb>
     e4e:	30 97       	sbiw	r30, 0x00	; 0
     e50:	39 f0       	breq	.+14     	; 0xe60 <__vector_10+0xb2>
     e52:	65 e0       	ldi	r22, 0x05	; 5
     e54:	70 e0       	ldi	r23, 0x00	; 0
     e56:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <otable+0xa>
     e5a:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <otable+0xb>
     e5e:	09 95       	icall
     e60:	0e 94 80 04 	call	0x900	; 0x900 <schedule>
     e64:	ff 91       	pop	r31
     e66:	ef 91       	pop	r30
     e68:	bf 91       	pop	r27
     e6a:	af 91       	pop	r26
     e6c:	9f 91       	pop	r25
     e6e:	8f 91       	pop	r24
     e70:	7f 91       	pop	r23
     e72:	6f 91       	pop	r22
     e74:	5f 91       	pop	r21
     e76:	4f 91       	pop	r20
     e78:	3f 91       	pop	r19
     e7a:	2f 91       	pop	r18
     e7c:	0f 90       	pop	r0
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	0f 90       	pop	r0
     e82:	1f 90       	pop	r1
     e84:	18 95       	reti

00000e86 <__vector_11>:
     e86:	1f 92       	push	r1
     e88:	0f 92       	push	r0
     e8a:	0f b6       	in	r0, 0x3f	; 63
     e8c:	0f 92       	push	r0
     e8e:	11 24       	eor	r1, r1
     e90:	2f 93       	push	r18
     e92:	3f 93       	push	r19
     e94:	4f 93       	push	r20
     e96:	5f 93       	push	r21
     e98:	6f 93       	push	r22
     e9a:	7f 93       	push	r23
     e9c:	8f 93       	push	r24
     e9e:	9f 93       	push	r25
     ea0:	af 93       	push	r26
     ea2:	bf 93       	push	r27
     ea4:	ef 93       	push	r30
     ea6:	ff 93       	push	r31
     ea8:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
     eac:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
     eb0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     eb4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     eb8:	c9 01       	movw	r24, r18
     eba:	03 2e       	mov	r0, r19
     ebc:	00 0c       	add	r0, r0
     ebe:	aa 0b       	sbc	r26, r26
     ec0:	bb 0b       	sbc	r27, r27
     ec2:	dc 01       	movw	r26, r24
     ec4:	99 27       	eor	r25, r25
     ec6:	88 27       	eor	r24, r24
     ec8:	60 e0       	ldi	r22, 0x00	; 0
     eca:	70 e0       	ldi	r23, 0x00	; 0
     ecc:	84 2b       	or	r24, r20
     ece:	95 2b       	or	r25, r21
     ed0:	a6 2b       	or	r26, r22
     ed2:	b7 2b       	or	r27, r23
     ed4:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     ed8:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     edc:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     ee0:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     ee4:	b0 9b       	sbis	0x16, 0	; 22
     ee6:	1b c0       	rjmp	.+54     	; 0xf1e <__vector_11+0x98>
     ee8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     eec:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ef0:	c9 01       	movw	r24, r18
     ef2:	01 96       	adiw	r24, 0x01	; 1
     ef4:	09 2e       	mov	r0, r25
     ef6:	00 0c       	add	r0, r0
     ef8:	aa 0b       	sbc	r26, r26
     efa:	bb 0b       	sbc	r27, r27
     efc:	dc 01       	movw	r26, r24
     efe:	99 27       	eor	r25, r25
     f00:	88 27       	eor	r24, r24
     f02:	60 e0       	ldi	r22, 0x00	; 0
     f04:	70 e0       	ldi	r23, 0x00	; 0
     f06:	84 2b       	or	r24, r20
     f08:	95 2b       	or	r25, r21
     f0a:	a6 2b       	or	r26, r22
     f0c:	b7 2b       	or	r27, r23
     f0e:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     f12:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     f16:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     f1a:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     f1e:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <mtable+0xc>
     f22:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <mtable+0xd>
     f26:	30 97       	sbiw	r30, 0x00	; 0
     f28:	39 f0       	breq	.+14     	; 0xf38 <__vector_11+0xb2>
     f2a:	66 e0       	ldi	r22, 0x06	; 6
     f2c:	70 e0       	ldi	r23, 0x00	; 0
     f2e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <otable+0xc>
     f32:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <otable+0xd>
     f36:	09 95       	icall
     f38:	0e 94 80 04 	call	0x900	; 0x900 <schedule>
     f3c:	ff 91       	pop	r31
     f3e:	ef 91       	pop	r30
     f40:	bf 91       	pop	r27
     f42:	af 91       	pop	r26
     f44:	9f 91       	pop	r25
     f46:	8f 91       	pop	r24
     f48:	7f 91       	pop	r23
     f4a:	6f 91       	pop	r22
     f4c:	5f 91       	pop	r21
     f4e:	4f 91       	pop	r20
     f50:	3f 91       	pop	r19
     f52:	2f 91       	pop	r18
     f54:	0f 90       	pop	r0
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	0f 90       	pop	r0
     f5a:	1f 90       	pop	r1
     f5c:	18 95       	reti

00000f5e <__vector_12>:
     f5e:	1f 92       	push	r1
     f60:	0f 92       	push	r0
     f62:	0f b6       	in	r0, 0x3f	; 63
     f64:	0f 92       	push	r0
     f66:	11 24       	eor	r1, r1
     f68:	2f 93       	push	r18
     f6a:	3f 93       	push	r19
     f6c:	4f 93       	push	r20
     f6e:	5f 93       	push	r21
     f70:	6f 93       	push	r22
     f72:	7f 93       	push	r23
     f74:	8f 93       	push	r24
     f76:	9f 93       	push	r25
     f78:	af 93       	push	r26
     f7a:	bf 93       	push	r27
     f7c:	ef 93       	push	r30
     f7e:	ff 93       	push	r31
     f80:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
     f84:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
     f88:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f8c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f90:	c9 01       	movw	r24, r18
     f92:	03 2e       	mov	r0, r19
     f94:	00 0c       	add	r0, r0
     f96:	aa 0b       	sbc	r26, r26
     f98:	bb 0b       	sbc	r27, r27
     f9a:	dc 01       	movw	r26, r24
     f9c:	99 27       	eor	r25, r25
     f9e:	88 27       	eor	r24, r24
     fa0:	60 e0       	ldi	r22, 0x00	; 0
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	84 2b       	or	r24, r20
     fa6:	95 2b       	or	r25, r21
     fa8:	a6 2b       	or	r26, r22
     faa:	b7 2b       	or	r27, r23
     fac:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     fb0:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     fb4:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     fb8:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     fbc:	b0 9b       	sbis	0x16, 0	; 22
     fbe:	1b c0       	rjmp	.+54     	; 0xff6 <__vector_12+0x98>
     fc0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     fc4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     fc8:	c9 01       	movw	r24, r18
     fca:	01 96       	adiw	r24, 0x01	; 1
     fcc:	09 2e       	mov	r0, r25
     fce:	00 0c       	add	r0, r0
     fd0:	aa 0b       	sbc	r26, r26
     fd2:	bb 0b       	sbc	r27, r27
     fd4:	dc 01       	movw	r26, r24
     fd6:	99 27       	eor	r25, r25
     fd8:	88 27       	eor	r24, r24
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	84 2b       	or	r24, r20
     fe0:	95 2b       	or	r25, r21
     fe2:	a6 2b       	or	r26, r22
     fe4:	b7 2b       	or	r27, r23
     fe6:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     fea:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     fee:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     ff2:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     ff6:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <mtable+0xe>
     ffa:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <mtable+0xf>
     ffe:	30 97       	sbiw	r30, 0x00	; 0
    1000:	39 f0       	breq	.+14     	; 0x1010 <__vector_12+0xb2>
    1002:	67 e0       	ldi	r22, 0x07	; 7
    1004:	70 e0       	ldi	r23, 0x00	; 0
    1006:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <otable+0xe>
    100a:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <otable+0xf>
    100e:	09 95       	icall
    1010:	0e 94 80 04 	call	0x900	; 0x900 <schedule>
    1014:	ff 91       	pop	r31
    1016:	ef 91       	pop	r30
    1018:	bf 91       	pop	r27
    101a:	af 91       	pop	r26
    101c:	9f 91       	pop	r25
    101e:	8f 91       	pop	r24
    1020:	7f 91       	pop	r23
    1022:	6f 91       	pop	r22
    1024:	5f 91       	pop	r21
    1026:	4f 91       	pop	r20
    1028:	3f 91       	pop	r19
    102a:	2f 91       	pop	r18
    102c:	0f 90       	pop	r0
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	0f 90       	pop	r0
    1032:	1f 90       	pop	r1
    1034:	18 95       	reti

00001036 <__vector_13>:
    1036:	1f 92       	push	r1
    1038:	0f 92       	push	r0
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	0f 92       	push	r0
    103e:	11 24       	eor	r1, r1
    1040:	2f 93       	push	r18
    1042:	3f 93       	push	r19
    1044:	4f 93       	push	r20
    1046:	5f 93       	push	r21
    1048:	6f 93       	push	r22
    104a:	7f 93       	push	r23
    104c:	8f 93       	push	r24
    104e:	9f 93       	push	r25
    1050:	af 93       	push	r26
    1052:	bf 93       	push	r27
    1054:	ef 93       	push	r30
    1056:	ff 93       	push	r31
    1058:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
    105c:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
    1060:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1064:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1068:	c9 01       	movw	r24, r18
    106a:	03 2e       	mov	r0, r19
    106c:	00 0c       	add	r0, r0
    106e:	aa 0b       	sbc	r26, r26
    1070:	bb 0b       	sbc	r27, r27
    1072:	dc 01       	movw	r26, r24
    1074:	99 27       	eor	r25, r25
    1076:	88 27       	eor	r24, r24
    1078:	60 e0       	ldi	r22, 0x00	; 0
    107a:	70 e0       	ldi	r23, 0x00	; 0
    107c:	84 2b       	or	r24, r20
    107e:	95 2b       	or	r25, r21
    1080:	a6 2b       	or	r26, r22
    1082:	b7 2b       	or	r27, r23
    1084:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    1088:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    108c:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    1090:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    1094:	b0 9b       	sbis	0x16, 0	; 22
    1096:	1b c0       	rjmp	.+54     	; 0x10ce <__vector_13+0x98>
    1098:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    109c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10a0:	c9 01       	movw	r24, r18
    10a2:	01 96       	adiw	r24, 0x01	; 1
    10a4:	09 2e       	mov	r0, r25
    10a6:	00 0c       	add	r0, r0
    10a8:	aa 0b       	sbc	r26, r26
    10aa:	bb 0b       	sbc	r27, r27
    10ac:	dc 01       	movw	r26, r24
    10ae:	99 27       	eor	r25, r25
    10b0:	88 27       	eor	r24, r24
    10b2:	60 e0       	ldi	r22, 0x00	; 0
    10b4:	70 e0       	ldi	r23, 0x00	; 0
    10b6:	84 2b       	or	r24, r20
    10b8:	95 2b       	or	r25, r21
    10ba:	a6 2b       	or	r26, r22
    10bc:	b7 2b       	or	r27, r23
    10be:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    10c2:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    10c6:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    10ca:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    10ce:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <mtable+0x10>
    10d2:	f0 91 e9 01 	lds	r31, 0x01E9	; 0x8001e9 <mtable+0x11>
    10d6:	30 97       	sbiw	r30, 0x00	; 0
    10d8:	39 f0       	breq	.+14     	; 0x10e8 <__vector_13+0xb2>
    10da:	68 e0       	ldi	r22, 0x08	; 8
    10dc:	70 e0       	ldi	r23, 0x00	; 0
    10de:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <otable+0x10>
    10e2:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <otable+0x11>
    10e6:	09 95       	icall
    10e8:	0e 94 80 04 	call	0x900	; 0x900 <schedule>
    10ec:	ff 91       	pop	r31
    10ee:	ef 91       	pop	r30
    10f0:	bf 91       	pop	r27
    10f2:	af 91       	pop	r26
    10f4:	9f 91       	pop	r25
    10f6:	8f 91       	pop	r24
    10f8:	7f 91       	pop	r23
    10fa:	6f 91       	pop	r22
    10fc:	5f 91       	pop	r21
    10fe:	4f 91       	pop	r20
    1100:	3f 91       	pop	r19
    1102:	2f 91       	pop	r18
    1104:	0f 90       	pop	r0
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	0f 90       	pop	r0
    110a:	1f 90       	pop	r1
    110c:	18 95       	reti

0000110e <__vector_14>:
    110e:	1f 92       	push	r1
    1110:	0f 92       	push	r0
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	0f 92       	push	r0
    1116:	11 24       	eor	r1, r1
    1118:	2f 93       	push	r18
    111a:	3f 93       	push	r19
    111c:	4f 93       	push	r20
    111e:	5f 93       	push	r21
    1120:	6f 93       	push	r22
    1122:	7f 93       	push	r23
    1124:	8f 93       	push	r24
    1126:	9f 93       	push	r25
    1128:	af 93       	push	r26
    112a:	bf 93       	push	r27
    112c:	ef 93       	push	r30
    112e:	ff 93       	push	r31
    1130:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
    1134:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
    1138:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    113c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1140:	c9 01       	movw	r24, r18
    1142:	03 2e       	mov	r0, r19
    1144:	00 0c       	add	r0, r0
    1146:	aa 0b       	sbc	r26, r26
    1148:	bb 0b       	sbc	r27, r27
    114a:	dc 01       	movw	r26, r24
    114c:	99 27       	eor	r25, r25
    114e:	88 27       	eor	r24, r24
    1150:	60 e0       	ldi	r22, 0x00	; 0
    1152:	70 e0       	ldi	r23, 0x00	; 0
    1154:	84 2b       	or	r24, r20
    1156:	95 2b       	or	r25, r21
    1158:	a6 2b       	or	r26, r22
    115a:	b7 2b       	or	r27, r23
    115c:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    1160:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    1164:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    1168:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    116c:	b0 9b       	sbis	0x16, 0	; 22
    116e:	1b c0       	rjmp	.+54     	; 0x11a6 <__vector_14+0x98>
    1170:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1174:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1178:	c9 01       	movw	r24, r18
    117a:	01 96       	adiw	r24, 0x01	; 1
    117c:	09 2e       	mov	r0, r25
    117e:	00 0c       	add	r0, r0
    1180:	aa 0b       	sbc	r26, r26
    1182:	bb 0b       	sbc	r27, r27
    1184:	dc 01       	movw	r26, r24
    1186:	99 27       	eor	r25, r25
    1188:	88 27       	eor	r24, r24
    118a:	60 e0       	ldi	r22, 0x00	; 0
    118c:	70 e0       	ldi	r23, 0x00	; 0
    118e:	84 2b       	or	r24, r20
    1190:	95 2b       	or	r25, r21
    1192:	a6 2b       	or	r26, r22
    1194:	b7 2b       	or	r27, r23
    1196:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    119a:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    119e:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    11a2:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    11a6:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <mtable+0x12>
    11aa:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <mtable+0x13>
    11ae:	30 97       	sbiw	r30, 0x00	; 0
    11b0:	39 f0       	breq	.+14     	; 0x11c0 <__vector_14+0xb2>
    11b2:	69 e0       	ldi	r22, 0x09	; 9
    11b4:	70 e0       	ldi	r23, 0x00	; 0
    11b6:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <otable+0x12>
    11ba:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <otable+0x13>
    11be:	09 95       	icall
    11c0:	0e 94 80 04 	call	0x900	; 0x900 <schedule>
    11c4:	ff 91       	pop	r31
    11c6:	ef 91       	pop	r30
    11c8:	bf 91       	pop	r27
    11ca:	af 91       	pop	r26
    11cc:	9f 91       	pop	r25
    11ce:	8f 91       	pop	r24
    11d0:	7f 91       	pop	r23
    11d2:	6f 91       	pop	r22
    11d4:	5f 91       	pop	r21
    11d6:	4f 91       	pop	r20
    11d8:	3f 91       	pop	r19
    11da:	2f 91       	pop	r18
    11dc:	0f 90       	pop	r0
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	0f 90       	pop	r0
    11e2:	1f 90       	pop	r1
    11e4:	18 95       	reti

000011e6 <__vector_15>:
    11e6:	1f 92       	push	r1
    11e8:	0f 92       	push	r0
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	0f 92       	push	r0
    11ee:	11 24       	eor	r1, r1
    11f0:	2f 93       	push	r18
    11f2:	3f 93       	push	r19
    11f4:	4f 93       	push	r20
    11f6:	5f 93       	push	r21
    11f8:	6f 93       	push	r22
    11fa:	7f 93       	push	r23
    11fc:	8f 93       	push	r24
    11fe:	9f 93       	push	r25
    1200:	af 93       	push	r26
    1202:	bf 93       	push	r27
    1204:	ef 93       	push	r30
    1206:	ff 93       	push	r31
    1208:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
    120c:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
    1210:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1214:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1218:	c9 01       	movw	r24, r18
    121a:	03 2e       	mov	r0, r19
    121c:	00 0c       	add	r0, r0
    121e:	aa 0b       	sbc	r26, r26
    1220:	bb 0b       	sbc	r27, r27
    1222:	dc 01       	movw	r26, r24
    1224:	99 27       	eor	r25, r25
    1226:	88 27       	eor	r24, r24
    1228:	60 e0       	ldi	r22, 0x00	; 0
    122a:	70 e0       	ldi	r23, 0x00	; 0
    122c:	84 2b       	or	r24, r20
    122e:	95 2b       	or	r25, r21
    1230:	a6 2b       	or	r26, r22
    1232:	b7 2b       	or	r27, r23
    1234:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    1238:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    123c:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    1240:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    1244:	b0 9b       	sbis	0x16, 0	; 22
    1246:	1b c0       	rjmp	.+54     	; 0x127e <__vector_15+0x98>
    1248:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    124c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1250:	c9 01       	movw	r24, r18
    1252:	01 96       	adiw	r24, 0x01	; 1
    1254:	09 2e       	mov	r0, r25
    1256:	00 0c       	add	r0, r0
    1258:	aa 0b       	sbc	r26, r26
    125a:	bb 0b       	sbc	r27, r27
    125c:	dc 01       	movw	r26, r24
    125e:	99 27       	eor	r25, r25
    1260:	88 27       	eor	r24, r24
    1262:	60 e0       	ldi	r22, 0x00	; 0
    1264:	70 e0       	ldi	r23, 0x00	; 0
    1266:	84 2b       	or	r24, r20
    1268:	95 2b       	or	r25, r21
    126a:	a6 2b       	or	r26, r22
    126c:	b7 2b       	or	r27, r23
    126e:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    1272:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    1276:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    127a:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    127e:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <mtable+0x14>
    1282:	f0 91 ed 01 	lds	r31, 0x01ED	; 0x8001ed <mtable+0x15>
    1286:	30 97       	sbiw	r30, 0x00	; 0
    1288:	39 f0       	breq	.+14     	; 0x1298 <__vector_15+0xb2>
    128a:	6a e0       	ldi	r22, 0x0A	; 10
    128c:	70 e0       	ldi	r23, 0x00	; 0
    128e:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <otable+0x14>
    1292:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <otable+0x15>
    1296:	09 95       	icall
    1298:	0e 94 80 04 	call	0x900	; 0x900 <schedule>
    129c:	ff 91       	pop	r31
    129e:	ef 91       	pop	r30
    12a0:	bf 91       	pop	r27
    12a2:	af 91       	pop	r26
    12a4:	9f 91       	pop	r25
    12a6:	8f 91       	pop	r24
    12a8:	7f 91       	pop	r23
    12aa:	6f 91       	pop	r22
    12ac:	5f 91       	pop	r21
    12ae:	4f 91       	pop	r20
    12b0:	3f 91       	pop	r19
    12b2:	2f 91       	pop	r18
    12b4:	0f 90       	pop	r0
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	0f 90       	pop	r0
    12ba:	1f 90       	pop	r1
    12bc:	18 95       	reti

000012be <__vector_16>:
    12be:	1f 92       	push	r1
    12c0:	0f 92       	push	r0
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	0f 92       	push	r0
    12c6:	11 24       	eor	r1, r1
    12c8:	2f 93       	push	r18
    12ca:	3f 93       	push	r19
    12cc:	4f 93       	push	r20
    12ce:	5f 93       	push	r21
    12d0:	6f 93       	push	r22
    12d2:	7f 93       	push	r23
    12d4:	8f 93       	push	r24
    12d6:	9f 93       	push	r25
    12d8:	af 93       	push	r26
    12da:	bf 93       	push	r27
    12dc:	ef 93       	push	r30
    12de:	ff 93       	push	r31
    12e0:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
    12e4:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
    12e8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12ec:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12f0:	c9 01       	movw	r24, r18
    12f2:	03 2e       	mov	r0, r19
    12f4:	00 0c       	add	r0, r0
    12f6:	aa 0b       	sbc	r26, r26
    12f8:	bb 0b       	sbc	r27, r27
    12fa:	dc 01       	movw	r26, r24
    12fc:	99 27       	eor	r25, r25
    12fe:	88 27       	eor	r24, r24
    1300:	60 e0       	ldi	r22, 0x00	; 0
    1302:	70 e0       	ldi	r23, 0x00	; 0
    1304:	84 2b       	or	r24, r20
    1306:	95 2b       	or	r25, r21
    1308:	a6 2b       	or	r26, r22
    130a:	b7 2b       	or	r27, r23
    130c:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    1310:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    1314:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    1318:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    131c:	b0 9b       	sbis	0x16, 0	; 22
    131e:	1b c0       	rjmp	.+54     	; 0x1356 <__vector_16+0x98>
    1320:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1324:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1328:	c9 01       	movw	r24, r18
    132a:	01 96       	adiw	r24, 0x01	; 1
    132c:	09 2e       	mov	r0, r25
    132e:	00 0c       	add	r0, r0
    1330:	aa 0b       	sbc	r26, r26
    1332:	bb 0b       	sbc	r27, r27
    1334:	dc 01       	movw	r26, r24
    1336:	99 27       	eor	r25, r25
    1338:	88 27       	eor	r24, r24
    133a:	60 e0       	ldi	r22, 0x00	; 0
    133c:	70 e0       	ldi	r23, 0x00	; 0
    133e:	84 2b       	or	r24, r20
    1340:	95 2b       	or	r25, r21
    1342:	a6 2b       	or	r26, r22
    1344:	b7 2b       	or	r27, r23
    1346:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    134a:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    134e:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    1352:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    1356:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <mtable+0x16>
    135a:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <mtable+0x17>
    135e:	30 97       	sbiw	r30, 0x00	; 0
    1360:	39 f0       	breq	.+14     	; 0x1370 <__vector_16+0xb2>
    1362:	6b e0       	ldi	r22, 0x0B	; 11
    1364:	70 e0       	ldi	r23, 0x00	; 0
    1366:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <otable+0x16>
    136a:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <otable+0x17>
    136e:	09 95       	icall
    1370:	0e 94 80 04 	call	0x900	; 0x900 <schedule>
    1374:	ff 91       	pop	r31
    1376:	ef 91       	pop	r30
    1378:	bf 91       	pop	r27
    137a:	af 91       	pop	r26
    137c:	9f 91       	pop	r25
    137e:	8f 91       	pop	r24
    1380:	7f 91       	pop	r23
    1382:	6f 91       	pop	r22
    1384:	5f 91       	pop	r21
    1386:	4f 91       	pop	r20
    1388:	3f 91       	pop	r19
    138a:	2f 91       	pop	r18
    138c:	0f 90       	pop	r0
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	0f 90       	pop	r0
    1392:	1f 90       	pop	r1
    1394:	18 95       	reti

00001396 <__vector_17>:
    1396:	1f 92       	push	r1
    1398:	0f 92       	push	r0
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	0f 92       	push	r0
    139e:	11 24       	eor	r1, r1
    13a0:	2f 93       	push	r18
    13a2:	3f 93       	push	r19
    13a4:	4f 93       	push	r20
    13a6:	5f 93       	push	r21
    13a8:	6f 93       	push	r22
    13aa:	7f 93       	push	r23
    13ac:	8f 93       	push	r24
    13ae:	9f 93       	push	r25
    13b0:	af 93       	push	r26
    13b2:	bf 93       	push	r27
    13b4:	ef 93       	push	r30
    13b6:	ff 93       	push	r31
    13b8:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
    13bc:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
    13c0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13c4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13c8:	c9 01       	movw	r24, r18
    13ca:	03 2e       	mov	r0, r19
    13cc:	00 0c       	add	r0, r0
    13ce:	aa 0b       	sbc	r26, r26
    13d0:	bb 0b       	sbc	r27, r27
    13d2:	dc 01       	movw	r26, r24
    13d4:	99 27       	eor	r25, r25
    13d6:	88 27       	eor	r24, r24
    13d8:	60 e0       	ldi	r22, 0x00	; 0
    13da:	70 e0       	ldi	r23, 0x00	; 0
    13dc:	84 2b       	or	r24, r20
    13de:	95 2b       	or	r25, r21
    13e0:	a6 2b       	or	r26, r22
    13e2:	b7 2b       	or	r27, r23
    13e4:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    13e8:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    13ec:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    13f0:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    13f4:	b0 9b       	sbis	0x16, 0	; 22
    13f6:	1b c0       	rjmp	.+54     	; 0x142e <__vector_17+0x98>
    13f8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13fc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1400:	c9 01       	movw	r24, r18
    1402:	01 96       	adiw	r24, 0x01	; 1
    1404:	09 2e       	mov	r0, r25
    1406:	00 0c       	add	r0, r0
    1408:	aa 0b       	sbc	r26, r26
    140a:	bb 0b       	sbc	r27, r27
    140c:	dc 01       	movw	r26, r24
    140e:	99 27       	eor	r25, r25
    1410:	88 27       	eor	r24, r24
    1412:	60 e0       	ldi	r22, 0x00	; 0
    1414:	70 e0       	ldi	r23, 0x00	; 0
    1416:	84 2b       	or	r24, r20
    1418:	95 2b       	or	r25, r21
    141a:	a6 2b       	or	r26, r22
    141c:	b7 2b       	or	r27, r23
    141e:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    1422:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    1426:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    142a:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    142e:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <mtable+0x18>
    1432:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <mtable+0x19>
    1436:	30 97       	sbiw	r30, 0x00	; 0
    1438:	39 f0       	breq	.+14     	; 0x1448 <__vector_17+0xb2>
    143a:	6c e0       	ldi	r22, 0x0C	; 12
    143c:	70 e0       	ldi	r23, 0x00	; 0
    143e:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <otable+0x18>
    1442:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <otable+0x19>
    1446:	09 95       	icall
    1448:	0e 94 80 04 	call	0x900	; 0x900 <schedule>
    144c:	ff 91       	pop	r31
    144e:	ef 91       	pop	r30
    1450:	bf 91       	pop	r27
    1452:	af 91       	pop	r26
    1454:	9f 91       	pop	r25
    1456:	8f 91       	pop	r24
    1458:	7f 91       	pop	r23
    145a:	6f 91       	pop	r22
    145c:	5f 91       	pop	r21
    145e:	4f 91       	pop	r20
    1460:	3f 91       	pop	r19
    1462:	2f 91       	pop	r18
    1464:	0f 90       	pop	r0
    1466:	0f be       	out	0x3f, r0	; 63
    1468:	0f 90       	pop	r0
    146a:	1f 90       	pop	r1
    146c:	18 95       	reti

0000146e <__vector_18>:
    146e:	1f 92       	push	r1
    1470:	0f 92       	push	r0
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	0f 92       	push	r0
    1476:	11 24       	eor	r1, r1
    1478:	2f 93       	push	r18
    147a:	3f 93       	push	r19
    147c:	4f 93       	push	r20
    147e:	5f 93       	push	r21
    1480:	6f 93       	push	r22
    1482:	7f 93       	push	r23
    1484:	8f 93       	push	r24
    1486:	9f 93       	push	r25
    1488:	af 93       	push	r26
    148a:	bf 93       	push	r27
    148c:	ef 93       	push	r30
    148e:	ff 93       	push	r31
    1490:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
    1494:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
    1498:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    149c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14a0:	c9 01       	movw	r24, r18
    14a2:	03 2e       	mov	r0, r19
    14a4:	00 0c       	add	r0, r0
    14a6:	aa 0b       	sbc	r26, r26
    14a8:	bb 0b       	sbc	r27, r27
    14aa:	dc 01       	movw	r26, r24
    14ac:	99 27       	eor	r25, r25
    14ae:	88 27       	eor	r24, r24
    14b0:	60 e0       	ldi	r22, 0x00	; 0
    14b2:	70 e0       	ldi	r23, 0x00	; 0
    14b4:	84 2b       	or	r24, r20
    14b6:	95 2b       	or	r25, r21
    14b8:	a6 2b       	or	r26, r22
    14ba:	b7 2b       	or	r27, r23
    14bc:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    14c0:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    14c4:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    14c8:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    14cc:	b0 9b       	sbis	0x16, 0	; 22
    14ce:	1b c0       	rjmp	.+54     	; 0x1506 <__vector_18+0x98>
    14d0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14d4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14d8:	c9 01       	movw	r24, r18
    14da:	01 96       	adiw	r24, 0x01	; 1
    14dc:	09 2e       	mov	r0, r25
    14de:	00 0c       	add	r0, r0
    14e0:	aa 0b       	sbc	r26, r26
    14e2:	bb 0b       	sbc	r27, r27
    14e4:	dc 01       	movw	r26, r24
    14e6:	99 27       	eor	r25, r25
    14e8:	88 27       	eor	r24, r24
    14ea:	60 e0       	ldi	r22, 0x00	; 0
    14ec:	70 e0       	ldi	r23, 0x00	; 0
    14ee:	84 2b       	or	r24, r20
    14f0:	95 2b       	or	r25, r21
    14f2:	a6 2b       	or	r26, r22
    14f4:	b7 2b       	or	r27, r23
    14f6:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    14fa:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    14fe:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    1502:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    1506:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <mtable+0x1a>
    150a:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <mtable+0x1b>
    150e:	30 97       	sbiw	r30, 0x00	; 0
    1510:	39 f0       	breq	.+14     	; 0x1520 <__vector_18+0xb2>
    1512:	6d e0       	ldi	r22, 0x0D	; 13
    1514:	70 e0       	ldi	r23, 0x00	; 0
    1516:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <otable+0x1a>
    151a:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <otable+0x1b>
    151e:	09 95       	icall
    1520:	0e 94 80 04 	call	0x900	; 0x900 <schedule>
    1524:	ff 91       	pop	r31
    1526:	ef 91       	pop	r30
    1528:	bf 91       	pop	r27
    152a:	af 91       	pop	r26
    152c:	9f 91       	pop	r25
    152e:	8f 91       	pop	r24
    1530:	7f 91       	pop	r23
    1532:	6f 91       	pop	r22
    1534:	5f 91       	pop	r21
    1536:	4f 91       	pop	r20
    1538:	3f 91       	pop	r19
    153a:	2f 91       	pop	r18
    153c:	0f 90       	pop	r0
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	0f 90       	pop	r0
    1542:	1f 90       	pop	r1
    1544:	18 95       	reti

00001546 <__vector_19>:
    1546:	1f 92       	push	r1
    1548:	0f 92       	push	r0
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	0f 92       	push	r0
    154e:	11 24       	eor	r1, r1
    1550:	2f 93       	push	r18
    1552:	3f 93       	push	r19
    1554:	4f 93       	push	r20
    1556:	5f 93       	push	r21
    1558:	6f 93       	push	r22
    155a:	7f 93       	push	r23
    155c:	8f 93       	push	r24
    155e:	9f 93       	push	r25
    1560:	af 93       	push	r26
    1562:	bf 93       	push	r27
    1564:	ef 93       	push	r30
    1566:	ff 93       	push	r31
    1568:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
    156c:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
    1570:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1574:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1578:	c9 01       	movw	r24, r18
    157a:	03 2e       	mov	r0, r19
    157c:	00 0c       	add	r0, r0
    157e:	aa 0b       	sbc	r26, r26
    1580:	bb 0b       	sbc	r27, r27
    1582:	dc 01       	movw	r26, r24
    1584:	99 27       	eor	r25, r25
    1586:	88 27       	eor	r24, r24
    1588:	60 e0       	ldi	r22, 0x00	; 0
    158a:	70 e0       	ldi	r23, 0x00	; 0
    158c:	84 2b       	or	r24, r20
    158e:	95 2b       	or	r25, r21
    1590:	a6 2b       	or	r26, r22
    1592:	b7 2b       	or	r27, r23
    1594:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    1598:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    159c:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    15a0:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    15a4:	b0 9b       	sbis	0x16, 0	; 22
    15a6:	1b c0       	rjmp	.+54     	; 0x15de <__vector_19+0x98>
    15a8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    15ac:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15b0:	c9 01       	movw	r24, r18
    15b2:	01 96       	adiw	r24, 0x01	; 1
    15b4:	09 2e       	mov	r0, r25
    15b6:	00 0c       	add	r0, r0
    15b8:	aa 0b       	sbc	r26, r26
    15ba:	bb 0b       	sbc	r27, r27
    15bc:	dc 01       	movw	r26, r24
    15be:	99 27       	eor	r25, r25
    15c0:	88 27       	eor	r24, r24
    15c2:	60 e0       	ldi	r22, 0x00	; 0
    15c4:	70 e0       	ldi	r23, 0x00	; 0
    15c6:	84 2b       	or	r24, r20
    15c8:	95 2b       	or	r25, r21
    15ca:	a6 2b       	or	r26, r22
    15cc:	b7 2b       	or	r27, r23
    15ce:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    15d2:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    15d6:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    15da:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    15de:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <mtable+0x1c>
    15e2:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <mtable+0x1d>
    15e6:	30 97       	sbiw	r30, 0x00	; 0
    15e8:	39 f0       	breq	.+14     	; 0x15f8 <__vector_19+0xb2>
    15ea:	6e e0       	ldi	r22, 0x0E	; 14
    15ec:	70 e0       	ldi	r23, 0x00	; 0
    15ee:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <otable+0x1c>
    15f2:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <otable+0x1d>
    15f6:	09 95       	icall
    15f8:	0e 94 80 04 	call	0x900	; 0x900 <schedule>
    15fc:	ff 91       	pop	r31
    15fe:	ef 91       	pop	r30
    1600:	bf 91       	pop	r27
    1602:	af 91       	pop	r26
    1604:	9f 91       	pop	r25
    1606:	8f 91       	pop	r24
    1608:	7f 91       	pop	r23
    160a:	6f 91       	pop	r22
    160c:	5f 91       	pop	r21
    160e:	4f 91       	pop	r20
    1610:	3f 91       	pop	r19
    1612:	2f 91       	pop	r18
    1614:	0f 90       	pop	r0
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	0f 90       	pop	r0
    161a:	1f 90       	pop	r1
    161c:	18 95       	reti

0000161e <__vector_20>:
    161e:	1f 92       	push	r1
    1620:	0f 92       	push	r0
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	0f 92       	push	r0
    1626:	11 24       	eor	r1, r1
    1628:	2f 93       	push	r18
    162a:	3f 93       	push	r19
    162c:	4f 93       	push	r20
    162e:	5f 93       	push	r21
    1630:	6f 93       	push	r22
    1632:	7f 93       	push	r23
    1634:	8f 93       	push	r24
    1636:	9f 93       	push	r25
    1638:	af 93       	push	r26
    163a:	bf 93       	push	r27
    163c:	ef 93       	push	r30
    163e:	ff 93       	push	r31
    1640:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
    1644:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
    1648:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    164c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1650:	c9 01       	movw	r24, r18
    1652:	03 2e       	mov	r0, r19
    1654:	00 0c       	add	r0, r0
    1656:	aa 0b       	sbc	r26, r26
    1658:	bb 0b       	sbc	r27, r27
    165a:	dc 01       	movw	r26, r24
    165c:	99 27       	eor	r25, r25
    165e:	88 27       	eor	r24, r24
    1660:	60 e0       	ldi	r22, 0x00	; 0
    1662:	70 e0       	ldi	r23, 0x00	; 0
    1664:	84 2b       	or	r24, r20
    1666:	95 2b       	or	r25, r21
    1668:	a6 2b       	or	r26, r22
    166a:	b7 2b       	or	r27, r23
    166c:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    1670:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    1674:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    1678:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    167c:	b0 9b       	sbis	0x16, 0	; 22
    167e:	1b c0       	rjmp	.+54     	; 0x16b6 <__vector_20+0x98>
    1680:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1684:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1688:	c9 01       	movw	r24, r18
    168a:	01 96       	adiw	r24, 0x01	; 1
    168c:	09 2e       	mov	r0, r25
    168e:	00 0c       	add	r0, r0
    1690:	aa 0b       	sbc	r26, r26
    1692:	bb 0b       	sbc	r27, r27
    1694:	dc 01       	movw	r26, r24
    1696:	99 27       	eor	r25, r25
    1698:	88 27       	eor	r24, r24
    169a:	60 e0       	ldi	r22, 0x00	; 0
    169c:	70 e0       	ldi	r23, 0x00	; 0
    169e:	84 2b       	or	r24, r20
    16a0:	95 2b       	or	r25, r21
    16a2:	a6 2b       	or	r26, r22
    16a4:	b7 2b       	or	r27, r23
    16a6:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    16aa:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    16ae:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    16b2:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    16b6:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <mtable+0x1e>
    16ba:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <mtable+0x1f>
    16be:	30 97       	sbiw	r30, 0x00	; 0
    16c0:	39 f0       	breq	.+14     	; 0x16d0 <__vector_20+0xb2>
    16c2:	6f e0       	ldi	r22, 0x0F	; 15
    16c4:	70 e0       	ldi	r23, 0x00	; 0
    16c6:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <otable+0x1e>
    16ca:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <otable+0x1f>
    16ce:	09 95       	icall
    16d0:	0e 94 80 04 	call	0x900	; 0x900 <schedule>
    16d4:	ff 91       	pop	r31
    16d6:	ef 91       	pop	r30
    16d8:	bf 91       	pop	r27
    16da:	af 91       	pop	r26
    16dc:	9f 91       	pop	r25
    16de:	8f 91       	pop	r24
    16e0:	7f 91       	pop	r23
    16e2:	6f 91       	pop	r22
    16e4:	5f 91       	pop	r21
    16e6:	4f 91       	pop	r20
    16e8:	3f 91       	pop	r19
    16ea:	2f 91       	pop	r18
    16ec:	0f 90       	pop	r0
    16ee:	0f be       	out	0x3f, r0	; 63
    16f0:	0f 90       	pop	r0
    16f2:	1f 90       	pop	r1
    16f4:	18 95       	reti

000016f6 <__vector_21>:
    16f6:	1f 92       	push	r1
    16f8:	0f 92       	push	r0
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	0f 92       	push	r0
    16fe:	11 24       	eor	r1, r1
    1700:	2f 93       	push	r18
    1702:	3f 93       	push	r19
    1704:	4f 93       	push	r20
    1706:	5f 93       	push	r21
    1708:	6f 93       	push	r22
    170a:	7f 93       	push	r23
    170c:	8f 93       	push	r24
    170e:	9f 93       	push	r25
    1710:	af 93       	push	r26
    1712:	bf 93       	push	r27
    1714:	ef 93       	push	r30
    1716:	ff 93       	push	r31
    1718:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
    171c:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
    1720:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1724:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1728:	c9 01       	movw	r24, r18
    172a:	03 2e       	mov	r0, r19
    172c:	00 0c       	add	r0, r0
    172e:	aa 0b       	sbc	r26, r26
    1730:	bb 0b       	sbc	r27, r27
    1732:	dc 01       	movw	r26, r24
    1734:	99 27       	eor	r25, r25
    1736:	88 27       	eor	r24, r24
    1738:	60 e0       	ldi	r22, 0x00	; 0
    173a:	70 e0       	ldi	r23, 0x00	; 0
    173c:	84 2b       	or	r24, r20
    173e:	95 2b       	or	r25, r21
    1740:	a6 2b       	or	r26, r22
    1742:	b7 2b       	or	r27, r23
    1744:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    1748:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    174c:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    1750:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    1754:	b0 9b       	sbis	0x16, 0	; 22
    1756:	1b c0       	rjmp	.+54     	; 0x178e <__vector_21+0x98>
    1758:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    175c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1760:	c9 01       	movw	r24, r18
    1762:	01 96       	adiw	r24, 0x01	; 1
    1764:	09 2e       	mov	r0, r25
    1766:	00 0c       	add	r0, r0
    1768:	aa 0b       	sbc	r26, r26
    176a:	bb 0b       	sbc	r27, r27
    176c:	dc 01       	movw	r26, r24
    176e:	99 27       	eor	r25, r25
    1770:	88 27       	eor	r24, r24
    1772:	60 e0       	ldi	r22, 0x00	; 0
    1774:	70 e0       	ldi	r23, 0x00	; 0
    1776:	84 2b       	or	r24, r20
    1778:	95 2b       	or	r25, r21
    177a:	a6 2b       	or	r26, r22
    177c:	b7 2b       	or	r27, r23
    177e:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    1782:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    1786:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    178a:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    178e:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <mtable+0x20>
    1792:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <mtable+0x21>
    1796:	30 97       	sbiw	r30, 0x00	; 0
    1798:	39 f0       	breq	.+14     	; 0x17a8 <__vector_21+0xb2>
    179a:	60 e1       	ldi	r22, 0x10	; 16
    179c:	70 e0       	ldi	r23, 0x00	; 0
    179e:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <otable+0x20>
    17a2:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <otable+0x21>
    17a6:	09 95       	icall
    17a8:	0e 94 80 04 	call	0x900	; 0x900 <schedule>
    17ac:	ff 91       	pop	r31
    17ae:	ef 91       	pop	r30
    17b0:	bf 91       	pop	r27
    17b2:	af 91       	pop	r26
    17b4:	9f 91       	pop	r25
    17b6:	8f 91       	pop	r24
    17b8:	7f 91       	pop	r23
    17ba:	6f 91       	pop	r22
    17bc:	5f 91       	pop	r21
    17be:	4f 91       	pop	r20
    17c0:	3f 91       	pop	r19
    17c2:	2f 91       	pop	r18
    17c4:	0f 90       	pop	r0
    17c6:	0f be       	out	0x3f, r0	; 63
    17c8:	0f 90       	pop	r0
    17ca:	1f 90       	pop	r1
    17cc:	18 95       	reti

000017ce <__vector_22>:
    17ce:	1f 92       	push	r1
    17d0:	0f 92       	push	r0
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	0f 92       	push	r0
    17d6:	11 24       	eor	r1, r1
    17d8:	2f 93       	push	r18
    17da:	3f 93       	push	r19
    17dc:	4f 93       	push	r20
    17de:	5f 93       	push	r21
    17e0:	6f 93       	push	r22
    17e2:	7f 93       	push	r23
    17e4:	8f 93       	push	r24
    17e6:	9f 93       	push	r25
    17e8:	af 93       	push	r26
    17ea:	bf 93       	push	r27
    17ec:	ef 93       	push	r30
    17ee:	ff 93       	push	r31
    17f0:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
    17f4:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
    17f8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17fc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1800:	c9 01       	movw	r24, r18
    1802:	03 2e       	mov	r0, r19
    1804:	00 0c       	add	r0, r0
    1806:	aa 0b       	sbc	r26, r26
    1808:	bb 0b       	sbc	r27, r27
    180a:	dc 01       	movw	r26, r24
    180c:	99 27       	eor	r25, r25
    180e:	88 27       	eor	r24, r24
    1810:	60 e0       	ldi	r22, 0x00	; 0
    1812:	70 e0       	ldi	r23, 0x00	; 0
    1814:	84 2b       	or	r24, r20
    1816:	95 2b       	or	r25, r21
    1818:	a6 2b       	or	r26, r22
    181a:	b7 2b       	or	r27, r23
    181c:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    1820:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    1824:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    1828:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    182c:	b0 9b       	sbis	0x16, 0	; 22
    182e:	1b c0       	rjmp	.+54     	; 0x1866 <__vector_22+0x98>
    1830:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1834:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1838:	c9 01       	movw	r24, r18
    183a:	01 96       	adiw	r24, 0x01	; 1
    183c:	09 2e       	mov	r0, r25
    183e:	00 0c       	add	r0, r0
    1840:	aa 0b       	sbc	r26, r26
    1842:	bb 0b       	sbc	r27, r27
    1844:	dc 01       	movw	r26, r24
    1846:	99 27       	eor	r25, r25
    1848:	88 27       	eor	r24, r24
    184a:	60 e0       	ldi	r22, 0x00	; 0
    184c:	70 e0       	ldi	r23, 0x00	; 0
    184e:	84 2b       	or	r24, r20
    1850:	95 2b       	or	r25, r21
    1852:	a6 2b       	or	r26, r22
    1854:	b7 2b       	or	r27, r23
    1856:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    185a:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    185e:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    1862:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    1866:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <mtable+0x22>
    186a:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <mtable+0x23>
    186e:	30 97       	sbiw	r30, 0x00	; 0
    1870:	39 f0       	breq	.+14     	; 0x1880 <__vector_22+0xb2>
    1872:	61 e1       	ldi	r22, 0x11	; 17
    1874:	70 e0       	ldi	r23, 0x00	; 0
    1876:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <otable+0x22>
    187a:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <otable+0x23>
    187e:	09 95       	icall
    1880:	0e 94 80 04 	call	0x900	; 0x900 <schedule>
    1884:	ff 91       	pop	r31
    1886:	ef 91       	pop	r30
    1888:	bf 91       	pop	r27
    188a:	af 91       	pop	r26
    188c:	9f 91       	pop	r25
    188e:	8f 91       	pop	r24
    1890:	7f 91       	pop	r23
    1892:	6f 91       	pop	r22
    1894:	5f 91       	pop	r21
    1896:	4f 91       	pop	r20
    1898:	3f 91       	pop	r19
    189a:	2f 91       	pop	r18
    189c:	0f 90       	pop	r0
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	0f 90       	pop	r0
    18a2:	1f 90       	pop	r1
    18a4:	18 95       	reti

000018a6 <enqueueByDeadline>:
    18a6:	ef 92       	push	r14
    18a8:	ff 92       	push	r15
    18aa:	0f 93       	push	r16
    18ac:	1f 93       	push	r17
    18ae:	cf 93       	push	r28
    18b0:	df 93       	push	r29
    18b2:	7b 01       	movw	r14, r22
    18b4:	eb 01       	movw	r28, r22
    18b6:	a8 81       	ld	r26, Y
    18b8:	b9 81       	ldd	r27, Y+1	; 0x01
    18ba:	10 97       	sbiw	r26, 0x00	; 0
    18bc:	61 f1       	breq	.+88     	; 0x1916 <enqueueByDeadline+0x70>
    18be:	fc 01       	movw	r30, r24
    18c0:	06 81       	ldd	r16, Z+6	; 0x06
    18c2:	17 81       	ldd	r17, Z+7	; 0x07
    18c4:	20 85       	ldd	r18, Z+8	; 0x08
    18c6:	31 85       	ldd	r19, Z+9	; 0x09
    18c8:	16 96       	adiw	r26, 0x06	; 6
    18ca:	4d 91       	ld	r20, X+
    18cc:	5d 91       	ld	r21, X+
    18ce:	6d 91       	ld	r22, X+
    18d0:	7c 91       	ld	r23, X
    18d2:	19 97       	sbiw	r26, 0x09	; 9
    18d4:	04 17       	cp	r16, r20
    18d6:	15 07       	cpc	r17, r21
    18d8:	26 07       	cpc	r18, r22
    18da:	37 07       	cpc	r19, r23
    18dc:	14 f4       	brge	.+4      	; 0x18e2 <enqueueByDeadline+0x3c>
    18de:	1b c0       	rjmp	.+54     	; 0x1916 <enqueueByDeadline+0x70>
    18e0:	df 01       	movw	r26, r30
    18e2:	ed 91       	ld	r30, X+
    18e4:	fc 91       	ld	r31, X
    18e6:	11 97       	sbiw	r26, 0x01	; 1
    18e8:	30 97       	sbiw	r30, 0x00	; 0
    18ea:	49 f0       	breq	.+18     	; 0x18fe <enqueueByDeadline+0x58>
    18ec:	46 81       	ldd	r20, Z+6	; 0x06
    18ee:	57 81       	ldd	r21, Z+7	; 0x07
    18f0:	60 85       	ldd	r22, Z+8	; 0x08
    18f2:	71 85       	ldd	r23, Z+9	; 0x09
    18f4:	04 17       	cp	r16, r20
    18f6:	15 07       	cpc	r17, r21
    18f8:	26 07       	cpc	r18, r22
    18fa:	37 07       	cpc	r19, r23
    18fc:	8c f7       	brge	.-30     	; 0x18e0 <enqueueByDeadline+0x3a>
    18fe:	ec 01       	movw	r28, r24
    1900:	f9 83       	std	Y+1, r31	; 0x01
    1902:	e8 83       	st	Y, r30
    1904:	10 97       	sbiw	r26, 0x00	; 0
    1906:	21 f4       	brne	.+8      	; 0x1910 <enqueueByDeadline+0x6a>
    1908:	f7 01       	movw	r30, r14
    190a:	91 83       	std	Z+1, r25	; 0x01
    190c:	80 83       	st	Z, r24
    190e:	07 c0       	rjmp	.+14     	; 0x191e <enqueueByDeadline+0x78>
    1910:	8d 93       	st	X+, r24
    1912:	9c 93       	st	X, r25
    1914:	04 c0       	rjmp	.+8      	; 0x191e <enqueueByDeadline+0x78>
    1916:	ec 01       	movw	r28, r24
    1918:	b9 83       	std	Y+1, r27	; 0x01
    191a:	a8 83       	st	Y, r26
    191c:	f5 cf       	rjmp	.-22     	; 0x1908 <enqueueByDeadline+0x62>
    191e:	df 91       	pop	r29
    1920:	cf 91       	pop	r28
    1922:	1f 91       	pop	r17
    1924:	0f 91       	pop	r16
    1926:	ff 90       	pop	r15
    1928:	ef 90       	pop	r14
    192a:	08 95       	ret

0000192c <enqueueByBaseline>:
    192c:	ef 92       	push	r14
    192e:	ff 92       	push	r15
    1930:	0f 93       	push	r16
    1932:	1f 93       	push	r17
    1934:	cf 93       	push	r28
    1936:	df 93       	push	r29
    1938:	7b 01       	movw	r14, r22
    193a:	eb 01       	movw	r28, r22
    193c:	a8 81       	ld	r26, Y
    193e:	b9 81       	ldd	r27, Y+1	; 0x01
    1940:	10 97       	sbiw	r26, 0x00	; 0
    1942:	61 f1       	breq	.+88     	; 0x199c <enqueueByBaseline+0x70>
    1944:	fc 01       	movw	r30, r24
    1946:	02 81       	ldd	r16, Z+2	; 0x02
    1948:	13 81       	ldd	r17, Z+3	; 0x03
    194a:	24 81       	ldd	r18, Z+4	; 0x04
    194c:	35 81       	ldd	r19, Z+5	; 0x05
    194e:	12 96       	adiw	r26, 0x02	; 2
    1950:	4d 91       	ld	r20, X+
    1952:	5d 91       	ld	r21, X+
    1954:	6d 91       	ld	r22, X+
    1956:	7c 91       	ld	r23, X
    1958:	15 97       	sbiw	r26, 0x05	; 5
    195a:	04 17       	cp	r16, r20
    195c:	15 07       	cpc	r17, r21
    195e:	26 07       	cpc	r18, r22
    1960:	37 07       	cpc	r19, r23
    1962:	14 f4       	brge	.+4      	; 0x1968 <enqueueByBaseline+0x3c>
    1964:	1b c0       	rjmp	.+54     	; 0x199c <enqueueByBaseline+0x70>
    1966:	df 01       	movw	r26, r30
    1968:	ed 91       	ld	r30, X+
    196a:	fc 91       	ld	r31, X
    196c:	11 97       	sbiw	r26, 0x01	; 1
    196e:	30 97       	sbiw	r30, 0x00	; 0
    1970:	49 f0       	breq	.+18     	; 0x1984 <enqueueByBaseline+0x58>
    1972:	42 81       	ldd	r20, Z+2	; 0x02
    1974:	53 81       	ldd	r21, Z+3	; 0x03
    1976:	64 81       	ldd	r22, Z+4	; 0x04
    1978:	75 81       	ldd	r23, Z+5	; 0x05
    197a:	04 17       	cp	r16, r20
    197c:	15 07       	cpc	r17, r21
    197e:	26 07       	cpc	r18, r22
    1980:	37 07       	cpc	r19, r23
    1982:	8c f7       	brge	.-30     	; 0x1966 <enqueueByBaseline+0x3a>
    1984:	ec 01       	movw	r28, r24
    1986:	f9 83       	std	Y+1, r31	; 0x01
    1988:	e8 83       	st	Y, r30
    198a:	10 97       	sbiw	r26, 0x00	; 0
    198c:	21 f4       	brne	.+8      	; 0x1996 <enqueueByBaseline+0x6a>
    198e:	f7 01       	movw	r30, r14
    1990:	91 83       	std	Z+1, r25	; 0x01
    1992:	80 83       	st	Z, r24
    1994:	07 c0       	rjmp	.+14     	; 0x19a4 <enqueueByBaseline+0x78>
    1996:	8d 93       	st	X+, r24
    1998:	9c 93       	st	X, r25
    199a:	04 c0       	rjmp	.+8      	; 0x19a4 <enqueueByBaseline+0x78>
    199c:	ec 01       	movw	r28, r24
    199e:	b9 83       	std	Y+1, r27	; 0x01
    19a0:	a8 83       	st	Y, r26
    19a2:	f5 cf       	rjmp	.-22     	; 0x198e <enqueueByBaseline+0x62>
    19a4:	df 91       	pop	r29
    19a6:	cf 91       	pop	r28
    19a8:	1f 91       	pop	r17
    19aa:	0f 91       	pop	r16
    19ac:	ff 90       	pop	r15
    19ae:	ef 90       	pop	r14
    19b0:	08 95       	ret

000019b2 <dequeue>:
    19b2:	dc 01       	movw	r26, r24
    19b4:	ed 91       	ld	r30, X+
    19b6:	fc 91       	ld	r31, X
    19b8:	11 97       	sbiw	r26, 0x01	; 1
    19ba:	30 97       	sbiw	r30, 0x00	; 0
    19bc:	59 f4       	brne	.+22     	; 0x19d4 <dequeue+0x22>
    19be:	8f ef       	ldi	r24, 0xFF	; 255
    19c0:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    19c4:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
    19c8:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	83 bf       	out	0x33, r24	; 51
    19d0:	88 95       	sleep
    19d2:	fd cf       	rjmp	.-6      	; 0x19ce <dequeue+0x1c>
    19d4:	20 81       	ld	r18, Z
    19d6:	31 81       	ldd	r19, Z+1	; 0x01
    19d8:	2d 93       	st	X+, r18
    19da:	3c 93       	st	X, r19
    19dc:	cf 01       	movw	r24, r30
    19de:	08 95       	ret

000019e0 <__vector_9>:
    19e0:	1f 92       	push	r1
    19e2:	0f 92       	push	r0
    19e4:	0f b6       	in	r0, 0x3f	; 63
    19e6:	0f 92       	push	r0
    19e8:	11 24       	eor	r1, r1
    19ea:	2f 93       	push	r18
    19ec:	3f 93       	push	r19
    19ee:	4f 93       	push	r20
    19f0:	5f 93       	push	r21
    19f2:	6f 93       	push	r22
    19f4:	7f 93       	push	r23
    19f6:	8f 93       	push	r24
    19f8:	9f 93       	push	r25
    19fa:	ef 93       	push	r30
    19fc:	ff 93       	push	r31
    19fe:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <overflows>
    1a02:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <overflows+0x1>
    1a06:	01 96       	adiw	r24, 0x01	; 1
    1a08:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <overflows+0x1>
    1a0c:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <overflows>
    1a10:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <timerQ>
    1a14:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <timerQ+0x1>
    1a18:	30 97       	sbiw	r30, 0x00	; 0
    1a1a:	01 f1       	breq	.+64     	; 0x1a5c <__vector_9+0x7c>
    1a1c:	42 81       	ldd	r20, Z+2	; 0x02
    1a1e:	53 81       	ldd	r21, Z+3	; 0x03
    1a20:	64 81       	ldd	r22, Z+4	; 0x04
    1a22:	75 81       	ldd	r23, Z+5	; 0x05
    1a24:	86 17       	cp	r24, r22
    1a26:	97 07       	cpc	r25, r23
    1a28:	c9 f4       	brne	.+50     	; 0x1a5c <__vector_9+0x7c>
    1a2a:	ca 01       	movw	r24, r20
    1a2c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a30:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a34:	42 1b       	sub	r20, r18
    1a36:	53 0b       	sbc	r21, r19
    1a38:	41 30       	cpi	r20, 0x01	; 1
    1a3a:	51 05       	cpc	r21, r1
    1a3c:	29 f4       	brne	.+10     	; 0x1a48 <__vector_9+0x68>
    1a3e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a42:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a46:	01 96       	adiw	r24, 0x01	; 1
    1a48:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1a4c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1a50:	ef e6       	ldi	r30, 0x6F	; 111
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	82 60       	ori	r24, 0x02	; 2
    1a58:	80 83       	st	Z, r24
    1a5a:	05 c0       	rjmp	.+10     	; 0x1a66 <__vector_9+0x86>
    1a5c:	ef e6       	ldi	r30, 0x6F	; 111
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	8d 7f       	andi	r24, 0xFD	; 253
    1a64:	80 83       	st	Z, r24
    1a66:	ff 91       	pop	r31
    1a68:	ef 91       	pop	r30
    1a6a:	9f 91       	pop	r25
    1a6c:	8f 91       	pop	r24
    1a6e:	7f 91       	pop	r23
    1a70:	6f 91       	pop	r22
    1a72:	5f 91       	pop	r21
    1a74:	4f 91       	pop	r20
    1a76:	3f 91       	pop	r19
    1a78:	2f 91       	pop	r18
    1a7a:	0f 90       	pop	r0
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	0f 90       	pop	r0
    1a80:	1f 90       	pop	r1
    1a82:	18 95       	reti

00001a84 <__vector_7>:
    1a84:	1f 92       	push	r1
    1a86:	0f 92       	push	r0
    1a88:	0f b6       	in	r0, 0x3f	; 63
    1a8a:	0f 92       	push	r0
    1a8c:	11 24       	eor	r1, r1
    1a8e:	cf 92       	push	r12
    1a90:	df 92       	push	r13
    1a92:	ef 92       	push	r14
    1a94:	ff 92       	push	r15
    1a96:	2f 93       	push	r18
    1a98:	3f 93       	push	r19
    1a9a:	4f 93       	push	r20
    1a9c:	5f 93       	push	r21
    1a9e:	6f 93       	push	r22
    1aa0:	7f 93       	push	r23
    1aa2:	8f 93       	push	r24
    1aa4:	9f 93       	push	r25
    1aa6:	af 93       	push	r26
    1aa8:	bf 93       	push	r27
    1aaa:	ef 93       	push	r30
    1aac:	ff 93       	push	r31
    1aae:	c0 90 36 01 	lds	r12, 0x0136	; 0x800136 <overflows>
    1ab2:	d0 90 37 01 	lds	r13, 0x0137	; 0x800137 <overflows+0x1>
    1ab6:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1aba:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1abe:	b0 99       	sbic	0x16, 0	; 22
    1ac0:	0f c0       	rjmp	.+30     	; 0x1ae0 <__vector_7+0x5c>
    1ac2:	0d 2c       	mov	r0, r13
    1ac4:	00 0c       	add	r0, r0
    1ac6:	ee 08       	sbc	r14, r14
    1ac8:	ff 08       	sbc	r15, r15
    1aca:	d6 01       	movw	r26, r12
    1acc:	99 27       	eor	r25, r25
    1ace:	88 27       	eor	r24, r24
    1ad0:	69 01       	movw	r12, r18
    1ad2:	e1 2c       	mov	r14, r1
    1ad4:	f1 2c       	mov	r15, r1
    1ad6:	c8 2a       	or	r12, r24
    1ad8:	d9 2a       	or	r13, r25
    1ada:	ea 2a       	or	r14, r26
    1adc:	fb 2a       	or	r15, r27
    1ade:	15 c0       	rjmp	.+42     	; 0x1b0a <__vector_7+0x86>
    1ae0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ae4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ae8:	8f ef       	ldi	r24, 0xFF	; 255
    1aea:	c8 1a       	sub	r12, r24
    1aec:	d8 0a       	sbc	r13, r24
    1aee:	0d 2c       	mov	r0, r13
    1af0:	00 0c       	add	r0, r0
    1af2:	ee 08       	sbc	r14, r14
    1af4:	ff 08       	sbc	r15, r15
    1af6:	d6 01       	movw	r26, r12
    1af8:	99 27       	eor	r25, r25
    1afa:	88 27       	eor	r24, r24
    1afc:	69 01       	movw	r12, r18
    1afe:	e1 2c       	mov	r14, r1
    1b00:	f1 2c       	mov	r15, r1
    1b02:	c8 2a       	or	r12, r24
    1b04:	d9 2a       	or	r13, r25
    1b06:	ea 2a       	or	r14, r26
    1b08:	fb 2a       	or	r15, r27
    1b0a:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <timerQ>
    1b0e:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <timerQ+0x1>
    1b12:	30 97       	sbiw	r30, 0x00	; 0
    1b14:	09 f4       	brne	.+2      	; 0x1b18 <__vector_7+0x94>
    1b16:	42 c0       	rjmp	.+132    	; 0x1b9c <__vector_7+0x118>
    1b18:	82 81       	ldd	r24, Z+2	; 0x02
    1b1a:	93 81       	ldd	r25, Z+3	; 0x03
    1b1c:	a4 81       	ldd	r26, Z+4	; 0x04
    1b1e:	b5 81       	ldd	r27, Z+5	; 0x05
    1b20:	8c 19       	sub	r24, r12
    1b22:	9d 09       	sbc	r25, r13
    1b24:	ae 09       	sbc	r26, r14
    1b26:	bf 09       	sbc	r27, r15
    1b28:	18 16       	cp	r1, r24
    1b2a:	19 06       	cpc	r1, r25
    1b2c:	1a 06       	cpc	r1, r26
    1b2e:	1b 06       	cpc	r1, r27
    1b30:	ec f1       	brlt	.+122    	; 0x1bac <__vector_7+0x128>
    1b32:	8c e3       	ldi	r24, 0x3C	; 60
    1b34:	91 e0       	ldi	r25, 0x01	; 1
    1b36:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <dequeue>
    1b3a:	6e e3       	ldi	r22, 0x3E	; 62
    1b3c:	71 e0       	ldi	r23, 0x01	; 1
    1b3e:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <enqueueByDeadline>
    1b42:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <timerQ>
    1b46:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <timerQ+0x1>
    1b4a:	30 97       	sbiw	r30, 0x00	; 0
    1b4c:	39 f1       	breq	.+78     	; 0x1b9c <__vector_7+0x118>
    1b4e:	82 81       	ldd	r24, Z+2	; 0x02
    1b50:	93 81       	ldd	r25, Z+3	; 0x03
    1b52:	a4 81       	ldd	r26, Z+4	; 0x04
    1b54:	b5 81       	ldd	r27, Z+5	; 0x05
    1b56:	8c 19       	sub	r24, r12
    1b58:	9d 09       	sbc	r25, r13
    1b5a:	ae 09       	sbc	r26, r14
    1b5c:	bf 09       	sbc	r27, r15
    1b5e:	18 16       	cp	r1, r24
    1b60:	19 06       	cpc	r1, r25
    1b62:	1a 06       	cpc	r1, r26
    1b64:	1b 06       	cpc	r1, r27
    1b66:	2c f7       	brge	.-54     	; 0x1b32 <__vector_7+0xae>
    1b68:	21 c0       	rjmp	.+66     	; 0x1bac <__vector_7+0x128>
    1b6a:	9c 01       	movw	r18, r24
    1b6c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b70:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b74:	84 1b       	sub	r24, r20
    1b76:	95 0b       	sbc	r25, r21
    1b78:	01 97       	sbiw	r24, 0x01	; 1
    1b7a:	31 f4       	brne	.+12     	; 0x1b88 <__vector_7+0x104>
    1b7c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b80:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b84:	2f 5f       	subi	r18, 0xFF	; 255
    1b86:	3f 4f       	sbci	r19, 0xFF	; 255
    1b88:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1b8c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1b90:	ef e6       	ldi	r30, 0x6F	; 111
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	82 60       	ori	r24, 0x02	; 2
    1b98:	80 83       	st	Z, r24
    1b9a:	05 c0       	rjmp	.+10     	; 0x1ba6 <__vector_7+0x122>
    1b9c:	ef e6       	ldi	r30, 0x6F	; 111
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	8d 7f       	andi	r24, 0xFD	; 253
    1ba4:	80 83       	st	Z, r24
    1ba6:	0e 94 80 04 	call	0x900	; 0x900 <schedule>
    1baa:	0c c0       	rjmp	.+24     	; 0x1bc4 <__vector_7+0x140>
    1bac:	82 81       	ldd	r24, Z+2	; 0x02
    1bae:	93 81       	ldd	r25, Z+3	; 0x03
    1bb0:	a4 81       	ldd	r26, Z+4	; 0x04
    1bb2:	b5 81       	ldd	r27, Z+5	; 0x05
    1bb4:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
    1bb8:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
    1bbc:	2a 17       	cp	r18, r26
    1bbe:	3b 07       	cpc	r19, r27
    1bc0:	69 f7       	brne	.-38     	; 0x1b9c <__vector_7+0x118>
    1bc2:	d3 cf       	rjmp	.-90     	; 0x1b6a <__vector_7+0xe6>
    1bc4:	ff 91       	pop	r31
    1bc6:	ef 91       	pop	r30
    1bc8:	bf 91       	pop	r27
    1bca:	af 91       	pop	r26
    1bcc:	9f 91       	pop	r25
    1bce:	8f 91       	pop	r24
    1bd0:	7f 91       	pop	r23
    1bd2:	6f 91       	pop	r22
    1bd4:	5f 91       	pop	r21
    1bd6:	4f 91       	pop	r20
    1bd8:	3f 91       	pop	r19
    1bda:	2f 91       	pop	r18
    1bdc:	ff 90       	pop	r15
    1bde:	ef 90       	pop	r14
    1be0:	df 90       	pop	r13
    1be2:	cf 90       	pop	r12
    1be4:	0f 90       	pop	r0
    1be6:	0f be       	out	0x3f, r0	; 63
    1be8:	0f 90       	pop	r0
    1bea:	1f 90       	pop	r1
    1bec:	18 95       	reti

00001bee <async>:
    1bee:	3f 92       	push	r3
    1bf0:	4f 92       	push	r4
    1bf2:	5f 92       	push	r5
    1bf4:	6f 92       	push	r6
    1bf6:	7f 92       	push	r7
    1bf8:	8f 92       	push	r8
    1bfa:	9f 92       	push	r9
    1bfc:	af 92       	push	r10
    1bfe:	bf 92       	push	r11
    1c00:	cf 92       	push	r12
    1c02:	df 92       	push	r13
    1c04:	ef 92       	push	r14
    1c06:	ff 92       	push	r15
    1c08:	0f 93       	push	r16
    1c0a:	1f 93       	push	r17
    1c0c:	cf 93       	push	r28
    1c0e:	df 93       	push	r29
    1c10:	2b 01       	movw	r4, r22
    1c12:	3c 01       	movw	r6, r24
    1c14:	49 01       	movw	r8, r18
    1c16:	5a 01       	movw	r10, r20
    1c18:	8f b7       	in	r24, 0x3f	; 63
    1c1a:	80 78       	andi	r24, 0x80	; 128
    1c1c:	38 2e       	mov	r3, r24
    1c1e:	f8 94       	cli
    1c20:	8f e2       	ldi	r24, 0x2F	; 47
    1c22:	91 e0       	ldi	r25, 0x01	; 1
    1c24:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <dequeue>
    1c28:	ec 01       	movw	r28, r24
    1c2a:	1b 87       	std	Y+11, r17	; 0x0b
    1c2c:	0a 87       	std	Y+10, r16	; 0x0a
    1c2e:	fd 86       	std	Y+13, r15	; 0x0d
    1c30:	ec 86       	std	Y+12, r14	; 0x0c
    1c32:	df 86       	std	Y+15, r13	; 0x0f
    1c34:	ce 86       	std	Y+14, r12	; 0x0e
    1c36:	33 20       	and	r3, r3
    1c38:	61 f0       	breq	.+24     	; 0x1c52 <async+0x64>
    1c3a:	e0 91 29 01 	lds	r30, 0x0129	; 0x800129 <current>
    1c3e:	f0 91 2a 01 	lds	r31, 0x012A	; 0x80012a <current+0x1>
    1c42:	02 80       	ldd	r0, Z+2	; 0x02
    1c44:	f3 81       	ldd	r31, Z+3	; 0x03
    1c46:	e0 2d       	mov	r30, r0
    1c48:	82 81       	ldd	r24, Z+2	; 0x02
    1c4a:	93 81       	ldd	r25, Z+3	; 0x03
    1c4c:	a4 81       	ldd	r26, Z+4	; 0x04
    1c4e:	b5 81       	ldd	r27, Z+5	; 0x05
    1c50:	08 c0       	rjmp	.+16     	; 0x1c62 <async+0x74>
    1c52:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <timestamp>
    1c56:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <timestamp+0x1>
    1c5a:	a0 91 3a 01 	lds	r26, 0x013A	; 0x80013a <timestamp+0x2>
    1c5e:	b0 91 3b 01 	lds	r27, 0x013B	; 0x80013b <timestamp+0x3>
    1c62:	48 0e       	add	r4, r24
    1c64:	59 1e       	adc	r5, r25
    1c66:	6a 1e       	adc	r6, r26
    1c68:	7b 1e       	adc	r7, r27
    1c6a:	4a 82       	std	Y+2, r4	; 0x02
    1c6c:	5b 82       	std	Y+3, r5	; 0x03
    1c6e:	6c 82       	std	Y+4, r6	; 0x04
    1c70:	7d 82       	std	Y+5, r7	; 0x05
    1c72:	18 14       	cp	r1, r8
    1c74:	19 04       	cpc	r1, r9
    1c76:	1a 04       	cpc	r1, r10
    1c78:	1b 04       	cpc	r1, r11
    1c7a:	44 f0       	brlt	.+16     	; 0x1c8c <async+0x9e>
    1c7c:	0f 2e       	mov	r0, r31
    1c7e:	88 24       	eor	r8, r8
    1c80:	8a 94       	dec	r8
    1c82:	98 2c       	mov	r9, r8
    1c84:	a8 2c       	mov	r10, r8
    1c86:	ff e7       	ldi	r31, 0x7F	; 127
    1c88:	bf 2e       	mov	r11, r31
    1c8a:	f0 2d       	mov	r31, r0
    1c8c:	84 0c       	add	r8, r4
    1c8e:	95 1c       	adc	r9, r5
    1c90:	a6 1c       	adc	r10, r6
    1c92:	b7 1c       	adc	r11, r7
    1c94:	8e 82       	std	Y+6, r8	; 0x06
    1c96:	9f 82       	std	Y+7, r9	; 0x07
    1c98:	a8 86       	std	Y+8, r10	; 0x08
    1c9a:	b9 86       	std	Y+9, r11	; 0x09
    1c9c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <overflows>
    1ca0:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <overflows+0x1>
    1ca4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ca8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1cac:	b0 99       	sbic	0x16, 0	; 22
    1cae:	0e c0       	rjmp	.+28     	; 0x1ccc <async+0xde>
    1cb0:	09 2e       	mov	r0, r25
    1cb2:	00 0c       	add	r0, r0
    1cb4:	aa 0b       	sbc	r26, r26
    1cb6:	bb 0b       	sbc	r27, r27
    1cb8:	dc 01       	movw	r26, r24
    1cba:	99 27       	eor	r25, r25
    1cbc:	88 27       	eor	r24, r24
    1cbe:	60 e0       	ldi	r22, 0x00	; 0
    1cc0:	70 e0       	ldi	r23, 0x00	; 0
    1cc2:	84 2b       	or	r24, r20
    1cc4:	95 2b       	or	r25, r21
    1cc6:	a6 2b       	or	r26, r22
    1cc8:	b7 2b       	or	r27, r23
    1cca:	13 c0       	rjmp	.+38     	; 0x1cf2 <async+0x104>
    1ccc:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1cd0:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1cd4:	01 96       	adiw	r24, 0x01	; 1
    1cd6:	09 2e       	mov	r0, r25
    1cd8:	00 0c       	add	r0, r0
    1cda:	aa 0b       	sbc	r26, r26
    1cdc:	bb 0b       	sbc	r27, r27
    1cde:	dc 01       	movw	r26, r24
    1ce0:	99 27       	eor	r25, r25
    1ce2:	88 27       	eor	r24, r24
    1ce4:	a9 01       	movw	r20, r18
    1ce6:	60 e0       	ldi	r22, 0x00	; 0
    1ce8:	70 e0       	ldi	r23, 0x00	; 0
    1cea:	84 2b       	or	r24, r20
    1cec:	95 2b       	or	r25, r21
    1cee:	a6 2b       	or	r26, r22
    1cf0:	b7 2b       	or	r27, r23
    1cf2:	48 1a       	sub	r4, r24
    1cf4:	59 0a       	sbc	r5, r25
    1cf6:	6a 0a       	sbc	r6, r26
    1cf8:	7b 0a       	sbc	r7, r27
    1cfa:	14 14       	cp	r1, r4
    1cfc:	15 04       	cpc	r1, r5
    1cfe:	16 04       	cpc	r1, r6
    1d00:	17 04       	cpc	r1, r7
    1d02:	ac f5       	brge	.+106    	; 0x1d6e <async+0x180>
    1d04:	6c e3       	ldi	r22, 0x3C	; 60
    1d06:	71 e0       	ldi	r23, 0x01	; 1
    1d08:	ce 01       	movw	r24, r28
    1d0a:	0e 94 96 0c 	call	0x192c	; 0x192c <enqueueByBaseline>
    1d0e:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <timerQ>
    1d12:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <timerQ+0x1>
    1d16:	30 97       	sbiw	r30, 0x00	; 0
    1d18:	21 f1       	breq	.+72     	; 0x1d62 <async+0x174>
    1d1a:	82 81       	ldd	r24, Z+2	; 0x02
    1d1c:	93 81       	ldd	r25, Z+3	; 0x03
    1d1e:	a4 81       	ldd	r26, Z+4	; 0x04
    1d20:	b5 81       	ldd	r27, Z+5	; 0x05
    1d22:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
    1d26:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
    1d2a:	2a 17       	cp	r18, r26
    1d2c:	3b 07       	cpc	r19, r27
    1d2e:	c9 f4       	brne	.+50     	; 0x1d62 <async+0x174>
    1d30:	9c 01       	movw	r18, r24
    1d32:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d36:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d3a:	84 1b       	sub	r24, r20
    1d3c:	95 0b       	sbc	r25, r21
    1d3e:	01 97       	sbiw	r24, 0x01	; 1
    1d40:	31 f4       	brne	.+12     	; 0x1d4e <async+0x160>
    1d42:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d46:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d4a:	2f 5f       	subi	r18, 0xFF	; 255
    1d4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d4e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1d52:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1d56:	ef e6       	ldi	r30, 0x6F	; 111
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	82 60       	ori	r24, 0x02	; 2
    1d5e:	80 83       	st	Z, r24
    1d60:	41 c0       	rjmp	.+130    	; 0x1de4 <async+0x1f6>
    1d62:	ef e6       	ldi	r30, 0x6F	; 111
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	8d 7f       	andi	r24, 0xFD	; 253
    1d6a:	80 83       	st	Z, r24
    1d6c:	3b c0       	rjmp	.+118    	; 0x1de4 <async+0x1f6>
    1d6e:	6e e3       	ldi	r22, 0x3E	; 62
    1d70:	71 e0       	ldi	r23, 0x01	; 1
    1d72:	ce 01       	movw	r24, r28
    1d74:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <enqueueByDeadline>
    1d78:	33 20       	and	r3, r3
    1d7a:	b9 f1       	breq	.+110    	; 0x1dea <async+0x1fc>
    1d7c:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <threadPool>
    1d80:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <threadPool+0x1>
    1d84:	00 97       	sbiw	r24, 0x00	; 0
    1d86:	81 f1       	breq	.+96     	; 0x1de8 <async+0x1fa>
    1d88:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <activeStack>
    1d8c:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <activeStack+0x1>
    1d90:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <msgQ>
    1d94:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <msgQ+0x1>
    1d98:	02 81       	ldd	r16, Z+2	; 0x02
    1d9a:	13 81       	ldd	r17, Z+3	; 0x03
    1d9c:	d9 01       	movw	r26, r18
    1d9e:	16 96       	adiw	r26, 0x06	; 6
    1da0:	4d 91       	ld	r20, X+
    1da2:	5d 91       	ld	r21, X+
    1da4:	6d 91       	ld	r22, X+
    1da6:	7c 91       	ld	r23, X
    1da8:	19 97       	sbiw	r26, 0x09	; 9
    1daa:	d8 01       	movw	r26, r16
    1dac:	16 96       	adiw	r26, 0x06	; 6
    1dae:	0d 91       	ld	r16, X+
    1db0:	1d 91       	ld	r17, X+
    1db2:	2d 91       	ld	r18, X+
    1db4:	3c 91       	ld	r19, X
    1db6:	19 97       	sbiw	r26, 0x09	; 9
    1db8:	40 1b       	sub	r20, r16
    1dba:	51 0b       	sbc	r21, r17
    1dbc:	62 0b       	sbc	r22, r18
    1dbe:	73 0b       	sbc	r23, r19
    1dc0:	9a f4       	brpl	.+38     	; 0x1de8 <async+0x1fa>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	2d 91       	ld	r18, X+
    1dc6:	3c 91       	ld	r19, X
    1dc8:	11 97       	sbiw	r26, 0x01	; 1
    1dca:	30 93 2e 01 	sts	0x012E, r19	; 0x80012e <threadPool+0x1>
    1dce:	20 93 2d 01 	sts	0x012D, r18	; 0x80012d <threadPool>
    1dd2:	ed 93       	st	X+, r30
    1dd4:	fc 93       	st	X, r31
    1dd6:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <activeStack+0x1>
    1dda:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <activeStack>
    1dde:	0e 94 60 04 	call	0x8c0	; 0x8c0 <dispatch>
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <async+0x1fa>
    1de4:	33 20       	and	r3, r3
    1de6:	09 f0       	breq	.+2      	; 0x1dea <async+0x1fc>
    1de8:	78 94       	sei
    1dea:	ce 01       	movw	r24, r28
    1dec:	df 91       	pop	r29
    1dee:	cf 91       	pop	r28
    1df0:	1f 91       	pop	r17
    1df2:	0f 91       	pop	r16
    1df4:	ff 90       	pop	r15
    1df6:	ef 90       	pop	r14
    1df8:	df 90       	pop	r13
    1dfa:	cf 90       	pop	r12
    1dfc:	bf 90       	pop	r11
    1dfe:	af 90       	pop	r10
    1e00:	9f 90       	pop	r9
    1e02:	8f 90       	pop	r8
    1e04:	7f 90       	pop	r7
    1e06:	6f 90       	pop	r6
    1e08:	5f 90       	pop	r5
    1e0a:	4f 90       	pop	r4
    1e0c:	3f 90       	pop	r3
    1e0e:	08 95       	ret

00001e10 <sync>:
    1e10:	cf 92       	push	r12
    1e12:	df 92       	push	r13
    1e14:	ef 92       	push	r14
    1e16:	ff 92       	push	r15
    1e18:	0f 93       	push	r16
    1e1a:	1f 93       	push	r17
    1e1c:	cf 93       	push	r28
    1e1e:	df 93       	push	r29
    1e20:	ec 01       	movw	r28, r24
    1e22:	7b 01       	movw	r14, r22
    1e24:	6a 01       	movw	r12, r20
    1e26:	1f b7       	in	r17, 0x3f	; 63
    1e28:	10 78       	andi	r17, 0x80	; 128
    1e2a:	f8 94       	cli
    1e2c:	a8 81       	ld	r26, Y
    1e2e:	b9 81       	ldd	r27, Y+1	; 0x01
    1e30:	10 97       	sbiw	r26, 0x00	; 0
    1e32:	61 f1       	breq	.+88     	; 0x1e8c <sync+0x7c>
    1e34:	14 96       	adiw	r26, 0x04	; 4
    1e36:	ed 91       	ld	r30, X+
    1e38:	fc 91       	ld	r31, X
    1e3a:	15 97       	sbiw	r26, 0x05	; 5
    1e3c:	30 97       	sbiw	r30, 0x00	; 0
    1e3e:	41 f0       	breq	.+16     	; 0x1e50 <sync+0x40>
    1e40:	a0 81       	ld	r26, Z
    1e42:	b1 81       	ldd	r27, Z+1	; 0x01
    1e44:	14 96       	adiw	r26, 0x04	; 4
    1e46:	ed 91       	ld	r30, X+
    1e48:	fc 91       	ld	r31, X
    1e4a:	15 97       	sbiw	r26, 0x05	; 5
    1e4c:	30 97       	sbiw	r30, 0x00	; 0
    1e4e:	c1 f7       	brne	.-16     	; 0x1e40 <sync+0x30>
    1e50:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <current>
    1e54:	30 91 2a 01 	lds	r19, 0x012A	; 0x80012a <current+0x1>
    1e58:	2a 17       	cp	r18, r26
    1e5a:	3b 07       	cpc	r19, r27
    1e5c:	21 f0       	breq	.+8      	; 0x1e66 <sync+0x56>
    1e5e:	11 23       	and	r17, r17
    1e60:	09 f4       	brne	.+2      	; 0x1e64 <sync+0x54>
    1e62:	3d c0       	rjmp	.+122    	; 0x1ede <sync+0xce>
    1e64:	07 c0       	rjmp	.+14     	; 0x1e74 <sync+0x64>
    1e66:	11 23       	and	r17, r17
    1e68:	09 f4       	brne	.+2      	; 0x1e6c <sync+0x5c>
    1e6a:	3c c0       	rjmp	.+120    	; 0x1ee4 <sync+0xd4>
    1e6c:	78 94       	sei
    1e6e:	8f ef       	ldi	r24, 0xFF	; 255
    1e70:	9f ef       	ldi	r25, 0xFF	; 255
    1e72:	52 c0       	rjmp	.+164    	; 0x1f18 <sync+0x108>
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	9b 81       	ldd	r25, Y+3	; 0x03
    1e78:	00 97       	sbiw	r24, 0x00	; 0
    1e7a:	d1 f1       	breq	.+116    	; 0x1ef0 <sync+0xe0>
    1e7c:	fc 01       	movw	r30, r24
    1e7e:	15 82       	std	Z+5, r1	; 0x05
    1e80:	14 82       	std	Z+4, r1	; 0x04
    1e82:	36 c0       	rjmp	.+108    	; 0x1ef0 <sync+0xe0>
    1e84:	78 94       	sei
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	46 c0       	rjmp	.+140    	; 0x1f18 <sync+0x108>
    1e8c:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <current>
    1e90:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <current+0x1>
    1e94:	99 83       	std	Y+1, r25	; 0x01
    1e96:	88 83       	st	Y, r24
    1e98:	11 23       	and	r17, r17
    1e9a:	29 f0       	breq	.+10     	; 0x1ea6 <sync+0x96>
    1e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9e:	9b 81       	ldd	r25, Y+3	; 0x03
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	09 f0       	breq	.+2      	; 0x1ea6 <sync+0x96>
    1ea4:	78 94       	sei
    1ea6:	b6 01       	movw	r22, r12
    1ea8:	ce 01       	movw	r24, r28
    1eaa:	f7 01       	movw	r30, r14
    1eac:	09 95       	icall
    1eae:	f8 2e       	mov	r15, r24
    1eb0:	09 2f       	mov	r16, r25
    1eb2:	8f b7       	in	r24, 0x3f	; 63
    1eb4:	f8 94       	cli
    1eb6:	19 82       	std	Y+1, r1	; 0x01
    1eb8:	18 82       	st	Y, r1
    1eba:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ebe:	82 30       	cpi	r24, 0x02	; 2
    1ec0:	91 05       	cpc	r25, r1
    1ec2:	38 f0       	brcs	.+14     	; 0x1ed2 <sync+0xc2>
    1ec4:	1b 82       	std	Y+3, r1	; 0x03
    1ec6:	1a 82       	std	Y+2, r1	; 0x02
    1ec8:	fc 01       	movw	r30, r24
    1eca:	15 82       	std	Z+5, r1	; 0x05
    1ecc:	14 82       	std	Z+4, r1	; 0x04
    1ece:	0e 94 60 04 	call	0x8c0	; 0x8c0 <dispatch>
    1ed2:	11 23       	and	r17, r17
    1ed4:	51 f0       	breq	.+20     	; 0x1eea <sync+0xda>
    1ed6:	78 94       	sei
    1ed8:	8f 2d       	mov	r24, r15
    1eda:	90 2f       	mov	r25, r16
    1edc:	1d c0       	rjmp	.+58     	; 0x1f18 <sync+0x108>
    1ede:	8f ef       	ldi	r24, 0xFF	; 255
    1ee0:	9f ef       	ldi	r25, 0xFF	; 255
    1ee2:	1a c0       	rjmp	.+52     	; 0x1f18 <sync+0x108>
    1ee4:	8f ef       	ldi	r24, 0xFF	; 255
    1ee6:	9f ef       	ldi	r25, 0xFF	; 255
    1ee8:	17 c0       	rjmp	.+46     	; 0x1f18 <sync+0x108>
    1eea:	8f 2d       	mov	r24, r15
    1eec:	90 2f       	mov	r25, r16
    1eee:	14 c0       	rjmp	.+40     	; 0x1f18 <sync+0x108>
    1ef0:	3b 83       	std	Y+3, r19	; 0x03
    1ef2:	2a 83       	std	Y+2, r18	; 0x02
    1ef4:	f9 01       	movw	r30, r18
    1ef6:	d5 83       	std	Z+5, r29	; 0x05
    1ef8:	c4 83       	std	Z+4, r28	; 0x04
    1efa:	cd 01       	movw	r24, r26
    1efc:	0e 94 60 04 	call	0x8c0	; 0x8c0 <dispatch>
    1f00:	e0 91 29 01 	lds	r30, 0x0129	; 0x800129 <current>
    1f04:	f0 91 2a 01 	lds	r31, 0x012A	; 0x80012a <current+0x1>
    1f08:	82 81       	ldd	r24, Z+2	; 0x02
    1f0a:	93 81       	ldd	r25, Z+3	; 0x03
    1f0c:	89 2b       	or	r24, r25
    1f0e:	09 f4       	brne	.+2      	; 0x1f12 <sync+0x102>
    1f10:	b9 cf       	rjmp	.-142    	; 0x1e84 <sync+0x74>
    1f12:	f9 83       	std	Y+1, r31	; 0x01
    1f14:	e8 83       	st	Y, r30
    1f16:	c2 cf       	rjmp	.-124    	; 0x1e9c <sync+0x8c>
    1f18:	df 91       	pop	r29
    1f1a:	cf 91       	pop	r28
    1f1c:	1f 91       	pop	r17
    1f1e:	0f 91       	pop	r16
    1f20:	ff 90       	pop	r15
    1f22:	ef 90       	pop	r14
    1f24:	df 90       	pop	r13
    1f26:	cf 90       	pop	r12
    1f28:	08 95       	ret

00001f2a <run>:
    1f2a:	00 91 29 01 	lds	r16, 0x0129	; 0x800129 <current>
    1f2e:	10 91 2a 01 	lds	r17, 0x012A	; 0x80012a <current+0x1>
    1f32:	8e e3       	ldi	r24, 0x3E	; 62
    1f34:	91 e0       	ldi	r25, 0x01	; 1
    1f36:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <dequeue>
    1f3a:	ec 01       	movw	r28, r24
    1f3c:	d8 01       	movw	r26, r16
    1f3e:	13 96       	adiw	r26, 0x03	; 3
    1f40:	9c 93       	st	X, r25
    1f42:	8e 93       	st	-X, r24
    1f44:	12 97       	sbiw	r26, 0x02	; 2
    1f46:	78 94       	sei
    1f48:	4e 85       	ldd	r20, Y+14	; 0x0e
    1f4a:	5f 85       	ldd	r21, Y+15	; 0x0f
    1f4c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f4e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f50:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f52:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f54:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <sync>
    1f58:	8f b7       	in	r24, 0x3f	; 63
    1f5a:	f8 94       	cli
    1f5c:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <msgPool>
    1f60:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <msgPool+0x1>
    1f64:	99 83       	std	Y+1, r25	; 0x01
    1f66:	88 83       	st	Y, r24
    1f68:	d0 93 30 01 	sts	0x0130, r29	; 0x800130 <msgPool+0x1>
    1f6c:	c0 93 2f 01 	sts	0x012F, r28	; 0x80012f <msgPool>
    1f70:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <activeStack>
    1f74:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <activeStack+0x1>
    1f78:	00 81       	ld	r16, Z
    1f7a:	11 81       	ldd	r17, Z+1	; 0x01
    1f7c:	e8 01       	movw	r28, r16
    1f7e:	2a 81       	ldd	r18, Y+2	; 0x02
    1f80:	3b 81       	ldd	r19, Y+3	; 0x03
    1f82:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <msgQ>
    1f86:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <msgQ+0x1>
    1f8a:	10 97       	sbiw	r26, 0x00	; 0
    1f8c:	c1 f0       	breq	.+48     	; 0x1fbe <run+0x94>
    1f8e:	21 15       	cp	r18, r1
    1f90:	31 05       	cpc	r19, r1
    1f92:	59 f2       	breq	.-106    	; 0x1f2a <run>
    1f94:	16 96       	adiw	r26, 0x06	; 6
    1f96:	8d 91       	ld	r24, X+
    1f98:	9d 91       	ld	r25, X+
    1f9a:	0d 90       	ld	r0, X+
    1f9c:	bc 91       	ld	r27, X
    1f9e:	a0 2d       	mov	r26, r0
    1fa0:	e9 01       	movw	r28, r18
    1fa2:	4e 81       	ldd	r20, Y+6	; 0x06
    1fa4:	5f 81       	ldd	r21, Y+7	; 0x07
    1fa6:	68 85       	ldd	r22, Y+8	; 0x08
    1fa8:	79 85       	ldd	r23, Y+9	; 0x09
    1faa:	84 1b       	sub	r24, r20
    1fac:	95 0b       	sbc	r25, r21
    1fae:	a6 0b       	sbc	r26, r22
    1fb0:	b7 0b       	sbc	r27, r23
    1fb2:	18 16       	cp	r1, r24
    1fb4:	19 06       	cpc	r1, r25
    1fb6:	1a 06       	cpc	r1, r26
    1fb8:	1b 06       	cpc	r1, r27
    1fba:	0c f0       	brlt	.+2      	; 0x1fbe <run+0x94>
    1fbc:	b6 cf       	rjmp	.-148    	; 0x1f2a <run>
    1fbe:	10 93 2c 01 	sts	0x012C, r17	; 0x80012c <activeStack+0x1>
    1fc2:	00 93 2b 01 	sts	0x012B, r16	; 0x80012b <activeStack>
    1fc6:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <threadPool>
    1fca:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <threadPool+0x1>
    1fce:	91 83       	std	Z+1, r25	; 0x01
    1fd0:	80 83       	st	Z, r24
    1fd2:	f0 93 2e 01 	sts	0x012E, r31	; 0x80012e <threadPool+0x1>
    1fd6:	e0 93 2d 01 	sts	0x012D, r30	; 0x80012d <threadPool>
    1fda:	a0 91 2b 01 	lds	r26, 0x012B	; 0x80012b <activeStack>
    1fde:	b0 91 2c 01 	lds	r27, 0x012C	; 0x80012c <activeStack+0x1>
    1fe2:	14 96       	adiw	r26, 0x04	; 4
    1fe4:	ed 91       	ld	r30, X+
    1fe6:	fc 91       	ld	r31, X
    1fe8:	15 97       	sbiw	r26, 0x05	; 5
    1fea:	30 97       	sbiw	r30, 0x00	; 0
    1fec:	41 f0       	breq	.+16     	; 0x1ffe <run+0xd4>
    1fee:	a0 81       	ld	r26, Z
    1ff0:	b1 81       	ldd	r27, Z+1	; 0x01
    1ff2:	14 96       	adiw	r26, 0x04	; 4
    1ff4:	ed 91       	ld	r30, X+
    1ff6:	fc 91       	ld	r31, X
    1ff8:	15 97       	sbiw	r26, 0x05	; 5
    1ffa:	30 97       	sbiw	r30, 0x00	; 0
    1ffc:	c1 f7       	brne	.-16     	; 0x1fee <run+0xc4>
    1ffe:	cd 01       	movw	r24, r26
    2000:	0e 94 60 04 	call	0x8c0	; 0x8c0 <dispatch>
    2004:	92 cf       	rjmp	.-220    	; 0x1f2a <run>

00002006 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    2006:	42 31       	cpi	r20, 0x12	; 18
    2008:	b8 f4       	brcc	.+46     	; 0x2038 <install+0x32>
        char status;
        DISABLE(status);
    200a:	2f b7       	in	r18, 0x3f	; 63
    200c:	f8 94       	cli
        otable[i] = obj;
    200e:	50 e0       	ldi	r21, 0x00	; 0
    2010:	44 0f       	add	r20, r20
    2012:	55 1f       	adc	r21, r21
    2014:	fa 01       	movw	r30, r20
    2016:	e0 5c       	subi	r30, 0xC0	; 192
    2018:	fe 4f       	sbci	r31, 0xFE	; 254
    201a:	91 83       	std	Z+1, r25	; 0x01
    201c:	80 83       	st	Z, r24
        mtable[i] = m;
    201e:	fa 01       	movw	r30, r20
    2020:	e8 52       	subi	r30, 0x28	; 40
    2022:	fe 4f       	sbci	r31, 0xFE	; 254
    2024:	71 83       	std	Z+1, r23	; 0x01
    2026:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    2028:	41 e0       	ldi	r20, 0x01	; 1
    202a:	50 e0       	ldi	r21, 0x00	; 0
    202c:	fc 01       	movw	r30, r24
    202e:	53 83       	std	Z+3, r21	; 0x03
    2030:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    2032:	22 23       	and	r18, r18
    2034:	0c f4       	brge	.+2      	; 0x2038 <install+0x32>
    2036:	78 94       	sei
    2038:	08 95       	ret

0000203a <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    203a:	8c 01       	movw	r16, r24
    203c:	7b 01       	movw	r14, r22
    203e:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    2040:	8f b7       	in	r24, 0x3f	; 63
    2042:	f8 94       	cli
    initialize();
    2044:	0e 94 f5 03 	call	0x7ea	; 0x7ea <initialize>
    ENABLE(1);
    2048:	78 94       	sei
    if (m != NULL)
    204a:	e1 14       	cp	r14, r1
    204c:	f1 04       	cpc	r15, r1
    204e:	41 f0       	breq	.+16     	; 0x2060 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	a9 01       	movw	r20, r18
    2056:	60 e0       	ldi	r22, 0x00	; 0
    2058:	70 e0       	ldi	r23, 0x00	; 0
    205a:	cb 01       	movw	r24, r22
    205c:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <async>
    DISABLE(status);
    2060:	8f b7       	in	r24, 0x3f	; 63
    2062:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    2064:	0e 94 80 04 	call	0x900	; 0x900 <schedule>
    ENABLE(1);
    2068:	78 94       	sei
    while (1) {
        SLEEP();
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	83 bf       	out	0x33, r24	; 51
    206e:	88 95       	sleep
    2070:	fd cf       	rjmp	.-6      	; 0x206c <tinytimber+0x32>

00002072 <writeToPort>:
}
*/

// Write to PORT E bit 4 or 6 (Pin 1 or 3 on PORTE)
void writeToPort(Writer *self, uint8_t whichPulse) {
	if(whichPulse == 0) {
    2072:	61 11       	cpse	r22, r1
    2074:	05 c0       	rjmp	.+10     	; 0x2080 <writeToPort+0xe>
		PORTE = PORTE ^ 0b00010000;
    2076:	9e b1       	in	r25, 0x0e	; 14
    2078:	80 e1       	ldi	r24, 0x10	; 16
    207a:	89 27       	eor	r24, r25
    207c:	8e b9       	out	0x0e, r24	; 14
    207e:	08 95       	ret
	} else {
		PORTE = PORTE ^ 0b01000000;
    2080:	9e b1       	in	r25, 0x0e	; 14
    2082:	80 e4       	ldi	r24, 0x40	; 64
    2084:	89 27       	eor	r24, r25
    2086:	8e b9       	out	0x0e, r24	; 14
    2088:	08 95       	ret

0000208a <disableOutput>:
	}
}

// Disable the output for either bit 4 or 6 (Pin 1 or 3 on PORTE)
void disableOutput(Writer *self, uint8_t whichPulse) {
	if(whichPulse == 0) {
    208a:	61 11       	cpse	r22, r1
    208c:	02 c0       	rjmp	.+4      	; 0x2092 <disableOutput+0x8>
		PORTE = PORTE & 0b11101111;
    208e:	74 98       	cbi	0x0e, 4	; 14
    2090:	08 95       	ret
	} else {
		PORTE = PORTE & 0b10111111;
    2092:	76 98       	cbi	0x0e, 6	; 14
    2094:	08 95       	ret

00002096 <__divmodsi4>:
    2096:	05 2e       	mov	r0, r21
    2098:	97 fb       	bst	r25, 7
    209a:	1e f4       	brtc	.+6      	; 0x20a2 <__divmodsi4+0xc>
    209c:	00 94       	com	r0
    209e:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__negsi2>
    20a2:	57 fd       	sbrc	r21, 7
    20a4:	07 d0       	rcall	.+14     	; 0x20b4 <__divmodsi4_neg2>
    20a6:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__udivmodsi4>
    20aa:	07 fc       	sbrc	r0, 7
    20ac:	03 d0       	rcall	.+6      	; 0x20b4 <__divmodsi4_neg2>
    20ae:	4e f4       	brtc	.+18     	; 0x20c2 <__divmodsi4_exit>
    20b0:	0c 94 62 10 	jmp	0x20c4	; 0x20c4 <__negsi2>

000020b4 <__divmodsi4_neg2>:
    20b4:	50 95       	com	r21
    20b6:	40 95       	com	r20
    20b8:	30 95       	com	r19
    20ba:	21 95       	neg	r18
    20bc:	3f 4f       	sbci	r19, 0xFF	; 255
    20be:	4f 4f       	sbci	r20, 0xFF	; 255
    20c0:	5f 4f       	sbci	r21, 0xFF	; 255

000020c2 <__divmodsi4_exit>:
    20c2:	08 95       	ret

000020c4 <__negsi2>:
    20c4:	90 95       	com	r25
    20c6:	80 95       	com	r24
    20c8:	70 95       	com	r23
    20ca:	61 95       	neg	r22
    20cc:	7f 4f       	sbci	r23, 0xFF	; 255
    20ce:	8f 4f       	sbci	r24, 0xFF	; 255
    20d0:	9f 4f       	sbci	r25, 0xFF	; 255
    20d2:	08 95       	ret

000020d4 <__udivmodsi4>:
    20d4:	a1 e2       	ldi	r26, 0x21	; 33
    20d6:	1a 2e       	mov	r1, r26
    20d8:	aa 1b       	sub	r26, r26
    20da:	bb 1b       	sub	r27, r27
    20dc:	fd 01       	movw	r30, r26
    20de:	0d c0       	rjmp	.+26     	; 0x20fa <__udivmodsi4_ep>

000020e0 <__udivmodsi4_loop>:
    20e0:	aa 1f       	adc	r26, r26
    20e2:	bb 1f       	adc	r27, r27
    20e4:	ee 1f       	adc	r30, r30
    20e6:	ff 1f       	adc	r31, r31
    20e8:	a2 17       	cp	r26, r18
    20ea:	b3 07       	cpc	r27, r19
    20ec:	e4 07       	cpc	r30, r20
    20ee:	f5 07       	cpc	r31, r21
    20f0:	20 f0       	brcs	.+8      	; 0x20fa <__udivmodsi4_ep>
    20f2:	a2 1b       	sub	r26, r18
    20f4:	b3 0b       	sbc	r27, r19
    20f6:	e4 0b       	sbc	r30, r20
    20f8:	f5 0b       	sbc	r31, r21

000020fa <__udivmodsi4_ep>:
    20fa:	66 1f       	adc	r22, r22
    20fc:	77 1f       	adc	r23, r23
    20fe:	88 1f       	adc	r24, r24
    2100:	99 1f       	adc	r25, r25
    2102:	1a 94       	dec	r1
    2104:	69 f7       	brne	.-38     	; 0x20e0 <__udivmodsi4_loop>
    2106:	60 95       	com	r22
    2108:	70 95       	com	r23
    210a:	80 95       	com	r24
    210c:	90 95       	com	r25
    210e:	9b 01       	movw	r18, r22
    2110:	ac 01       	movw	r20, r24
    2112:	bd 01       	movw	r22, r26
    2114:	cf 01       	movw	r24, r30
    2116:	08 95       	ret

00002118 <setjmp>:
    2118:	dc 01       	movw	r26, r24
    211a:	2d 92       	st	X+, r2
    211c:	3d 92       	st	X+, r3
    211e:	4d 92       	st	X+, r4
    2120:	5d 92       	st	X+, r5
    2122:	6d 92       	st	X+, r6
    2124:	7d 92       	st	X+, r7
    2126:	8d 92       	st	X+, r8
    2128:	9d 92       	st	X+, r9
    212a:	ad 92       	st	X+, r10
    212c:	bd 92       	st	X+, r11
    212e:	cd 92       	st	X+, r12
    2130:	dd 92       	st	X+, r13
    2132:	ed 92       	st	X+, r14
    2134:	fd 92       	st	X+, r15
    2136:	0d 93       	st	X+, r16
    2138:	1d 93       	st	X+, r17
    213a:	cd 93       	st	X+, r28
    213c:	dd 93       	st	X+, r29
    213e:	ff 91       	pop	r31
    2140:	ef 91       	pop	r30
    2142:	8d b7       	in	r24, 0x3d	; 61
    2144:	8d 93       	st	X+, r24
    2146:	8e b7       	in	r24, 0x3e	; 62
    2148:	8d 93       	st	X+, r24
    214a:	8f b7       	in	r24, 0x3f	; 63
    214c:	8d 93       	st	X+, r24
    214e:	ed 93       	st	X+, r30
    2150:	fd 93       	st	X+, r31
    2152:	88 27       	eor	r24, r24
    2154:	99 27       	eor	r25, r25
    2156:	09 94       	ijmp

00002158 <longjmp>:
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	81 30       	cpi	r24, 0x01	; 1
    215e:	91 05       	cpc	r25, r1
    2160:	81 1d       	adc	r24, r1
    2162:	2d 90       	ld	r2, X+
    2164:	3d 90       	ld	r3, X+
    2166:	4d 90       	ld	r4, X+
    2168:	5d 90       	ld	r5, X+
    216a:	6d 90       	ld	r6, X+
    216c:	7d 90       	ld	r7, X+
    216e:	8d 90       	ld	r8, X+
    2170:	9d 90       	ld	r9, X+
    2172:	ad 90       	ld	r10, X+
    2174:	bd 90       	ld	r11, X+
    2176:	cd 90       	ld	r12, X+
    2178:	dd 90       	ld	r13, X+
    217a:	ed 90       	ld	r14, X+
    217c:	fd 90       	ld	r15, X+
    217e:	0d 91       	ld	r16, X+
    2180:	1d 91       	ld	r17, X+
    2182:	cd 91       	ld	r28, X+
    2184:	dd 91       	ld	r29, X+
    2186:	ed 91       	ld	r30, X+
    2188:	fd 91       	ld	r31, X+
    218a:	0d 90       	ld	r0, X+
    218c:	f8 94       	cli
    218e:	fe bf       	out	0x3e, r31	; 62
    2190:	0f be       	out	0x3f, r0	; 63
    2192:	ed bf       	out	0x3d, r30	; 61
    2194:	ed 91       	ld	r30, X+
    2196:	fd 91       	ld	r31, X+
    2198:	09 94       	ijmp

0000219a <_exit>:
    219a:	f8 94       	cli

0000219c <__stop_program>:
    219c:	ff cf       	rjmp	.-2      	; 0x219c <__stop_program>
