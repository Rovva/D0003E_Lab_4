
D0003E_Lab_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00002102  00002196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002102  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000357  00800130  00800130  000021c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000021c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00002238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f81  00000000  00000000  000024c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001147  00000000  00000000  00005441  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000170d  00000000  00000000  00006588  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c50  00000000  00000000  00007c98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a31  00000000  00000000  000088e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c03  00000000  00000000  00009319  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  0000bf1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 6d 04 	jmp	0x8da	; 0x8da <__vector_1>
       8:	0c 94 d9 04 	jmp	0x9b2	; 0x9b2 <__vector_2>
       c:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__vector_3>
      10:	0c 94 b1 05 	jmp	0xb62	; 0xb62 <__vector_4>
      14:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 f4 0c 	jmp	0x19e8	; 0x19e8 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <__vector_9>
      28:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__vector_10>
      2c:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__vector_11>
      30:	0c 94 61 07 	jmp	0xec2	; 0xec2 <__vector_12>
      34:	0c 94 cd 07 	jmp	0xf9a	; 0xf9a <__vector_13>
      38:	0c 94 39 08 	jmp	0x1072	; 0x1072 <__vector_14>
      3c:	0c 94 a5 08 	jmp	0x114a	; 0x114a <__vector_15>
      40:	0c 94 11 09 	jmp	0x1222	; 0x1222 <__vector_16>
      44:	0c 94 7d 09 	jmp	0x12fa	; 0x12fa <__vector_17>
      48:	0c 94 e9 09 	jmp	0x13d2	; 0x13d2 <__vector_18>
      4c:	0c 94 55 0a 	jmp	0x14aa	; 0x14aa <__vector_19>
      50:	0c 94 c1 0a 	jmp	0x1582	; 0x1582 <__vector_20>
      54:	0c 94 2d 0b 	jmp	0x165a	; 0x165a <__vector_21>
      58:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e2 e0       	ldi	r30, 0x02	; 2
      70:	f1 e2       	ldi	r31, 0x21	; 33
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	a0 33       	cpi	r26, 0x30	; 48
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	a0 e3       	ldi	r26, 0x30	; 48
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a7 38       	cpi	r26, 0x87	; 135
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 87 03 	call	0x70e	; 0x70e <main>
      92:	0c 94 7f 10 	jmp	0x20fe	; 0x20fe <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <updateWriter>:
		self->CurrentHzValue = temp;
	}
}

// Method to constantly update the object "Write" to write to the port E
void updateWriter(Generator *self) {
      9a:	cf 92       	push	r12
      9c:	df 92       	push	r13
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	ec 01       	movw	r28, r24
	if(self->CurrentHzValue > 0) {
      ac:	8e 81       	ldd	r24, Y+6	; 0x06
      ae:	88 23       	and	r24, r24
      b0:	69 f1       	breq	.+90     	; 0x10c <updateWriter+0x72>
		ASYNC(self->writer, writeToPort, self->GeneratorNr);
      b2:	c8 84       	ldd	r12, Y+8	; 0x08
      b4:	d1 2c       	mov	r13, r1
      b6:	0c 81       	ldd	r16, Y+4	; 0x04
      b8:	1d 81       	ldd	r17, Y+5	; 0x05
      ba:	0f 2e       	mov	r0, r31
      bc:	fb ee       	ldi	r31, 0xEB	; 235
      be:	ef 2e       	mov	r14, r31
      c0:	ff e0       	ldi	r31, 0x0F	; 15
      c2:	ff 2e       	mov	r15, r31
      c4:	f0 2d       	mov	r31, r0
      c6:	20 e0       	ldi	r18, 0x00	; 0
      c8:	30 e0       	ldi	r19, 0x00	; 0
      ca:	a9 01       	movw	r20, r18
      cc:	60 e0       	ldi	r22, 0x00	; 0
      ce:	70 e0       	ldi	r23, 0x00	; 0
      d0:	cb 01       	movw	r24, r22
      d2:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <async>
		AFTER((MSEC(1000)/(self->CurrentHzValue)/2), self, updateWriter, 0);
      d6:	2e 81       	ldd	r18, Y+6	; 0x06
      d8:	30 e0       	ldi	r19, 0x00	; 0
      da:	40 e0       	ldi	r20, 0x00	; 0
      dc:	50 e0       	ldi	r21, 0x00	; 0
      de:	69 e0       	ldi	r22, 0x09	; 9
      e0:	7d e3       	ldi	r23, 0x3D	; 61
      e2:	80 e0       	ldi	r24, 0x00	; 0
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__divmodsi4>
      ea:	ca 01       	movw	r24, r20
      ec:	b9 01       	movw	r22, r18
      ee:	c1 2c       	mov	r12, r1
      f0:	d1 2c       	mov	r13, r1
      f2:	0f 2e       	mov	r0, r31
      f4:	fd e4       	ldi	r31, 0x4D	; 77
      f6:	ef 2e       	mov	r14, r31
      f8:	f0 e0       	ldi	r31, 0x00	; 0
      fa:	ff 2e       	mov	r15, r31
      fc:	f0 2d       	mov	r31, r0
      fe:	8e 01       	movw	r16, r28
     100:	20 e0       	ldi	r18, 0x00	; 0
     102:	30 e0       	ldi	r19, 0x00	; 0
     104:	a9 01       	movw	r20, r18
     106:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <async>
     10a:	12 c0       	rjmp	.+36     	; 0x130 <updateWriter+0x96>
	} else {
		ASYNC(self->writer, disableOutput, self->GeneratorNr);
     10c:	c8 84       	ldd	r12, Y+8	; 0x08
     10e:	d1 2c       	mov	r13, r1
     110:	0c 81       	ldd	r16, Y+4	; 0x04
     112:	1d 81       	ldd	r17, Y+5	; 0x05
     114:	0f 2e       	mov	r0, r31
     116:	f7 ef       	ldi	r31, 0xF7	; 247
     118:	ef 2e       	mov	r14, r31
     11a:	ff e0       	ldi	r31, 0x0F	; 15
     11c:	ff 2e       	mov	r15, r31
     11e:	f0 2d       	mov	r31, r0
     120:	20 e0       	ldi	r18, 0x00	; 0
     122:	30 e0       	ldi	r19, 0x00	; 0
     124:	a9 01       	movw	r20, r18
     126:	60 e0       	ldi	r22, 0x00	; 0
     128:	70 e0       	ldi	r23, 0x00	; 0
     12a:	cb 01       	movw	r24, r22
     12c:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <async>
	}
}
     130:	df 91       	pop	r29
     132:	cf 91       	pop	r28
     134:	1f 91       	pop	r17
     136:	0f 91       	pop	r16
     138:	ff 90       	pop	r15
     13a:	ef 90       	pop	r14
     13c:	df 90       	pop	r13
     13e:	cf 90       	pop	r12
     140:	08 95       	ret

00000142 <updatePulseValue>:
#include "Writer.h"

// Write code to handle a 0 in value

// Method that saves a value and resets frequency to 0
void updatePulseValue(Generator *self) {
     142:	fc 01       	movw	r30, r24
	// If the generator has not been updated
	if(self->updated == 0 && self->CurrentHzValue != 0) {
     144:	81 85       	ldd	r24, Z+9	; 0x09
     146:	81 11       	cpse	r24, r1
     148:	08 c0       	rjmp	.+16     	; 0x15a <updatePulseValue+0x18>
     14a:	86 81       	ldd	r24, Z+6	; 0x06
     14c:	88 23       	and	r24, r24
     14e:	41 f0       	breq	.+16     	; 0x160 <updatePulseValue+0x1e>
		// Save current frequency in temp
		uint8_t temp = self->CurrentHzValue;
		// Save the value in temp to the variable OldHzValue
		self->OldHzValue = temp;
     150:	87 83       	std	Z+7, r24	; 0x07
		// Set the current frequency to 0
		self->CurrentHzValue = 0;
     152:	16 82       	std	Z+6, r1	; 0x06

		self->updated = true;
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	81 87       	std	Z+9, r24	; 0x09
// Write code to handle a 0 in value

// Method that saves a value and resets frequency to 0
void updatePulseValue(Generator *self) {
	// If the generator has not been updated
	if(self->updated == 0 && self->CurrentHzValue != 0) {
     158:	08 95       	ret
		self->CurrentHzValue = 0;

		self->updated = true;
	} else {
		// If the current frequency is zero, simply restore a old saved value
		if(self->CurrentHzValue == 0) {
     15a:	86 81       	ldd	r24, Z+6	; 0x06
     15c:	81 11       	cpse	r24, r1
     15e:	06 c0       	rjmp	.+12     	; 0x16c <updatePulseValue+0x2a>
			self->CurrentHzValue = self->OldHzValue;
     160:	87 81       	ldd	r24, Z+7	; 0x07
     162:	86 83       	std	Z+6, r24	; 0x06
			updateWriter(self);
     164:	cf 01       	movw	r24, r30
     166:	0e 94 4d 00 	call	0x9a	; 0x9a <updateWriter>
     16a:	08 95       	ret
		// If the current frequency is not zero, save the current value
		} else {
			self->CurrentHzValue = self->OldHzValue;
     16c:	87 81       	ldd	r24, Z+7	; 0x07
     16e:	86 83       	std	Z+6, r24	; 0x06
			self->OldHzValue = 0;
     170:	17 82       	std	Z+7, r1	; 0x07
			self->updated = false;
     172:	11 86       	std	Z+9, r1	; 0x09
			updateWriter(self);
     174:	cf 01       	movw	r24, r30
     176:	0e 94 4d 00 	call	0x9a	; 0x9a <updateWriter>
     17a:	08 95       	ret

0000017c <increaseFrequency>:
		}
	}

}
// Increase the frequency by 1
void increaseFrequency(Generator *self) {
     17c:	fc 01       	movw	r30, r24
	uint8_t temp;
	temp = self->CurrentHzValue;
     17e:	96 81       	ldd	r25, Z+6	; 0x06
	if(temp < 99) {
     180:	93 36       	cpi	r25, 0x63	; 99
     182:	50 f4       	brcc	.+20     	; 0x198 <increaseFrequency+0x1c>
		if(self->CurrentHzValue == 0) {
     184:	91 11       	cpse	r25, r1
     186:	06 c0       	rjmp	.+12     	; 0x194 <increaseFrequency+0x18>
     188:	cf 01       	movw	r24, r30
			temp++;
			self->CurrentHzValue = temp;
     18a:	21 e0       	ldi	r18, 0x01	; 1
     18c:	26 83       	std	Z+6, r18	; 0x06
			updateWriter(self);
     18e:	0e 94 4d 00 	call	0x9a	; 0x9a <updateWriter>
     192:	08 95       	ret
		} else {
		temp++;
		self->CurrentHzValue = temp;
     194:	9f 5f       	subi	r25, 0xFF	; 255
     196:	96 83       	std	Z+6, r25	; 0x06
     198:	08 95       	ret

0000019a <decreaseFrequency>:
	}
	}
}
// Decrease the frequency by 1
void decreaseFrequency(Generator *self) {
     19a:	fc 01       	movw	r30, r24
	uint8_t temp = self->CurrentHzValue;
     19c:	96 81       	ldd	r25, Z+6	; 0x06
	if(temp > 0) {
     19e:	99 23       	and	r25, r25
     1a0:	11 f0       	breq	.+4      	; 0x1a6 <decreaseFrequency+0xc>
		temp--;
		self->CurrentHzValue = temp;
     1a2:	91 50       	subi	r25, 0x01	; 1
     1a4:	96 83       	std	Z+6, r25	; 0x06
     1a6:	08 95       	ret

000001a8 <increaseValue>:
		temp = LCDDR0 & mask;
		LCDDR0 = temp;
	}
}
// Increase frequency with 1 Hz
void increaseValue(GUI *self, int pulseGenerator) {
     1a8:	cf 92       	push	r12
     1aa:	df 92       	push	r13
     1ac:	ef 92       	push	r14
     1ae:	ff 92       	push	r15
     1b0:	0f 93       	push	r16
     1b2:	1f 93       	push	r17
	if(pulseGenerator == 0) {
     1b4:	67 2b       	or	r22, r23
     1b6:	a1 f4       	brne	.+40     	; 0x1e0 <increaseValue+0x38>
		ASYNC(self->generator1, increaseFrequency, 0);
     1b8:	fc 01       	movw	r30, r24
     1ba:	07 81       	ldd	r16, Z+7	; 0x07
     1bc:	10 85       	ldd	r17, Z+8	; 0x08
     1be:	c1 2c       	mov	r12, r1
     1c0:	d1 2c       	mov	r13, r1
     1c2:	0f 2e       	mov	r0, r31
     1c4:	fe eb       	ldi	r31, 0xBE	; 190
     1c6:	ef 2e       	mov	r14, r31
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	ff 2e       	mov	r15, r31
     1cc:	f0 2d       	mov	r31, r0
     1ce:	20 e0       	ldi	r18, 0x00	; 0
     1d0:	30 e0       	ldi	r19, 0x00	; 0
     1d2:	a9 01       	movw	r20, r18
     1d4:	60 e0       	ldi	r22, 0x00	; 0
     1d6:	70 e0       	ldi	r23, 0x00	; 0
     1d8:	cb 01       	movw	r24, r22
     1da:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <async>
     1de:	13 c0       	rjmp	.+38     	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
		} else {
		ASYNC(self->generator2, increaseFrequency, 0);
     1e0:	fc 01       	movw	r30, r24
     1e2:	01 85       	ldd	r16, Z+9	; 0x09
     1e4:	12 85       	ldd	r17, Z+10	; 0x0a
     1e6:	c1 2c       	mov	r12, r1
     1e8:	d1 2c       	mov	r13, r1
     1ea:	0f 2e       	mov	r0, r31
     1ec:	fe eb       	ldi	r31, 0xBE	; 190
     1ee:	ef 2e       	mov	r14, r31
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	ff 2e       	mov	r15, r31
     1f4:	f0 2d       	mov	r31, r0
     1f6:	20 e0       	ldi	r18, 0x00	; 0
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	a9 01       	movw	r20, r18
     1fc:	60 e0       	ldi	r22, 0x00	; 0
     1fe:	70 e0       	ldi	r23, 0x00	; 0
     200:	cb 01       	movw	r24, r22
     202:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <async>
	}
}
     206:	1f 91       	pop	r17
     208:	0f 91       	pop	r16
     20a:	ff 90       	pop	r15
     20c:	ef 90       	pop	r14
     20e:	df 90       	pop	r13
     210:	cf 90       	pop	r12
     212:	08 95       	ret

00000214 <repeatIncrease>:
// Repeat increase in frequency until button is no longer pressed
void repeatIncrease(GUI *self, int pulseGenerator) {
     214:	af 92       	push	r10
     216:	bf 92       	push	r11
     218:	cf 92       	push	r12
     21a:	df 92       	push	r13
     21c:	ef 92       	push	r14
     21e:	ff 92       	push	r15
     220:	0f 93       	push	r16
     222:	1f 93       	push	r17
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
	if(((PINB >> 6) & 1) == 0 && self->firstpress == false) {
     228:	1e 99       	sbic	0x03, 6	; 3
     22a:	36 c0       	rjmp	.+108    	; 0x298 <repeatIncrease+0x84>
     22c:	fc 01       	movw	r30, r24
     22e:	23 85       	ldd	r18, Z+11	; 0x0b
     230:	21 11       	cpse	r18, r1
     232:	32 c0       	rjmp	.+100    	; 0x298 <repeatIncrease+0x84>
     234:	5b 01       	movw	r10, r22
		ASYNC(self, increaseValue, pulseGenerator);
     236:	6b 01       	movw	r12, r22
     238:	0f 2e       	mov	r0, r31
     23a:	f4 ed       	ldi	r31, 0xD4	; 212
     23c:	ef 2e       	mov	r14, r31
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	ff 2e       	mov	r15, r31
     242:	f0 2d       	mov	r31, r0
     244:	8c 01       	movw	r16, r24
     246:	20 e0       	ldi	r18, 0x00	; 0
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	a9 01       	movw	r20, r18
     24c:	60 e0       	ldi	r22, 0x00	; 0
     24e:	70 e0       	ldi	r23, 0x00	; 0
     250:	cb 01       	movw	r24, r22
     252:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <async>
		ASYNC(self, update_values, 0);
     256:	c1 2c       	mov	r12, r1
     258:	d1 2c       	mov	r13, r1
     25a:	0f 2e       	mov	r0, r31
     25c:	f1 eb       	ldi	r31, 0xB1	; 177
     25e:	ef 2e       	mov	r14, r31
     260:	f2 e0       	ldi	r31, 0x02	; 2
     262:	ff 2e       	mov	r15, r31
     264:	f0 2d       	mov	r31, r0
     266:	20 e0       	ldi	r18, 0x00	; 0
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	a9 01       	movw	r20, r18
     26c:	60 e0       	ldi	r22, 0x00	; 0
     26e:	70 e0       	ldi	r23, 0x00	; 0
     270:	cb 01       	movw	r24, r22
     272:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <async>
		AFTER(MSEC(400), self, repeatIncrease, pulseGenerator);
     276:	65 01       	movw	r12, r10
     278:	0f 2e       	mov	r0, r31
     27a:	fa e0       	ldi	r31, 0x0A	; 10
     27c:	ef 2e       	mov	r14, r31
     27e:	f1 e0       	ldi	r31, 0x01	; 1
     280:	ff 2e       	mov	r15, r31
     282:	f0 2d       	mov	r31, r0
     284:	20 e0       	ldi	r18, 0x00	; 0
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	a9 01       	movw	r20, r18
     28a:	64 ed       	ldi	r22, 0xD4	; 212
     28c:	70 e3       	ldi	r23, 0x30	; 48
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <async>
     296:	03 c0       	rjmp	.+6      	; 0x29e <repeatIncrease+0x8a>
	} else {
		self->firstpress = true;
     298:	21 e0       	ldi	r18, 0x01	; 1
     29a:	fc 01       	movw	r30, r24
     29c:	23 87       	std	Z+11, r18	; 0x0b
	}
}
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	1f 91       	pop	r17
     2a4:	0f 91       	pop	r16
     2a6:	ff 90       	pop	r15
     2a8:	ef 90       	pop	r14
     2aa:	df 90       	pop	r13
     2ac:	cf 90       	pop	r12
     2ae:	bf 90       	pop	r11
     2b0:	af 90       	pop	r10
     2b2:	08 95       	ret

000002b4 <decreaseValue>:
// Decrease frequency with 1 Hz
void decreaseValue(GUI *self, int pulseGenerator) {
     2b4:	cf 92       	push	r12
     2b6:	df 92       	push	r13
     2b8:	ef 92       	push	r14
     2ba:	ff 92       	push	r15
     2bc:	0f 93       	push	r16
     2be:	1f 93       	push	r17
	if(pulseGenerator == 0) {
     2c0:	67 2b       	or	r22, r23
     2c2:	a1 f4       	brne	.+40     	; 0x2ec <decreaseValue+0x38>
		ASYNC(self->generator1, decreaseFrequency, 0);
     2c4:	fc 01       	movw	r30, r24
     2c6:	07 81       	ldd	r16, Z+7	; 0x07
     2c8:	10 85       	ldd	r17, Z+8	; 0x08
     2ca:	c1 2c       	mov	r12, r1
     2cc:	d1 2c       	mov	r13, r1
     2ce:	0f 2e       	mov	r0, r31
     2d0:	fd ec       	ldi	r31, 0xCD	; 205
     2d2:	ef 2e       	mov	r14, r31
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	ff 2e       	mov	r15, r31
     2d8:	f0 2d       	mov	r31, r0
     2da:	20 e0       	ldi	r18, 0x00	; 0
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	a9 01       	movw	r20, r18
     2e0:	60 e0       	ldi	r22, 0x00	; 0
     2e2:	70 e0       	ldi	r23, 0x00	; 0
     2e4:	cb 01       	movw	r24, r22
     2e6:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <async>
     2ea:	13 c0       	rjmp	.+38     	; 0x312 <decreaseValue+0x5e>
		} else {
		ASYNC(self->generator2, decreaseFrequency, 0);
     2ec:	fc 01       	movw	r30, r24
     2ee:	01 85       	ldd	r16, Z+9	; 0x09
     2f0:	12 85       	ldd	r17, Z+10	; 0x0a
     2f2:	c1 2c       	mov	r12, r1
     2f4:	d1 2c       	mov	r13, r1
     2f6:	0f 2e       	mov	r0, r31
     2f8:	fd ec       	ldi	r31, 0xCD	; 205
     2fa:	ef 2e       	mov	r14, r31
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	ff 2e       	mov	r15, r31
     300:	f0 2d       	mov	r31, r0
     302:	20 e0       	ldi	r18, 0x00	; 0
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	a9 01       	movw	r20, r18
     308:	60 e0       	ldi	r22, 0x00	; 0
     30a:	70 e0       	ldi	r23, 0x00	; 0
     30c:	cb 01       	movw	r24, r22
     30e:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <async>
	}
}
     312:	1f 91       	pop	r17
     314:	0f 91       	pop	r16
     316:	ff 90       	pop	r15
     318:	ef 90       	pop	r14
     31a:	df 90       	pop	r13
     31c:	cf 90       	pop	r12
     31e:	08 95       	ret

00000320 <repeatDecrease>:
// Repeat decrease in frequency until button is no longer pressed
void repeatDecrease(GUI *self, int pulseGenerator) {
     320:	af 92       	push	r10
     322:	bf 92       	push	r11
     324:	cf 92       	push	r12
     326:	df 92       	push	r13
     328:	ef 92       	push	r14
     32a:	ff 92       	push	r15
     32c:	0f 93       	push	r16
     32e:	1f 93       	push	r17
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
	if(((PINB >> 7) & 1) == 0 && self->firstpress == false) {
     334:	1f 99       	sbic	0x03, 7	; 3
     336:	36 c0       	rjmp	.+108    	; 0x3a4 <repeatDecrease+0x84>
     338:	fc 01       	movw	r30, r24
     33a:	23 85       	ldd	r18, Z+11	; 0x0b
     33c:	21 11       	cpse	r18, r1
     33e:	32 c0       	rjmp	.+100    	; 0x3a4 <repeatDecrease+0x84>
     340:	5b 01       	movw	r10, r22
		ASYNC(self, decreaseValue, pulseGenerator);
     342:	6b 01       	movw	r12, r22
     344:	0f 2e       	mov	r0, r31
     346:	fa e5       	ldi	r31, 0x5A	; 90
     348:	ef 2e       	mov	r14, r31
     34a:	f1 e0       	ldi	r31, 0x01	; 1
     34c:	ff 2e       	mov	r15, r31
     34e:	f0 2d       	mov	r31, r0
     350:	8c 01       	movw	r16, r24
     352:	20 e0       	ldi	r18, 0x00	; 0
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	a9 01       	movw	r20, r18
     358:	60 e0       	ldi	r22, 0x00	; 0
     35a:	70 e0       	ldi	r23, 0x00	; 0
     35c:	cb 01       	movw	r24, r22
     35e:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <async>
		ASYNC(self, update_values, 0);
     362:	c1 2c       	mov	r12, r1
     364:	d1 2c       	mov	r13, r1
     366:	0f 2e       	mov	r0, r31
     368:	f1 eb       	ldi	r31, 0xB1	; 177
     36a:	ef 2e       	mov	r14, r31
     36c:	f2 e0       	ldi	r31, 0x02	; 2
     36e:	ff 2e       	mov	r15, r31
     370:	f0 2d       	mov	r31, r0
     372:	20 e0       	ldi	r18, 0x00	; 0
     374:	30 e0       	ldi	r19, 0x00	; 0
     376:	a9 01       	movw	r20, r18
     378:	60 e0       	ldi	r22, 0x00	; 0
     37a:	70 e0       	ldi	r23, 0x00	; 0
     37c:	cb 01       	movw	r24, r22
     37e:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <async>
		AFTER(MSEC(400), self, repeatDecrease, pulseGenerator);
     382:	65 01       	movw	r12, r10
     384:	0f 2e       	mov	r0, r31
     386:	f0 e9       	ldi	r31, 0x90	; 144
     388:	ef 2e       	mov	r14, r31
     38a:	f1 e0       	ldi	r31, 0x01	; 1
     38c:	ff 2e       	mov	r15, r31
     38e:	f0 2d       	mov	r31, r0
     390:	20 e0       	ldi	r18, 0x00	; 0
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	a9 01       	movw	r20, r18
     396:	64 ed       	ldi	r22, 0xD4	; 212
     398:	70 e3       	ldi	r23, 0x30	; 48
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <async>
     3a2:	03 c0       	rjmp	.+6      	; 0x3aa <repeatDecrease+0x8a>
	} else {
		self->firstpress = true;
     3a4:	21 e0       	ldi	r18, 0x01	; 1
     3a6:	fc 01       	movw	r30, r24
     3a8:	23 87       	std	Z+11, r18	; 0x0b
	}
}
     3aa:	df 91       	pop	r29
     3ac:	cf 91       	pop	r28
     3ae:	1f 91       	pop	r17
     3b0:	0f 91       	pop	r16
     3b2:	ff 90       	pop	r15
     3b4:	ef 90       	pop	r14
     3b6:	df 90       	pop	r13
     3b8:	cf 90       	pop	r12
     3ba:	bf 90       	pop	r11
     3bc:	af 90       	pop	r10
     3be:	08 95       	ret

000003c0 <digitLookUp>:
#include "TinyTimber.h"

#include "GUI.h"
#include "Generator.h"

uint16_t digitLookUp(GUI *self, uint8_t c) {
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	cd b7       	in	r28, 0x3d	; 61
     3c6:	de b7       	in	r29, 0x3e	; 62
     3c8:	64 97       	sbiw	r28, 0x14	; 20
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	f8 94       	cli
     3ce:	de bf       	out	0x3e, r29	; 62
     3d0:	0f be       	out	0x3f, r0	; 63
     3d2:	cd bf       	out	0x3d, r28	; 61

	if(c < 48 || c > 57) {
     3d4:	80 ed       	ldi	r24, 0xD0	; 208
     3d6:	86 0f       	add	r24, r22
     3d8:	8a 30       	cpi	r24, 0x0A	; 10
     3da:	90 f5       	brcc	.+100    	; 0x440 <__DATA_REGION_LENGTH__+0x40>
		return 0;
	}

	uint16_t binary[10];

	binary[0] = 0b0001010101010001; // 0
     3dc:	81 e5       	ldi	r24, 0x51	; 81
     3de:	95 e1       	ldi	r25, 0x15	; 21
     3e0:	9a 83       	std	Y+2, r25	; 0x02
     3e2:	89 83       	std	Y+1, r24	; 0x01
	binary[1] = 0b0000000100010000; // 1
     3e4:	80 e1       	ldi	r24, 0x10	; 16
     3e6:	91 e0       	ldi	r25, 0x01	; 1
     3e8:	9c 83       	std	Y+4, r25	; 0x04
     3ea:	8b 83       	std	Y+3, r24	; 0x03
	binary[2] = 0b0001000111100001; // 2
     3ec:	81 ee       	ldi	r24, 0xE1	; 225
     3ee:	91 e1       	ldi	r25, 0x11	; 17
     3f0:	9e 83       	std	Y+6, r25	; 0x06
     3f2:	8d 83       	std	Y+5, r24	; 0x05
	binary[3] = 0b0001000110110001; // 3
     3f4:	81 eb       	ldi	r24, 0xB1	; 177
     3f6:	91 e1       	ldi	r25, 0x11	; 17
     3f8:	98 87       	std	Y+8, r25	; 0x08
     3fa:	8f 83       	std	Y+7, r24	; 0x07
	binary[4] = 0b0000010110110000; // 4
     3fc:	80 eb       	ldi	r24, 0xB0	; 176
     3fe:	95 e0       	ldi	r25, 0x05	; 5
     400:	9a 87       	std	Y+10, r25	; 0x0a
     402:	89 87       	std	Y+9, r24	; 0x09
	binary[5] = 0b0001010010110001; // 5
     404:	81 eb       	ldi	r24, 0xB1	; 177
     406:	94 e1       	ldi	r25, 0x14	; 20
     408:	9c 87       	std	Y+12, r25	; 0x0c
     40a:	8b 87       	std	Y+11, r24	; 0x0b
	binary[6] = 0b0001010011110001; // 6
     40c:	81 ef       	ldi	r24, 0xF1	; 241
     40e:	94 e1       	ldi	r25, 0x14	; 20
     410:	9e 87       	std	Y+14, r25	; 0x0e
     412:	8d 87       	std	Y+13, r24	; 0x0d
	binary[7] = 0b0001000100010000; // 7
     414:	80 e1       	ldi	r24, 0x10	; 16
     416:	91 e1       	ldi	r25, 0x11	; 17
     418:	98 8b       	std	Y+16, r25	; 0x10
     41a:	8f 87       	std	Y+15, r24	; 0x0f
	binary[8] = 0b0001010111110001; // 8
     41c:	81 ef       	ldi	r24, 0xF1	; 241
     41e:	95 e1       	ldi	r25, 0x15	; 21
     420:	9a 8b       	std	Y+18, r25	; 0x12
     422:	89 8b       	std	Y+17, r24	; 0x11
	binary[9] = 0b0001010110110000; // 9
     424:	80 eb       	ldi	r24, 0xB0	; 176
     426:	95 e1       	ldi	r25, 0x15	; 21
     428:	9c 8b       	std	Y+20, r25	; 0x14
     42a:	8b 8b       	std	Y+19, r24	; 0x13
	binary[10] = '\0';

	return binary[(c - 48)];
     42c:	e6 2f       	mov	r30, r22
     42e:	f0 e0       	ldi	r31, 0x00	; 0
     430:	f0 97       	sbiw	r30, 0x30	; 48
     432:	ee 0f       	add	r30, r30
     434:	ff 1f       	adc	r31, r31
     436:	ec 0f       	add	r30, r28
     438:	fd 1f       	adc	r31, r29
     43a:	81 81       	ldd	r24, Z+1	; 0x01
     43c:	92 81       	ldd	r25, Z+2	; 0x02
     43e:	02 c0       	rjmp	.+4      	; 0x444 <__DATA_REGION_LENGTH__+0x44>
#include "Generator.h"

uint16_t digitLookUp(GUI *self, uint8_t c) {

	if(c < 48 || c > 57) {
		return 0;
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	90 e0       	ldi	r25, 0x00	; 0
	binary[8] = 0b0001010111110001; // 8
	binary[9] = 0b0001010110110000; // 9
	binary[10] = '\0';

	return binary[(c - 48)];
}
     444:	64 96       	adiw	r28, 0x14	; 20
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	f8 94       	cli
     44a:	de bf       	out	0x3e, r29	; 62
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	cd bf       	out	0x3d, r28	; 61
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	08 95       	ret

00000456 <writeChar>:

void writeChar(GUI *self, char ch, int pos) {
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
	// If pos is less than zero or greater than 5, do nothing
	if(pos < 0 || pos > 5) {
     45a:	46 30       	cpi	r20, 0x06	; 6
     45c:	51 05       	cpc	r21, r1
     45e:	e0 f5       	brcc	.+120    	; 0x4d8 <writeChar+0x82>
     460:	ea 01       	movw	r28, r20

	uint16_t digitBinary = 0;
	uint8_t nibble_0 = 0, nibble_1 = 0, nibble_2 = 0, nibble_3 = 0, oldValue = 0, mask = 0, increment = 0;

	// Fetch the value needed to display number "ch" in LCDDRx
	digitBinary = digitLookUp(self, ch);
     462:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <digitLookUp>

	// Bitshift 1 bit to get valid values for incrementing the pointer
	increment = pos >> 1;
     466:	fe 01       	movw	r30, r28
     468:	f5 95       	asr	r31
     46a:	e7 95       	ror	r30

	// Depending on if the value of pos is even or odd we adjust the nibbles
	// and mask correctly
	if((pos % 2) == 0) {
     46c:	c0 fd       	sbrc	r28, 0
     46e:	11 c0       	rjmp	.+34     	; 0x492 <writeChar+0x3c>
		nibble_0 = 0b00001111 & (digitBinary >> 12);
     470:	59 2f       	mov	r21, r25
     472:	52 95       	swap	r21
     474:	5f 70       	andi	r21, 0x0F	; 15
		nibble_1 = 0b00001111 & (digitBinary >> 8);
     476:	49 2f       	mov	r20, r25
     478:	4f 70       	andi	r20, 0x0F	; 15
		nibble_2 = 0b00001111 & (digitBinary >> 4);
     47a:	9c 01       	movw	r18, r24
     47c:	32 95       	swap	r19
     47e:	22 95       	swap	r18
     480:	2f 70       	andi	r18, 0x0F	; 15
     482:	23 27       	eor	r18, r19
     484:	3f 70       	andi	r19, 0x0F	; 15
     486:	23 27       	eor	r18, r19
     488:	32 2f       	mov	r19, r18
     48a:	3f 70       	andi	r19, 0x0F	; 15
		nibble_3 = 0b00001111 & digitBinary;
     48c:	8f 70       	andi	r24, 0x0F	; 15
		// This mask is needed to preserve what is on the right side of
		// LCDDRx
		mask = 0b11110000;
     48e:	90 ef       	ldi	r25, 0xF0	; 240
     490:	10 c0       	rjmp	.+32     	; 0x4b2 <writeChar+0x5c>
		} else {
		nibble_0 = 0b11110000 & (digitBinary >> 8);
     492:	59 2f       	mov	r21, r25
     494:	50 7f       	andi	r21, 0xF0	; 240
		nibble_1 = 0b11110000 & (digitBinary >> 4);
     496:	9c 01       	movw	r18, r24
     498:	32 95       	swap	r19
     49a:	22 95       	swap	r18
     49c:	2f 70       	andi	r18, 0x0F	; 15
     49e:	23 27       	eor	r18, r19
     4a0:	3f 70       	andi	r19, 0x0F	; 15
     4a2:	23 27       	eor	r18, r19
     4a4:	42 2f       	mov	r20, r18
     4a6:	40 7f       	andi	r20, 0xF0	; 240
		nibble_2 = 0b11110000 & digitBinary;
     4a8:	38 2f       	mov	r19, r24
     4aa:	30 7f       	andi	r19, 0xF0	; 240
		nibble_3 = 0b11110000 & (digitBinary << 4);
     4ac:	82 95       	swap	r24
     4ae:	80 7f       	andi	r24, 0xF0	; 240
		// Mask needed to preserve what is on the left side of LCDDRx
		mask = 0b00001111;
     4b0:	9f e0       	ldi	r25, 0x0F	; 15
	// Create a pointer and assign the memory address of LCDDR0
	// (is volatile really needed?)
	volatile uint8_t *LCDDRAddress = &LCDDR0;
	// Increment the pointers memory address with the value calculated earlier
	// This is needed to be able to use LCDDR0+x, LCDDR1+x, LCDDR2+x etc.
	LCDDRAddress = (LCDDRAddress + increment);
     4b2:	ff 27       	eor	r31, r31
     4b4:	e4 51       	subi	r30, 0x14	; 20
     4b6:	ff 4f       	sbci	r31, 0xFF	; 255
	// Preserve the old value by using a mask
	oldValue = mask & *LCDDRAddress;
     4b8:	20 81       	ld	r18, Z
	// Add the nibble using OR
	*LCDDRAddress = oldValue | nibble_0;
     4ba:	29 23       	and	r18, r25
     4bc:	25 2b       	or	r18, r21
     4be:	20 83       	st	Z, r18
	// Increase the memory address of the pointer with 5 to be able to
	// use LCDDRx+5
	LCDDRAddress = LCDDRAddress + 5;

	oldValue = mask & *LCDDRAddress;
     4c0:	25 81       	ldd	r18, Z+5	; 0x05
	*LCDDRAddress = oldValue | nibble_1;
     4c2:	29 23       	and	r18, r25
     4c4:	24 2b       	or	r18, r20
     4c6:	25 83       	std	Z+5, r18	; 0x05
	// Increase with 5 to be able to use LCDDRx+10
	LCDDRAddress = LCDDRAddress + 5;

	oldValue = mask & *LCDDRAddress;
     4c8:	22 85       	ldd	r18, Z+10	; 0x0a
	*LCDDRAddress = oldValue | nibble_2;
     4ca:	29 23       	and	r18, r25
     4cc:	23 2b       	or	r18, r19
     4ce:	22 87       	std	Z+10, r18	; 0x0a
	// Increase with 5 to be able to use LCDDRx+15
	LCDDRAddress = LCDDRAddress + 5;

	oldValue = mask & *LCDDRAddress;
     4d0:	27 85       	ldd	r18, Z+15	; 0x0f
	*LCDDRAddress = oldValue | nibble_3;
     4d2:	92 23       	and	r25, r18
     4d4:	89 2b       	or	r24, r25
     4d6:	87 87       	std	Z+15, r24	; 0x0f

}
     4d8:	df 91       	pop	r29
     4da:	cf 91       	pop	r28
     4dc:	08 95       	ret

000004de <printAt>:

void printAt(GUI *self, long num, int pos) {
     4de:	8f 92       	push	r8
     4e0:	9f 92       	push	r9
     4e2:	af 92       	push	r10
     4e4:	bf 92       	push	r11
     4e6:	cf 92       	push	r12
     4e8:	df 92       	push	r13
     4ea:	ef 92       	push	r14
     4ec:	ff 92       	push	r15
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	8c 01       	movw	r16, r24
     4f8:	4a 01       	movw	r8, r20
     4fa:	5b 01       	movw	r10, r22
     4fc:	e9 01       	movw	r28, r18
    int pp = pos;
    writeChar(self, (num % 100) / 10 + '0', pp);
     4fe:	cb 01       	movw	r24, r22
     500:	ba 01       	movw	r22, r20
     502:	24 e6       	ldi	r18, 0x64	; 100
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	40 e0       	ldi	r20, 0x00	; 0
     508:	50 e0       	ldi	r21, 0x00	; 0
     50a:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__divmodsi4>
     50e:	0f 2e       	mov	r0, r31
     510:	fa e0       	ldi	r31, 0x0A	; 10
     512:	cf 2e       	mov	r12, r31
     514:	d1 2c       	mov	r13, r1
     516:	e1 2c       	mov	r14, r1
     518:	f1 2c       	mov	r15, r1
     51a:	f0 2d       	mov	r31, r0
     51c:	a7 01       	movw	r20, r14
     51e:	96 01       	movw	r18, r12
     520:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__divmodsi4>
     524:	60 e3       	ldi	r22, 0x30	; 48
     526:	62 0f       	add	r22, r18
     528:	ae 01       	movw	r20, r28
     52a:	c8 01       	movw	r24, r16
     52c:	0e 94 2b 02 	call	0x456	; 0x456 <writeChar>
    pp++;
    writeChar(self, num % 10 + '0', pp);
     530:	21 96       	adiw	r28, 0x01	; 1
     532:	c5 01       	movw	r24, r10
     534:	b4 01       	movw	r22, r8
     536:	a7 01       	movw	r20, r14
     538:	96 01       	movw	r18, r12
     53a:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__divmodsi4>
     53e:	60 5d       	subi	r22, 0xD0	; 208
     540:	ae 01       	movw	r20, r28
     542:	c8 01       	movw	r24, r16
     544:	0e 94 2b 02 	call	0x456	; 0x456 <writeChar>
}
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	1f 91       	pop	r17
     54e:	0f 91       	pop	r16
     550:	ff 90       	pop	r15
     552:	ef 90       	pop	r14
     554:	df 90       	pop	r13
     556:	cf 90       	pop	r12
     558:	bf 90       	pop	r11
     55a:	af 90       	pop	r10
     55c:	9f 90       	pop	r9
     55e:	8f 90       	pop	r8
     560:	08 95       	ret

00000562 <update_values>:

// Update the values on the LCD display
void update_values(GUI *self) {
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	ec 01       	movw	r28, r24
	uint8_t mask;
	uint8_t temp;
	// Display current values for Generator 1 and 2
	printAt(self, self->generator1->CurrentHzValue, 0);
     568:	ef 81       	ldd	r30, Y+7	; 0x07
     56a:	f8 85       	ldd	r31, Y+8	; 0x08
     56c:	46 81       	ldd	r20, Z+6	; 0x06
     56e:	50 e0       	ldi	r21, 0x00	; 0
     570:	60 e0       	ldi	r22, 0x00	; 0
     572:	70 e0       	ldi	r23, 0x00	; 0
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	0e 94 6f 02 	call	0x4de	; 0x4de <printAt>
	printAt(self, self->generator2->CurrentHzValue, 4);
     57c:	e9 85       	ldd	r30, Y+9	; 0x09
     57e:	fa 85       	ldd	r31, Y+10	; 0x0a
     580:	46 81       	ldd	r20, Z+6	; 0x06
     582:	50 e0       	ldi	r21, 0x00	; 0
     584:	60 e0       	ldi	r22, 0x00	; 0
     586:	70 e0       	ldi	r23, 0x00	; 0
     588:	24 e0       	ldi	r18, 0x04	; 4
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	ce 01       	movw	r24, r28
     58e:	0e 94 6f 02 	call	0x4de	; 0x4de <printAt>

	// LCDDR0 0b00000100 = 1
	// LCDDR0 0b01000000 = 2
	// If Generator 1 then show a symbol 1 for that generator (S1)
	// otherwise symbol 2 (S2)
	if(self->whichPulse == 0) {
     592:	8e 81       	ldd	r24, Y+6	; 0x06
     594:	81 11       	cpse	r24, r1
     596:	09 c0       	rjmp	.+18     	; 0x5aa <update_values+0x48>
		LCDDR0 = LCDDR0 | 0b00000100;
     598:	ec ee       	ldi	r30, 0xEC	; 236
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	80 81       	ld	r24, Z
     59e:	84 60       	ori	r24, 0x04	; 4
     5a0:	80 83       	st	Z, r24
		mask = 0b10111111;
		temp = LCDDR0 & mask;
     5a2:	80 81       	ld	r24, Z
     5a4:	8f 7b       	andi	r24, 0xBF	; 191
		LCDDR0 = temp;
     5a6:	80 83       	st	Z, r24
     5a8:	08 c0       	rjmp	.+16     	; 0x5ba <update_values+0x58>
		//LCDDR0 = LCDDR0 ^ 0b01000000;
	} else {
		LCDDR0 = LCDDR0 | 0b01000000;
     5aa:	ec ee       	ldi	r30, 0xEC	; 236
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	80 81       	ld	r24, Z
     5b0:	80 64       	ori	r24, 0x40	; 64
     5b2:	80 83       	st	Z, r24
		mask = 0b11111011;
		temp = LCDDR0 & mask;
     5b4:	80 81       	ld	r24, Z
     5b6:	8b 7f       	andi	r24, 0xFB	; 251
		LCDDR0 = temp;
     5b8:	80 83       	st	Z, r24
	}
}
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	08 95       	ret

000005c0 <init_io>:
#include <avr/interrupt.h>
#include "init_io.h"

void init_io() {
	// Up, Down and Center
	PORTB = (1<<PB7) | (1<<PB6) | (1<<PB4);
     5c0:	90 ed       	ldi	r25, 0xD0	; 208
     5c2:	95 b9       	out	0x05, r25	; 5
	// Left and Right
	PORTE = (1<<PE3) | (1<<PE2);
     5c4:	8c e0       	ldi	r24, 0x0C	; 12
     5c6:	8e b9       	out	0x0e, r24	; 14
	
	// Set PIN 6 and 4 on PORT E as output
	DDRE = (1<<DDE6) | (1<<DDE4);
     5c8:	20 e5       	ldi	r18, 0x50	; 80
     5ca:	2d b9       	out	0x0d, r18	; 13

	// Pin Change Enable Mask (Up, Down and Center on joystick)
	PCMSK1 = (1<<PCINT15) | (1 << PCINT14) | (1<<PCINT12);
     5cc:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <__TEXT_REGION_LENGTH__+0x7fc06c>
	// Pin change Enable Mask (Left and Right on joystick)
	PCMSK0 = (1<<PCINT3) | (1<<PCINT2);
     5d0:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7fc06b>

	// External Interrupt Mask Register (EIMSK)
	EIMSK = (1<<PCIE1) | (1<<PCIE0);
     5d4:	80 ec       	ldi	r24, 0xC0	; 192
     5d6:	8d bb       	out	0x1d, r24	; 29
     5d8:	08 95       	ret

000005da <init_lcd>:

#include "init_lcd.h"

void init_lcd() {
	// LCD Enable (LCDEN) & Low Power Waveform (LCDAB)
	LCDCRA = (1<<LCDEN) | (1<<LCDAB) | (0<<LCDIF) | (0<<LCDIE) | (0<<LCDBL);
     5da:	80 ec       	ldi	r24, 0xC0	; 192
     5dc:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>

	// external asynchronous clock source (LCDCS), 1/3 bias (LCD2B), 1/4 duty (LCDMUX1:0), 25 segments enabled (LCDPM2:0)
	LCDCRB = (1<<LCDCS) | (0<<LCD2B) | (1<<LCDMUX1) | (1<<LCDMUX0) | (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
     5e0:	87 eb       	ldi	r24, 0xB7	; 183
     5e2:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>

	// prescaler setting N=16 (LCDPS2:0), clock divider setting D=8 (LCDCD2:0)
	LCDFRR = (0<<LCDPS2) | (0<<LCDPS1) | (0<<LCDPS0) | (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
     5e6:	87 e0       	ldi	r24, 0x07	; 7
     5e8:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>

	// drive time 300 microseconds (LCDDC2:0), contrast control voltage 3.35 V (LCDCC3:0)
	LCDCCR = (0<<LCDDC2) | (0<<LCDDC1) | (0<<LCDDC0) | (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1) | (1<<LCDCC0);
     5ec:	8f e0       	ldi	r24, 0x0F	; 15
     5ee:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
     5f2:	08 95       	ret

000005f4 <joystickInterrupt>:

#include "TinyTimber.h"
#include "Joystick.h"
#include "GUI.h"

void joystickInterrupt(Joystick *self) {
     5f4:	cf 92       	push	r12
     5f6:	df 92       	push	r13
     5f8:	ef 92       	push	r14
     5fa:	ff 92       	push	r15
     5fc:	0f 93       	push	r16
     5fe:	1f 93       	push	r17
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	ec 01       	movw	r28, r24
	// Update the display
	ASYNC(self->gui, update_values, 0);
     606:	0c 81       	ldd	r16, Y+4	; 0x04
     608:	1d 81       	ldd	r17, Y+5	; 0x05
     60a:	c1 2c       	mov	r12, r1
     60c:	d1 2c       	mov	r13, r1
     60e:	0f 2e       	mov	r0, r31
     610:	f1 eb       	ldi	r31, 0xB1	; 177
     612:	ef 2e       	mov	r14, r31
     614:	f2 e0       	ldi	r31, 0x02	; 2
     616:	ff 2e       	mov	r15, r31
     618:	f0 2d       	mov	r31, r0
     61a:	20 e0       	ldi	r18, 0x00	; 0
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	a9 01       	movw	r20, r18
     620:	60 e0       	ldi	r22, 0x00	; 0
     622:	70 e0       	ldi	r23, 0x00	; 0
     624:	cb 01       	movw	r24, r22
     626:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <async>
	
	//  If Up or Down is pressed
	if(((PINB >> 6) & 1) == 0) {
     62a:	1e 99       	sbic	0x03, 6	; 3
     62c:	17 c0       	rjmp	.+46     	; 0x65c <joystickInterrupt+0x68>
		// Repeat until button is no longer pressed
		self->gui->firstpress = false;
     62e:	ec 81       	ldd	r30, Y+4	; 0x04
     630:	fd 81       	ldd	r31, Y+5	; 0x05
     632:	13 86       	std	Z+11, r1	; 0x0b
		ASYNC(self->gui, repeatIncrease, self->gui->whichPulse );
     634:	0c 81       	ldd	r16, Y+4	; 0x04
     636:	1d 81       	ldd	r17, Y+5	; 0x05
     638:	f8 01       	movw	r30, r16
     63a:	c6 80       	ldd	r12, Z+6	; 0x06
     63c:	d1 2c       	mov	r13, r1
     63e:	0f 2e       	mov	r0, r31
     640:	fa e0       	ldi	r31, 0x0A	; 10
     642:	ef 2e       	mov	r14, r31
     644:	f1 e0       	ldi	r31, 0x01	; 1
     646:	ff 2e       	mov	r15, r31
     648:	f0 2d       	mov	r31, r0
     64a:	20 e0       	ldi	r18, 0x00	; 0
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	a9 01       	movw	r20, r18
     650:	60 e0       	ldi	r22, 0x00	; 0
     652:	70 e0       	ldi	r23, 0x00	; 0
     654:	cb 01       	movw	r24, r22
     656:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <async>
     65a:	18 c0       	rjmp	.+48     	; 0x68c <joystickInterrupt+0x98>
	} else if(((PINB >> 7) & 1) == 0) {
     65c:	1f 99       	sbic	0x03, 7	; 3
     65e:	16 c0       	rjmp	.+44     	; 0x68c <joystickInterrupt+0x98>
		self->gui->firstpress = false;
     660:	ec 81       	ldd	r30, Y+4	; 0x04
     662:	fd 81       	ldd	r31, Y+5	; 0x05
     664:	13 86       	std	Z+11, r1	; 0x0b
		ASYNC(self->gui, repeatDecrease, self->gui->whichPulse );
     666:	0c 81       	ldd	r16, Y+4	; 0x04
     668:	1d 81       	ldd	r17, Y+5	; 0x05
     66a:	f8 01       	movw	r30, r16
     66c:	c6 80       	ldd	r12, Z+6	; 0x06
     66e:	d1 2c       	mov	r13, r1
     670:	0f 2e       	mov	r0, r31
     672:	f0 e9       	ldi	r31, 0x90	; 144
     674:	ef 2e       	mov	r14, r31
     676:	f1 e0       	ldi	r31, 0x01	; 1
     678:	ff 2e       	mov	r15, r31
     67a:	f0 2d       	mov	r31, r0
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	a9 01       	movw	r20, r18
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	cb 01       	movw	r24, r22
     688:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <async>
	}

	// If Center is pressed, save frequency and reset
	if(((PINB >> 4) & 1) == 0) {
     68c:	1c 99       	sbic	0x03, 4	; 3
     68e:	2a c0       	rjmp	.+84     	; 0x6e4 <joystickInterrupt+0xf0>
		if(self->gui->whichPulse == 0) {
     690:	ec 81       	ldd	r30, Y+4	; 0x04
     692:	fd 81       	ldd	r31, Y+5	; 0x05
     694:	86 81       	ldd	r24, Z+6	; 0x06
     696:	81 11       	cpse	r24, r1
     698:	13 c0       	rjmp	.+38     	; 0x6c0 <joystickInterrupt+0xcc>
			ASYNC(self->gui->generator1, updatePulseValue, 0);
     69a:	07 81       	ldd	r16, Z+7	; 0x07
     69c:	10 85       	ldd	r17, Z+8	; 0x08
     69e:	c1 2c       	mov	r12, r1
     6a0:	d1 2c       	mov	r13, r1
     6a2:	0f 2e       	mov	r0, r31
     6a4:	f1 ea       	ldi	r31, 0xA1	; 161
     6a6:	ef 2e       	mov	r14, r31
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	ff 2e       	mov	r15, r31
     6ac:	f0 2d       	mov	r31, r0
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	a9 01       	movw	r20, r18
     6b4:	60 e0       	ldi	r22, 0x00	; 0
     6b6:	70 e0       	ldi	r23, 0x00	; 0
     6b8:	cb 01       	movw	r24, r22
     6ba:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <async>
     6be:	12 c0       	rjmp	.+36     	; 0x6e4 <joystickInterrupt+0xf0>
		} else {
			ASYNC(self->gui->generator2, updatePulseValue, 0);
     6c0:	01 85       	ldd	r16, Z+9	; 0x09
     6c2:	12 85       	ldd	r17, Z+10	; 0x0a
     6c4:	c1 2c       	mov	r12, r1
     6c6:	d1 2c       	mov	r13, r1
     6c8:	0f 2e       	mov	r0, r31
     6ca:	f1 ea       	ldi	r31, 0xA1	; 161
     6cc:	ef 2e       	mov	r14, r31
     6ce:	f0 e0       	ldi	r31, 0x00	; 0
     6d0:	ff 2e       	mov	r15, r31
     6d2:	f0 2d       	mov	r31, r0
     6d4:	20 e0       	ldi	r18, 0x00	; 0
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	a9 01       	movw	r20, r18
     6da:	60 e0       	ldi	r22, 0x00	; 0
     6dc:	70 e0       	ldi	r23, 0x00	; 0
     6de:	cb 01       	movw	r24, r22
     6e0:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <async>
		}
	}

	// If Left or Right is pressed then change active pulse generator input
	if(((PINE >> 2) & 1) == 0) {
     6e4:	62 99       	sbic	0x0c, 2	; 12
     6e6:	04 c0       	rjmp	.+8      	; 0x6f0 <joystickInterrupt+0xfc>
		self->gui->whichPulse = 0;
     6e8:	ec 81       	ldd	r30, Y+4	; 0x04
     6ea:	fd 81       	ldd	r31, Y+5	; 0x05
     6ec:	16 82       	std	Z+6, r1	; 0x06
     6ee:	06 c0       	rjmp	.+12     	; 0x6fc <joystickInterrupt+0x108>
	} else if(((PINE >> 3) & 1) == 0) {
     6f0:	63 99       	sbic	0x0c, 3	; 12
     6f2:	04 c0       	rjmp	.+8      	; 0x6fc <joystickInterrupt+0x108>
		self->gui->whichPulse = 1;
     6f4:	ec 81       	ldd	r30, Y+4	; 0x04
     6f6:	fd 81       	ldd	r31, Y+5	; 0x05
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	86 83       	std	Z+6, r24	; 0x06
	}
}
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	1f 91       	pop	r17
     702:	0f 91       	pop	r16
     704:	ff 90       	pop	r15
     706:	ef 90       	pop	r14
     708:	df 90       	pop	r13
     70a:	cf 90       	pop	r12
     70c:	08 95       	ret

0000070e <main>:
Joystick joy = initJoystick(&gui);

int main(void)
{
	// Setup the clockspeed
	CLKPR  = 0x80;
     70e:	e1 e6       	ldi	r30, 0x61	; 97
     710:	f0 e0       	ldi	r31, 0x00	; 0
     712:	80 e8       	ldi	r24, 0x80	; 128
     714:	80 83       	st	Z, r24
	CLKPR  = 0x00;
     716:	10 82       	st	Z, r1

	// Initialize LCD and input/output
	init_lcd();
     718:	0e 94 ed 02 	call	0x5da	; 0x5da <init_lcd>
	init_io();
     71c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <init_io>

	// Install interrupts for joystick
	INSTALL(&joy, joystickInterrupt, IRQ_PCINT0);
     720:	41 e0       	ldi	r20, 0x01	; 1
     722:	6a ef       	ldi	r22, 0xFA	; 250
     724:	72 e0       	ldi	r23, 0x02	; 2
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	91 e0       	ldi	r25, 0x01	; 1
     72a:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <install>
	INSTALL(&joy, joystickInterrupt, IRQ_PCINT1);
     72e:	42 e0       	ldi	r20, 0x02	; 2
     730:	6a ef       	ldi	r22, 0xFA	; 250
     732:	72 e0       	ldi	r23, 0x02	; 2
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	91 e0       	ldi	r25, 0x01	; 1
     738:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <install>
	return TINYTIMBER(&gui, update_values, 0);
     73c:	40 e0       	ldi	r20, 0x00	; 0
     73e:	50 e0       	ldi	r21, 0x00	; 0
     740:	61 eb       	ldi	r22, 0xB1	; 177
     742:	72 e0       	ldi	r23, 0x02	; 2
     744:	87 e0       	ldi	r24, 0x07	; 7
     746:	91 e0       	ldi	r25, 0x01	; 1
     748:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <tinytimber>
}
     74c:	08 95       	ret

0000074e <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	00 d0       	rcall	.+0      	; 0x754 <initialize+0x6>
     754:	00 d0       	rcall	.+0      	; 0x756 <initialize+0x8>
     756:	cd b7       	in	r28, 0x3d	; 61
     758:	de b7       	in	r29, 0x3e	; 62
     75a:	87 e2       	ldi	r24, 0x27	; 39
     75c:	92 e0       	ldi	r25, 0x02	; 2
     75e:	27 e0       	ldi	r18, 0x07	; 7
     760:	33 e0       	ldi	r19, 0x03	; 3
     762:	fc 01       	movw	r30, r24
     764:	70 97       	sbiw	r30, 0x10	; 16
     766:	91 83       	std	Z+1, r25	; 0x01
     768:	80 83       	st	Z, r24
     76a:	40 96       	adiw	r24, 0x10	; 16
     76c:	82 17       	cp	r24, r18
     76e:	93 07       	cpc	r25, r19
     770:	c1 f7       	brne	.-16     	; 0x762 <initialize+0x14>
     772:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <messages+0xe1>
     776:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <messages+0xe0>
     77a:	e2 e6       	ldi	r30, 0x62	; 98
     77c:	f1 e0       	ldi	r31, 0x01	; 1
     77e:	8f e7       	ldi	r24, 0x7F	; 127
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	91 83       	std	Z+1, r25	; 0x01
     784:	80 83       	st	Z, r24
     786:	8c e9       	ldi	r24, 0x9C	; 156
     788:	91 e0       	ldi	r25, 0x01	; 1
     78a:	96 8f       	std	Z+30, r25	; 0x1e
     78c:	85 8f       	std	Z+29, r24	; 0x1d
     78e:	a9 eb       	ldi	r26, 0xB9	; 185
     790:	b1 e0       	ldi	r27, 0x01	; 1
     792:	b3 af       	std	Z+59, r27	; 0x3b
     794:	a2 af       	std	Z+58, r26	; 0x3a
     796:	1d 92       	st	X+, r1
     798:	1c 92       	st	X, r1
     79a:	fa 83       	std	Y+2, r31	; 0x02
     79c:	e9 83       	std	Y+1, r30	; 0x01
     79e:	e3 e6       	ldi	r30, 0x63	; 99
     7a0:	f3 e0       	ldi	r31, 0x03	; 3
     7a2:	fc 83       	std	Y+4, r31	; 0x04
     7a4:	eb 83       	std	Y+3, r30	; 0x03
     7a6:	89 81       	ldd	r24, Y+1	; 0x01
     7a8:	9a 81       	ldd	r25, Y+2	; 0x02
     7aa:	06 96       	adiw	r24, 0x06	; 6
     7ac:	0e 94 3e 10 	call	0x207c	; 0x207c <setjmp>
     7b0:	8b 81       	ldd	r24, Y+3	; 0x03
     7b2:	9c 81       	ldd	r25, Y+4	; 0x04
     7b4:	e9 81       	ldd	r30, Y+1	; 0x01
     7b6:	fa 81       	ldd	r31, Y+2	; 0x02
     7b8:	97 8b       	std	Z+23, r25	; 0x17
     7ba:	86 8b       	std	Z+22, r24	; 0x16
     7bc:	91 8f       	std	Z+25, r25	; 0x19
     7be:	80 8f       	std	Z+24, r24	; 0x18
     7c0:	87 e4       	ldi	r24, 0x47	; 71
     7c2:	9f e0       	ldi	r25, 0x0F	; 15
     7c4:	94 8f       	std	Z+28, r25	; 0x1c
     7c6:	83 8f       	std	Z+27, r24	; 0x1b
     7c8:	15 82       	std	Z+5, r1	; 0x05
     7ca:	14 82       	std	Z+4, r1	; 0x04
     7cc:	7d 96       	adiw	r30, 0x1d	; 29
     7ce:	fa 83       	std	Y+2, r31	; 0x02
     7d0:	e9 83       	std	Y+1, r30	; 0x01
     7d2:	eb 81       	ldd	r30, Y+3	; 0x03
     7d4:	fc 81       	ldd	r31, Y+4	; 0x04
     7d6:	e0 5a       	subi	r30, 0xA0	; 160
     7d8:	ff 4f       	sbci	r31, 0xFF	; 255
     7da:	fc 83       	std	Y+4, r31	; 0x04
     7dc:	eb 83       	std	Y+3, r30	; 0x03
     7de:	89 81       	ldd	r24, Y+1	; 0x01
     7e0:	9a 81       	ldd	r25, Y+2	; 0x02
     7e2:	86 5d       	subi	r24, 0xD6	; 214
     7e4:	91 40       	sbci	r25, 0x01	; 1
     7e6:	f9 f6       	brne	.-66     	; 0x7a6 <initialize+0x58>
     7e8:	ea ef       	ldi	r30, 0xFA	; 250
     7ea:	f1 e0       	ldi	r31, 0x01	; 1
     7ec:	11 82       	std	Z+1, r1	; 0x01
     7ee:	10 82       	st	Z, r1
     7f0:	15 82       	std	Z+5, r1	; 0x05
     7f2:	14 82       	std	Z+4, r1	; 0x04
     7f4:	13 82       	std	Z+3, r1	; 0x03
     7f6:	12 82       	std	Z+2, r1	; 0x02
     7f8:	e1 e6       	ldi	r30, 0x61	; 97
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
     7fc:	80 e8       	ldi	r24, 0x80	; 128
     7fe:	80 83       	st	Z, r24
     800:	10 82       	st	Z, r1
     802:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     806:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     80a:	84 e0       	ldi	r24, 0x04	; 4
     80c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     816:	0f 90       	pop	r0
     818:	0f 90       	pop	r0
     81a:	0f 90       	pop	r0
     81c:	0f 90       	pop	r0
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	08 95       	ret

00000824 <dispatch>:
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	00 d0       	rcall	.+0      	; 0x82a <dispatch+0x6>
     82a:	cd b7       	in	r28, 0x3d	; 61
     82c:	de b7       	in	r29, 0x3e	; 62
     82e:	9a 83       	std	Y+2, r25	; 0x02
     830:	89 83       	std	Y+1, r24	; 0x01
     832:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <current>
     836:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <current+0x1>
     83a:	06 96       	adiw	r24, 0x06	; 6
     83c:	0e 94 3e 10 	call	0x207c	; 0x207c <setjmp>
     840:	89 2b       	or	r24, r25
     842:	59 f4       	brne	.+22     	; 0x85a <dispatch+0x36>
     844:	89 81       	ldd	r24, Y+1	; 0x01
     846:	9a 81       	ldd	r25, Y+2	; 0x02
     848:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <current+0x1>
     84c:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <current>
     850:	61 e0       	ldi	r22, 0x01	; 1
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	06 96       	adiw	r24, 0x06	; 6
     856:	0e 94 5e 10 	call	0x20bc	; 0x20bc <longjmp>
     85a:	0f 90       	pop	r0
     85c:	0f 90       	pop	r0
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	08 95       	ret

00000864 <schedule>:
     864:	0f 93       	push	r16
     866:	1f 93       	push	r17
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <msgQ>
     870:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <msgQ+0x1>
     874:	30 97       	sbiw	r30, 0x00	; 0
     876:	61 f1       	breq	.+88     	; 0x8d0 <schedule+0x6c>
     878:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <threadPool>
     87c:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <threadPool+0x1>
     880:	00 97       	sbiw	r24, 0x00	; 0
     882:	31 f1       	breq	.+76     	; 0x8d0 <schedule+0x6c>
     884:	c0 91 29 01 	lds	r28, 0x0129	; 0x800129 <activeStack>
     888:	d0 91 2a 01 	lds	r29, 0x012A	; 0x80012a <activeStack+0x1>
     88c:	aa 81       	ldd	r26, Y+2	; 0x02
     88e:	bb 81       	ldd	r27, Y+3	; 0x03
     890:	10 97       	sbiw	r26, 0x00	; 0
     892:	79 f0       	breq	.+30     	; 0x8b2 <schedule+0x4e>
     894:	46 81       	ldd	r20, Z+6	; 0x06
     896:	57 81       	ldd	r21, Z+7	; 0x07
     898:	60 85       	ldd	r22, Z+8	; 0x08
     89a:	71 85       	ldd	r23, Z+9	; 0x09
     89c:	16 96       	adiw	r26, 0x06	; 6
     89e:	0d 91       	ld	r16, X+
     8a0:	1d 91       	ld	r17, X+
     8a2:	2d 91       	ld	r18, X+
     8a4:	3c 91       	ld	r19, X
     8a6:	19 97       	sbiw	r26, 0x09	; 9
     8a8:	40 1b       	sub	r20, r16
     8aa:	51 0b       	sbc	r21, r17
     8ac:	62 0b       	sbc	r22, r18
     8ae:	73 0b       	sbc	r23, r19
     8b0:	7a f4       	brpl	.+30     	; 0x8d0 <schedule+0x6c>
     8b2:	fc 01       	movw	r30, r24
     8b4:	20 81       	ld	r18, Z
     8b6:	31 81       	ldd	r19, Z+1	; 0x01
     8b8:	30 93 2c 01 	sts	0x012C, r19	; 0x80012c <threadPool+0x1>
     8bc:	20 93 2b 01 	sts	0x012B, r18	; 0x80012b <threadPool>
     8c0:	d1 83       	std	Z+1, r29	; 0x01
     8c2:	c0 83       	st	Z, r28
     8c4:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <activeStack+0x1>
     8c8:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <activeStack>
     8cc:	0e 94 12 04 	call	0x824	; 0x824 <dispatch>
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	1f 91       	pop	r17
     8d6:	0f 91       	pop	r16
     8d8:	08 95       	ret

000008da <__vector_1>:
     8da:	1f 92       	push	r1
     8dc:	0f 92       	push	r0
     8de:	0f b6       	in	r0, 0x3f	; 63
     8e0:	0f 92       	push	r0
     8e2:	11 24       	eor	r1, r1
     8e4:	2f 93       	push	r18
     8e6:	3f 93       	push	r19
     8e8:	4f 93       	push	r20
     8ea:	5f 93       	push	r21
     8ec:	6f 93       	push	r22
     8ee:	7f 93       	push	r23
     8f0:	8f 93       	push	r24
     8f2:	9f 93       	push	r25
     8f4:	af 93       	push	r26
     8f6:	bf 93       	push	r27
     8f8:	ef 93       	push	r30
     8fa:	ff 93       	push	r31
     8fc:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <overflows>
     900:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <overflows+0x1>
     904:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     908:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     90c:	c9 01       	movw	r24, r18
     90e:	03 2e       	mov	r0, r19
     910:	00 0c       	add	r0, r0
     912:	aa 0b       	sbc	r26, r26
     914:	bb 0b       	sbc	r27, r27
     916:	dc 01       	movw	r26, r24
     918:	99 27       	eor	r25, r25
     91a:	88 27       	eor	r24, r24
     91c:	60 e0       	ldi	r22, 0x00	; 0
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	84 2b       	or	r24, r20
     922:	95 2b       	or	r25, r21
     924:	a6 2b       	or	r26, r22
     926:	b7 2b       	or	r27, r23
     928:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     92c:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     930:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     934:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     938:	b0 9b       	sbis	0x16, 0	; 22
     93a:	1b c0       	rjmp	.+54     	; 0x972 <__vector_1+0x98>
     93c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     940:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     944:	c9 01       	movw	r24, r18
     946:	01 96       	adiw	r24, 0x01	; 1
     948:	09 2e       	mov	r0, r25
     94a:	00 0c       	add	r0, r0
     94c:	aa 0b       	sbc	r26, r26
     94e:	bb 0b       	sbc	r27, r27
     950:	dc 01       	movw	r26, r24
     952:	99 27       	eor	r25, r25
     954:	88 27       	eor	r24, r24
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	70 e0       	ldi	r23, 0x00	; 0
     95a:	84 2b       	or	r24, r20
     95c:	95 2b       	or	r25, r21
     95e:	a6 2b       	or	r26, r22
     960:	b7 2b       	or	r27, r23
     962:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     966:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     96a:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     96e:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     972:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <mtable>
     976:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <mtable+0x1>
     97a:	30 97       	sbiw	r30, 0x00	; 0
     97c:	39 f0       	breq	.+14     	; 0x98c <__vector_1+0xb2>
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <otable>
     986:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <otable+0x1>
     98a:	09 95       	icall
     98c:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
     990:	ff 91       	pop	r31
     992:	ef 91       	pop	r30
     994:	bf 91       	pop	r27
     996:	af 91       	pop	r26
     998:	9f 91       	pop	r25
     99a:	8f 91       	pop	r24
     99c:	7f 91       	pop	r23
     99e:	6f 91       	pop	r22
     9a0:	5f 91       	pop	r21
     9a2:	4f 91       	pop	r20
     9a4:	3f 91       	pop	r19
     9a6:	2f 91       	pop	r18
     9a8:	0f 90       	pop	r0
     9aa:	0f be       	out	0x3f, r0	; 63
     9ac:	0f 90       	pop	r0
     9ae:	1f 90       	pop	r1
     9b0:	18 95       	reti

000009b2 <__vector_2>:
     9b2:	1f 92       	push	r1
     9b4:	0f 92       	push	r0
     9b6:	0f b6       	in	r0, 0x3f	; 63
     9b8:	0f 92       	push	r0
     9ba:	11 24       	eor	r1, r1
     9bc:	2f 93       	push	r18
     9be:	3f 93       	push	r19
     9c0:	4f 93       	push	r20
     9c2:	5f 93       	push	r21
     9c4:	6f 93       	push	r22
     9c6:	7f 93       	push	r23
     9c8:	8f 93       	push	r24
     9ca:	9f 93       	push	r25
     9cc:	af 93       	push	r26
     9ce:	bf 93       	push	r27
     9d0:	ef 93       	push	r30
     9d2:	ff 93       	push	r31
     9d4:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <overflows>
     9d8:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <overflows+0x1>
     9dc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     9e0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     9e4:	c9 01       	movw	r24, r18
     9e6:	03 2e       	mov	r0, r19
     9e8:	00 0c       	add	r0, r0
     9ea:	aa 0b       	sbc	r26, r26
     9ec:	bb 0b       	sbc	r27, r27
     9ee:	dc 01       	movw	r26, r24
     9f0:	99 27       	eor	r25, r25
     9f2:	88 27       	eor	r24, r24
     9f4:	60 e0       	ldi	r22, 0x00	; 0
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	84 2b       	or	r24, r20
     9fa:	95 2b       	or	r25, r21
     9fc:	a6 2b       	or	r26, r22
     9fe:	b7 2b       	or	r27, r23
     a00:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     a04:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     a08:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     a0c:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     a10:	b0 9b       	sbis	0x16, 0	; 22
     a12:	1b c0       	rjmp	.+54     	; 0xa4a <__vector_2+0x98>
     a14:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a18:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a1c:	c9 01       	movw	r24, r18
     a1e:	01 96       	adiw	r24, 0x01	; 1
     a20:	09 2e       	mov	r0, r25
     a22:	00 0c       	add	r0, r0
     a24:	aa 0b       	sbc	r26, r26
     a26:	bb 0b       	sbc	r27, r27
     a28:	dc 01       	movw	r26, r24
     a2a:	99 27       	eor	r25, r25
     a2c:	88 27       	eor	r24, r24
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	84 2b       	or	r24, r20
     a34:	95 2b       	or	r25, r21
     a36:	a6 2b       	or	r26, r22
     a38:	b7 2b       	or	r27, r23
     a3a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     a3e:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     a42:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     a46:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     a4a:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <mtable+0x2>
     a4e:	f0 91 d9 01 	lds	r31, 0x01D9	; 0x8001d9 <mtable+0x3>
     a52:	30 97       	sbiw	r30, 0x00	; 0
     a54:	39 f0       	breq	.+14     	; 0xa64 <__vector_2+0xb2>
     a56:	61 e0       	ldi	r22, 0x01	; 1
     a58:	70 e0       	ldi	r23, 0x00	; 0
     a5a:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <otable+0x2>
     a5e:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <otable+0x3>
     a62:	09 95       	icall
     a64:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
     a68:	ff 91       	pop	r31
     a6a:	ef 91       	pop	r30
     a6c:	bf 91       	pop	r27
     a6e:	af 91       	pop	r26
     a70:	9f 91       	pop	r25
     a72:	8f 91       	pop	r24
     a74:	7f 91       	pop	r23
     a76:	6f 91       	pop	r22
     a78:	5f 91       	pop	r21
     a7a:	4f 91       	pop	r20
     a7c:	3f 91       	pop	r19
     a7e:	2f 91       	pop	r18
     a80:	0f 90       	pop	r0
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	0f 90       	pop	r0
     a86:	1f 90       	pop	r1
     a88:	18 95       	reti

00000a8a <__vector_3>:
     a8a:	1f 92       	push	r1
     a8c:	0f 92       	push	r0
     a8e:	0f b6       	in	r0, 0x3f	; 63
     a90:	0f 92       	push	r0
     a92:	11 24       	eor	r1, r1
     a94:	2f 93       	push	r18
     a96:	3f 93       	push	r19
     a98:	4f 93       	push	r20
     a9a:	5f 93       	push	r21
     a9c:	6f 93       	push	r22
     a9e:	7f 93       	push	r23
     aa0:	8f 93       	push	r24
     aa2:	9f 93       	push	r25
     aa4:	af 93       	push	r26
     aa6:	bf 93       	push	r27
     aa8:	ef 93       	push	r30
     aaa:	ff 93       	push	r31
     aac:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <overflows>
     ab0:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <overflows+0x1>
     ab4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ab8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     abc:	c9 01       	movw	r24, r18
     abe:	03 2e       	mov	r0, r19
     ac0:	00 0c       	add	r0, r0
     ac2:	aa 0b       	sbc	r26, r26
     ac4:	bb 0b       	sbc	r27, r27
     ac6:	dc 01       	movw	r26, r24
     ac8:	99 27       	eor	r25, r25
     aca:	88 27       	eor	r24, r24
     acc:	60 e0       	ldi	r22, 0x00	; 0
     ace:	70 e0       	ldi	r23, 0x00	; 0
     ad0:	84 2b       	or	r24, r20
     ad2:	95 2b       	or	r25, r21
     ad4:	a6 2b       	or	r26, r22
     ad6:	b7 2b       	or	r27, r23
     ad8:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     adc:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     ae0:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     ae4:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     ae8:	b0 9b       	sbis	0x16, 0	; 22
     aea:	1b c0       	rjmp	.+54     	; 0xb22 <__vector_3+0x98>
     aec:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     af0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     af4:	c9 01       	movw	r24, r18
     af6:	01 96       	adiw	r24, 0x01	; 1
     af8:	09 2e       	mov	r0, r25
     afa:	00 0c       	add	r0, r0
     afc:	aa 0b       	sbc	r26, r26
     afe:	bb 0b       	sbc	r27, r27
     b00:	dc 01       	movw	r26, r24
     b02:	99 27       	eor	r25, r25
     b04:	88 27       	eor	r24, r24
     b06:	60 e0       	ldi	r22, 0x00	; 0
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	84 2b       	or	r24, r20
     b0c:	95 2b       	or	r25, r21
     b0e:	a6 2b       	or	r26, r22
     b10:	b7 2b       	or	r27, r23
     b12:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     b16:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     b1a:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     b1e:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     b22:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <mtable+0x4>
     b26:	f0 91 db 01 	lds	r31, 0x01DB	; 0x8001db <mtable+0x5>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	39 f0       	breq	.+14     	; 0xb3c <__vector_3+0xb2>
     b2e:	62 e0       	ldi	r22, 0x02	; 2
     b30:	70 e0       	ldi	r23, 0x00	; 0
     b32:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <otable+0x4>
     b36:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <otable+0x5>
     b3a:	09 95       	icall
     b3c:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
     b40:	ff 91       	pop	r31
     b42:	ef 91       	pop	r30
     b44:	bf 91       	pop	r27
     b46:	af 91       	pop	r26
     b48:	9f 91       	pop	r25
     b4a:	8f 91       	pop	r24
     b4c:	7f 91       	pop	r23
     b4e:	6f 91       	pop	r22
     b50:	5f 91       	pop	r21
     b52:	4f 91       	pop	r20
     b54:	3f 91       	pop	r19
     b56:	2f 91       	pop	r18
     b58:	0f 90       	pop	r0
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	0f 90       	pop	r0
     b5e:	1f 90       	pop	r1
     b60:	18 95       	reti

00000b62 <__vector_4>:
     b62:	1f 92       	push	r1
     b64:	0f 92       	push	r0
     b66:	0f b6       	in	r0, 0x3f	; 63
     b68:	0f 92       	push	r0
     b6a:	11 24       	eor	r1, r1
     b6c:	2f 93       	push	r18
     b6e:	3f 93       	push	r19
     b70:	4f 93       	push	r20
     b72:	5f 93       	push	r21
     b74:	6f 93       	push	r22
     b76:	7f 93       	push	r23
     b78:	8f 93       	push	r24
     b7a:	9f 93       	push	r25
     b7c:	af 93       	push	r26
     b7e:	bf 93       	push	r27
     b80:	ef 93       	push	r30
     b82:	ff 93       	push	r31
     b84:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <overflows>
     b88:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <overflows+0x1>
     b8c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b90:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b94:	c9 01       	movw	r24, r18
     b96:	03 2e       	mov	r0, r19
     b98:	00 0c       	add	r0, r0
     b9a:	aa 0b       	sbc	r26, r26
     b9c:	bb 0b       	sbc	r27, r27
     b9e:	dc 01       	movw	r26, r24
     ba0:	99 27       	eor	r25, r25
     ba2:	88 27       	eor	r24, r24
     ba4:	60 e0       	ldi	r22, 0x00	; 0
     ba6:	70 e0       	ldi	r23, 0x00	; 0
     ba8:	84 2b       	or	r24, r20
     baa:	95 2b       	or	r25, r21
     bac:	a6 2b       	or	r26, r22
     bae:	b7 2b       	or	r27, r23
     bb0:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     bb4:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     bb8:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     bbc:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     bc0:	b0 9b       	sbis	0x16, 0	; 22
     bc2:	1b c0       	rjmp	.+54     	; 0xbfa <__vector_4+0x98>
     bc4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     bc8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     bcc:	c9 01       	movw	r24, r18
     bce:	01 96       	adiw	r24, 0x01	; 1
     bd0:	09 2e       	mov	r0, r25
     bd2:	00 0c       	add	r0, r0
     bd4:	aa 0b       	sbc	r26, r26
     bd6:	bb 0b       	sbc	r27, r27
     bd8:	dc 01       	movw	r26, r24
     bda:	99 27       	eor	r25, r25
     bdc:	88 27       	eor	r24, r24
     bde:	60 e0       	ldi	r22, 0x00	; 0
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	84 2b       	or	r24, r20
     be4:	95 2b       	or	r25, r21
     be6:	a6 2b       	or	r26, r22
     be8:	b7 2b       	or	r27, r23
     bea:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     bee:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     bf2:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     bf6:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     bfa:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <mtable+0x6>
     bfe:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <mtable+0x7>
     c02:	30 97       	sbiw	r30, 0x00	; 0
     c04:	39 f0       	breq	.+14     	; 0xc14 <__vector_4+0xb2>
     c06:	63 e0       	ldi	r22, 0x03	; 3
     c08:	70 e0       	ldi	r23, 0x00	; 0
     c0a:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <otable+0x6>
     c0e:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <otable+0x7>
     c12:	09 95       	icall
     c14:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
     c18:	ff 91       	pop	r31
     c1a:	ef 91       	pop	r30
     c1c:	bf 91       	pop	r27
     c1e:	af 91       	pop	r26
     c20:	9f 91       	pop	r25
     c22:	8f 91       	pop	r24
     c24:	7f 91       	pop	r23
     c26:	6f 91       	pop	r22
     c28:	5f 91       	pop	r21
     c2a:	4f 91       	pop	r20
     c2c:	3f 91       	pop	r19
     c2e:	2f 91       	pop	r18
     c30:	0f 90       	pop	r0
     c32:	0f be       	out	0x3f, r0	; 63
     c34:	0f 90       	pop	r0
     c36:	1f 90       	pop	r1
     c38:	18 95       	reti

00000c3a <__vector_5>:
     c3a:	1f 92       	push	r1
     c3c:	0f 92       	push	r0
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	0f 92       	push	r0
     c42:	11 24       	eor	r1, r1
     c44:	2f 93       	push	r18
     c46:	3f 93       	push	r19
     c48:	4f 93       	push	r20
     c4a:	5f 93       	push	r21
     c4c:	6f 93       	push	r22
     c4e:	7f 93       	push	r23
     c50:	8f 93       	push	r24
     c52:	9f 93       	push	r25
     c54:	af 93       	push	r26
     c56:	bf 93       	push	r27
     c58:	ef 93       	push	r30
     c5a:	ff 93       	push	r31
     c5c:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <overflows>
     c60:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <overflows+0x1>
     c64:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c68:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c6c:	c9 01       	movw	r24, r18
     c6e:	03 2e       	mov	r0, r19
     c70:	00 0c       	add	r0, r0
     c72:	aa 0b       	sbc	r26, r26
     c74:	bb 0b       	sbc	r27, r27
     c76:	dc 01       	movw	r26, r24
     c78:	99 27       	eor	r25, r25
     c7a:	88 27       	eor	r24, r24
     c7c:	60 e0       	ldi	r22, 0x00	; 0
     c7e:	70 e0       	ldi	r23, 0x00	; 0
     c80:	84 2b       	or	r24, r20
     c82:	95 2b       	or	r25, r21
     c84:	a6 2b       	or	r26, r22
     c86:	b7 2b       	or	r27, r23
     c88:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     c8c:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     c90:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     c94:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     c98:	b0 9b       	sbis	0x16, 0	; 22
     c9a:	1b c0       	rjmp	.+54     	; 0xcd2 <__vector_5+0x98>
     c9c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ca0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ca4:	c9 01       	movw	r24, r18
     ca6:	01 96       	adiw	r24, 0x01	; 1
     ca8:	09 2e       	mov	r0, r25
     caa:	00 0c       	add	r0, r0
     cac:	aa 0b       	sbc	r26, r26
     cae:	bb 0b       	sbc	r27, r27
     cb0:	dc 01       	movw	r26, r24
     cb2:	99 27       	eor	r25, r25
     cb4:	88 27       	eor	r24, r24
     cb6:	60 e0       	ldi	r22, 0x00	; 0
     cb8:	70 e0       	ldi	r23, 0x00	; 0
     cba:	84 2b       	or	r24, r20
     cbc:	95 2b       	or	r25, r21
     cbe:	a6 2b       	or	r26, r22
     cc0:	b7 2b       	or	r27, r23
     cc2:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     cc6:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     cca:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     cce:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     cd2:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <mtable+0x8>
     cd6:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <mtable+0x9>
     cda:	30 97       	sbiw	r30, 0x00	; 0
     cdc:	39 f0       	breq	.+14     	; 0xcec <__vector_5+0xb2>
     cde:	64 e0       	ldi	r22, 0x04	; 4
     ce0:	70 e0       	ldi	r23, 0x00	; 0
     ce2:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <otable+0x8>
     ce6:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <otable+0x9>
     cea:	09 95       	icall
     cec:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
     cf0:	ff 91       	pop	r31
     cf2:	ef 91       	pop	r30
     cf4:	bf 91       	pop	r27
     cf6:	af 91       	pop	r26
     cf8:	9f 91       	pop	r25
     cfa:	8f 91       	pop	r24
     cfc:	7f 91       	pop	r23
     cfe:	6f 91       	pop	r22
     d00:	5f 91       	pop	r21
     d02:	4f 91       	pop	r20
     d04:	3f 91       	pop	r19
     d06:	2f 91       	pop	r18
     d08:	0f 90       	pop	r0
     d0a:	0f be       	out	0x3f, r0	; 63
     d0c:	0f 90       	pop	r0
     d0e:	1f 90       	pop	r1
     d10:	18 95       	reti

00000d12 <__vector_10>:
     d12:	1f 92       	push	r1
     d14:	0f 92       	push	r0
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	0f 92       	push	r0
     d1a:	11 24       	eor	r1, r1
     d1c:	2f 93       	push	r18
     d1e:	3f 93       	push	r19
     d20:	4f 93       	push	r20
     d22:	5f 93       	push	r21
     d24:	6f 93       	push	r22
     d26:	7f 93       	push	r23
     d28:	8f 93       	push	r24
     d2a:	9f 93       	push	r25
     d2c:	af 93       	push	r26
     d2e:	bf 93       	push	r27
     d30:	ef 93       	push	r30
     d32:	ff 93       	push	r31
     d34:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <overflows>
     d38:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <overflows+0x1>
     d3c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d40:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d44:	c9 01       	movw	r24, r18
     d46:	03 2e       	mov	r0, r19
     d48:	00 0c       	add	r0, r0
     d4a:	aa 0b       	sbc	r26, r26
     d4c:	bb 0b       	sbc	r27, r27
     d4e:	dc 01       	movw	r26, r24
     d50:	99 27       	eor	r25, r25
     d52:	88 27       	eor	r24, r24
     d54:	60 e0       	ldi	r22, 0x00	; 0
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	84 2b       	or	r24, r20
     d5a:	95 2b       	or	r25, r21
     d5c:	a6 2b       	or	r26, r22
     d5e:	b7 2b       	or	r27, r23
     d60:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     d64:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     d68:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     d6c:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     d70:	b0 9b       	sbis	0x16, 0	; 22
     d72:	1b c0       	rjmp	.+54     	; 0xdaa <__vector_10+0x98>
     d74:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d78:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d7c:	c9 01       	movw	r24, r18
     d7e:	01 96       	adiw	r24, 0x01	; 1
     d80:	09 2e       	mov	r0, r25
     d82:	00 0c       	add	r0, r0
     d84:	aa 0b       	sbc	r26, r26
     d86:	bb 0b       	sbc	r27, r27
     d88:	dc 01       	movw	r26, r24
     d8a:	99 27       	eor	r25, r25
     d8c:	88 27       	eor	r24, r24
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	84 2b       	or	r24, r20
     d94:	95 2b       	or	r25, r21
     d96:	a6 2b       	or	r26, r22
     d98:	b7 2b       	or	r27, r23
     d9a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     d9e:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     da2:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     da6:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     daa:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <mtable+0xa>
     dae:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <mtable+0xb>
     db2:	30 97       	sbiw	r30, 0x00	; 0
     db4:	39 f0       	breq	.+14     	; 0xdc4 <__vector_10+0xb2>
     db6:	65 e0       	ldi	r22, 0x05	; 5
     db8:	70 e0       	ldi	r23, 0x00	; 0
     dba:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <otable+0xa>
     dbe:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <otable+0xb>
     dc2:	09 95       	icall
     dc4:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
     dc8:	ff 91       	pop	r31
     dca:	ef 91       	pop	r30
     dcc:	bf 91       	pop	r27
     dce:	af 91       	pop	r26
     dd0:	9f 91       	pop	r25
     dd2:	8f 91       	pop	r24
     dd4:	7f 91       	pop	r23
     dd6:	6f 91       	pop	r22
     dd8:	5f 91       	pop	r21
     dda:	4f 91       	pop	r20
     ddc:	3f 91       	pop	r19
     dde:	2f 91       	pop	r18
     de0:	0f 90       	pop	r0
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	0f 90       	pop	r0
     de6:	1f 90       	pop	r1
     de8:	18 95       	reti

00000dea <__vector_11>:
     dea:	1f 92       	push	r1
     dec:	0f 92       	push	r0
     dee:	0f b6       	in	r0, 0x3f	; 63
     df0:	0f 92       	push	r0
     df2:	11 24       	eor	r1, r1
     df4:	2f 93       	push	r18
     df6:	3f 93       	push	r19
     df8:	4f 93       	push	r20
     dfa:	5f 93       	push	r21
     dfc:	6f 93       	push	r22
     dfe:	7f 93       	push	r23
     e00:	8f 93       	push	r24
     e02:	9f 93       	push	r25
     e04:	af 93       	push	r26
     e06:	bf 93       	push	r27
     e08:	ef 93       	push	r30
     e0a:	ff 93       	push	r31
     e0c:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <overflows>
     e10:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <overflows+0x1>
     e14:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e18:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e1c:	c9 01       	movw	r24, r18
     e1e:	03 2e       	mov	r0, r19
     e20:	00 0c       	add	r0, r0
     e22:	aa 0b       	sbc	r26, r26
     e24:	bb 0b       	sbc	r27, r27
     e26:	dc 01       	movw	r26, r24
     e28:	99 27       	eor	r25, r25
     e2a:	88 27       	eor	r24, r24
     e2c:	60 e0       	ldi	r22, 0x00	; 0
     e2e:	70 e0       	ldi	r23, 0x00	; 0
     e30:	84 2b       	or	r24, r20
     e32:	95 2b       	or	r25, r21
     e34:	a6 2b       	or	r26, r22
     e36:	b7 2b       	or	r27, r23
     e38:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     e3c:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     e40:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     e44:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     e48:	b0 9b       	sbis	0x16, 0	; 22
     e4a:	1b c0       	rjmp	.+54     	; 0xe82 <__vector_11+0x98>
     e4c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e50:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e54:	c9 01       	movw	r24, r18
     e56:	01 96       	adiw	r24, 0x01	; 1
     e58:	09 2e       	mov	r0, r25
     e5a:	00 0c       	add	r0, r0
     e5c:	aa 0b       	sbc	r26, r26
     e5e:	bb 0b       	sbc	r27, r27
     e60:	dc 01       	movw	r26, r24
     e62:	99 27       	eor	r25, r25
     e64:	88 27       	eor	r24, r24
     e66:	60 e0       	ldi	r22, 0x00	; 0
     e68:	70 e0       	ldi	r23, 0x00	; 0
     e6a:	84 2b       	or	r24, r20
     e6c:	95 2b       	or	r25, r21
     e6e:	a6 2b       	or	r26, r22
     e70:	b7 2b       	or	r27, r23
     e72:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     e76:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     e7a:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     e7e:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     e82:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <mtable+0xc>
     e86:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <mtable+0xd>
     e8a:	30 97       	sbiw	r30, 0x00	; 0
     e8c:	39 f0       	breq	.+14     	; 0xe9c <__vector_11+0xb2>
     e8e:	66 e0       	ldi	r22, 0x06	; 6
     e90:	70 e0       	ldi	r23, 0x00	; 0
     e92:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <otable+0xc>
     e96:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <otable+0xd>
     e9a:	09 95       	icall
     e9c:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
     ea0:	ff 91       	pop	r31
     ea2:	ef 91       	pop	r30
     ea4:	bf 91       	pop	r27
     ea6:	af 91       	pop	r26
     ea8:	9f 91       	pop	r25
     eaa:	8f 91       	pop	r24
     eac:	7f 91       	pop	r23
     eae:	6f 91       	pop	r22
     eb0:	5f 91       	pop	r21
     eb2:	4f 91       	pop	r20
     eb4:	3f 91       	pop	r19
     eb6:	2f 91       	pop	r18
     eb8:	0f 90       	pop	r0
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	0f 90       	pop	r0
     ebe:	1f 90       	pop	r1
     ec0:	18 95       	reti

00000ec2 <__vector_12>:
     ec2:	1f 92       	push	r1
     ec4:	0f 92       	push	r0
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	0f 92       	push	r0
     eca:	11 24       	eor	r1, r1
     ecc:	2f 93       	push	r18
     ece:	3f 93       	push	r19
     ed0:	4f 93       	push	r20
     ed2:	5f 93       	push	r21
     ed4:	6f 93       	push	r22
     ed6:	7f 93       	push	r23
     ed8:	8f 93       	push	r24
     eda:	9f 93       	push	r25
     edc:	af 93       	push	r26
     ede:	bf 93       	push	r27
     ee0:	ef 93       	push	r30
     ee2:	ff 93       	push	r31
     ee4:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <overflows>
     ee8:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <overflows+0x1>
     eec:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ef0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ef4:	c9 01       	movw	r24, r18
     ef6:	03 2e       	mov	r0, r19
     ef8:	00 0c       	add	r0, r0
     efa:	aa 0b       	sbc	r26, r26
     efc:	bb 0b       	sbc	r27, r27
     efe:	dc 01       	movw	r26, r24
     f00:	99 27       	eor	r25, r25
     f02:	88 27       	eor	r24, r24
     f04:	60 e0       	ldi	r22, 0x00	; 0
     f06:	70 e0       	ldi	r23, 0x00	; 0
     f08:	84 2b       	or	r24, r20
     f0a:	95 2b       	or	r25, r21
     f0c:	a6 2b       	or	r26, r22
     f0e:	b7 2b       	or	r27, r23
     f10:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     f14:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     f18:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     f1c:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     f20:	b0 9b       	sbis	0x16, 0	; 22
     f22:	1b c0       	rjmp	.+54     	; 0xf5a <__vector_12+0x98>
     f24:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f28:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f2c:	c9 01       	movw	r24, r18
     f2e:	01 96       	adiw	r24, 0x01	; 1
     f30:	09 2e       	mov	r0, r25
     f32:	00 0c       	add	r0, r0
     f34:	aa 0b       	sbc	r26, r26
     f36:	bb 0b       	sbc	r27, r27
     f38:	dc 01       	movw	r26, r24
     f3a:	99 27       	eor	r25, r25
     f3c:	88 27       	eor	r24, r24
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	84 2b       	or	r24, r20
     f44:	95 2b       	or	r25, r21
     f46:	a6 2b       	or	r26, r22
     f48:	b7 2b       	or	r27, r23
     f4a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     f4e:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     f52:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     f56:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     f5a:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <mtable+0xe>
     f5e:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <mtable+0xf>
     f62:	30 97       	sbiw	r30, 0x00	; 0
     f64:	39 f0       	breq	.+14     	; 0xf74 <__vector_12+0xb2>
     f66:	67 e0       	ldi	r22, 0x07	; 7
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <otable+0xe>
     f6e:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <otable+0xf>
     f72:	09 95       	icall
     f74:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
     f78:	ff 91       	pop	r31
     f7a:	ef 91       	pop	r30
     f7c:	bf 91       	pop	r27
     f7e:	af 91       	pop	r26
     f80:	9f 91       	pop	r25
     f82:	8f 91       	pop	r24
     f84:	7f 91       	pop	r23
     f86:	6f 91       	pop	r22
     f88:	5f 91       	pop	r21
     f8a:	4f 91       	pop	r20
     f8c:	3f 91       	pop	r19
     f8e:	2f 91       	pop	r18
     f90:	0f 90       	pop	r0
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	0f 90       	pop	r0
     f96:	1f 90       	pop	r1
     f98:	18 95       	reti

00000f9a <__vector_13>:
     f9a:	1f 92       	push	r1
     f9c:	0f 92       	push	r0
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	0f 92       	push	r0
     fa2:	11 24       	eor	r1, r1
     fa4:	2f 93       	push	r18
     fa6:	3f 93       	push	r19
     fa8:	4f 93       	push	r20
     faa:	5f 93       	push	r21
     fac:	6f 93       	push	r22
     fae:	7f 93       	push	r23
     fb0:	8f 93       	push	r24
     fb2:	9f 93       	push	r25
     fb4:	af 93       	push	r26
     fb6:	bf 93       	push	r27
     fb8:	ef 93       	push	r30
     fba:	ff 93       	push	r31
     fbc:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <overflows>
     fc0:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <overflows+0x1>
     fc4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     fc8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     fcc:	c9 01       	movw	r24, r18
     fce:	03 2e       	mov	r0, r19
     fd0:	00 0c       	add	r0, r0
     fd2:	aa 0b       	sbc	r26, r26
     fd4:	bb 0b       	sbc	r27, r27
     fd6:	dc 01       	movw	r26, r24
     fd8:	99 27       	eor	r25, r25
     fda:	88 27       	eor	r24, r24
     fdc:	60 e0       	ldi	r22, 0x00	; 0
     fde:	70 e0       	ldi	r23, 0x00	; 0
     fe0:	84 2b       	or	r24, r20
     fe2:	95 2b       	or	r25, r21
     fe4:	a6 2b       	or	r26, r22
     fe6:	b7 2b       	or	r27, r23
     fe8:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     fec:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     ff0:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     ff4:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     ff8:	b0 9b       	sbis	0x16, 0	; 22
     ffa:	1b c0       	rjmp	.+54     	; 0x1032 <__vector_13+0x98>
     ffc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1000:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1004:	c9 01       	movw	r24, r18
    1006:	01 96       	adiw	r24, 0x01	; 1
    1008:	09 2e       	mov	r0, r25
    100a:	00 0c       	add	r0, r0
    100c:	aa 0b       	sbc	r26, r26
    100e:	bb 0b       	sbc	r27, r27
    1010:	dc 01       	movw	r26, r24
    1012:	99 27       	eor	r25, r25
    1014:	88 27       	eor	r24, r24
    1016:	60 e0       	ldi	r22, 0x00	; 0
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	84 2b       	or	r24, r20
    101c:	95 2b       	or	r25, r21
    101e:	a6 2b       	or	r26, r22
    1020:	b7 2b       	or	r27, r23
    1022:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    1026:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    102a:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    102e:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    1032:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <mtable+0x10>
    1036:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <mtable+0x11>
    103a:	30 97       	sbiw	r30, 0x00	; 0
    103c:	39 f0       	breq	.+14     	; 0x104c <__vector_13+0xb2>
    103e:	68 e0       	ldi	r22, 0x08	; 8
    1040:	70 e0       	ldi	r23, 0x00	; 0
    1042:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <otable+0x10>
    1046:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <otable+0x11>
    104a:	09 95       	icall
    104c:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
    1050:	ff 91       	pop	r31
    1052:	ef 91       	pop	r30
    1054:	bf 91       	pop	r27
    1056:	af 91       	pop	r26
    1058:	9f 91       	pop	r25
    105a:	8f 91       	pop	r24
    105c:	7f 91       	pop	r23
    105e:	6f 91       	pop	r22
    1060:	5f 91       	pop	r21
    1062:	4f 91       	pop	r20
    1064:	3f 91       	pop	r19
    1066:	2f 91       	pop	r18
    1068:	0f 90       	pop	r0
    106a:	0f be       	out	0x3f, r0	; 63
    106c:	0f 90       	pop	r0
    106e:	1f 90       	pop	r1
    1070:	18 95       	reti

00001072 <__vector_14>:
    1072:	1f 92       	push	r1
    1074:	0f 92       	push	r0
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	0f 92       	push	r0
    107a:	11 24       	eor	r1, r1
    107c:	2f 93       	push	r18
    107e:	3f 93       	push	r19
    1080:	4f 93       	push	r20
    1082:	5f 93       	push	r21
    1084:	6f 93       	push	r22
    1086:	7f 93       	push	r23
    1088:	8f 93       	push	r24
    108a:	9f 93       	push	r25
    108c:	af 93       	push	r26
    108e:	bf 93       	push	r27
    1090:	ef 93       	push	r30
    1092:	ff 93       	push	r31
    1094:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <overflows>
    1098:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <overflows+0x1>
    109c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10a0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10a4:	c9 01       	movw	r24, r18
    10a6:	03 2e       	mov	r0, r19
    10a8:	00 0c       	add	r0, r0
    10aa:	aa 0b       	sbc	r26, r26
    10ac:	bb 0b       	sbc	r27, r27
    10ae:	dc 01       	movw	r26, r24
    10b0:	99 27       	eor	r25, r25
    10b2:	88 27       	eor	r24, r24
    10b4:	60 e0       	ldi	r22, 0x00	; 0
    10b6:	70 e0       	ldi	r23, 0x00	; 0
    10b8:	84 2b       	or	r24, r20
    10ba:	95 2b       	or	r25, r21
    10bc:	a6 2b       	or	r26, r22
    10be:	b7 2b       	or	r27, r23
    10c0:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    10c4:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    10c8:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    10cc:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    10d0:	b0 9b       	sbis	0x16, 0	; 22
    10d2:	1b c0       	rjmp	.+54     	; 0x110a <__vector_14+0x98>
    10d4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10d8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10dc:	c9 01       	movw	r24, r18
    10de:	01 96       	adiw	r24, 0x01	; 1
    10e0:	09 2e       	mov	r0, r25
    10e2:	00 0c       	add	r0, r0
    10e4:	aa 0b       	sbc	r26, r26
    10e6:	bb 0b       	sbc	r27, r27
    10e8:	dc 01       	movw	r26, r24
    10ea:	99 27       	eor	r25, r25
    10ec:	88 27       	eor	r24, r24
    10ee:	60 e0       	ldi	r22, 0x00	; 0
    10f0:	70 e0       	ldi	r23, 0x00	; 0
    10f2:	84 2b       	or	r24, r20
    10f4:	95 2b       	or	r25, r21
    10f6:	a6 2b       	or	r26, r22
    10f8:	b7 2b       	or	r27, r23
    10fa:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    10fe:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    1102:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    1106:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    110a:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <mtable+0x12>
    110e:	f0 91 e9 01 	lds	r31, 0x01E9	; 0x8001e9 <mtable+0x13>
    1112:	30 97       	sbiw	r30, 0x00	; 0
    1114:	39 f0       	breq	.+14     	; 0x1124 <__vector_14+0xb2>
    1116:	69 e0       	ldi	r22, 0x09	; 9
    1118:	70 e0       	ldi	r23, 0x00	; 0
    111a:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <otable+0x12>
    111e:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <otable+0x13>
    1122:	09 95       	icall
    1124:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
    1128:	ff 91       	pop	r31
    112a:	ef 91       	pop	r30
    112c:	bf 91       	pop	r27
    112e:	af 91       	pop	r26
    1130:	9f 91       	pop	r25
    1132:	8f 91       	pop	r24
    1134:	7f 91       	pop	r23
    1136:	6f 91       	pop	r22
    1138:	5f 91       	pop	r21
    113a:	4f 91       	pop	r20
    113c:	3f 91       	pop	r19
    113e:	2f 91       	pop	r18
    1140:	0f 90       	pop	r0
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	0f 90       	pop	r0
    1146:	1f 90       	pop	r1
    1148:	18 95       	reti

0000114a <__vector_15>:
    114a:	1f 92       	push	r1
    114c:	0f 92       	push	r0
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	0f 92       	push	r0
    1152:	11 24       	eor	r1, r1
    1154:	2f 93       	push	r18
    1156:	3f 93       	push	r19
    1158:	4f 93       	push	r20
    115a:	5f 93       	push	r21
    115c:	6f 93       	push	r22
    115e:	7f 93       	push	r23
    1160:	8f 93       	push	r24
    1162:	9f 93       	push	r25
    1164:	af 93       	push	r26
    1166:	bf 93       	push	r27
    1168:	ef 93       	push	r30
    116a:	ff 93       	push	r31
    116c:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <overflows>
    1170:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <overflows+0x1>
    1174:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1178:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    117c:	c9 01       	movw	r24, r18
    117e:	03 2e       	mov	r0, r19
    1180:	00 0c       	add	r0, r0
    1182:	aa 0b       	sbc	r26, r26
    1184:	bb 0b       	sbc	r27, r27
    1186:	dc 01       	movw	r26, r24
    1188:	99 27       	eor	r25, r25
    118a:	88 27       	eor	r24, r24
    118c:	60 e0       	ldi	r22, 0x00	; 0
    118e:	70 e0       	ldi	r23, 0x00	; 0
    1190:	84 2b       	or	r24, r20
    1192:	95 2b       	or	r25, r21
    1194:	a6 2b       	or	r26, r22
    1196:	b7 2b       	or	r27, r23
    1198:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    119c:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    11a0:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    11a4:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    11a8:	b0 9b       	sbis	0x16, 0	; 22
    11aa:	1b c0       	rjmp	.+54     	; 0x11e2 <__vector_15+0x98>
    11ac:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11b0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11b4:	c9 01       	movw	r24, r18
    11b6:	01 96       	adiw	r24, 0x01	; 1
    11b8:	09 2e       	mov	r0, r25
    11ba:	00 0c       	add	r0, r0
    11bc:	aa 0b       	sbc	r26, r26
    11be:	bb 0b       	sbc	r27, r27
    11c0:	dc 01       	movw	r26, r24
    11c2:	99 27       	eor	r25, r25
    11c4:	88 27       	eor	r24, r24
    11c6:	60 e0       	ldi	r22, 0x00	; 0
    11c8:	70 e0       	ldi	r23, 0x00	; 0
    11ca:	84 2b       	or	r24, r20
    11cc:	95 2b       	or	r25, r21
    11ce:	a6 2b       	or	r26, r22
    11d0:	b7 2b       	or	r27, r23
    11d2:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    11d6:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    11da:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    11de:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    11e2:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <mtable+0x14>
    11e6:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <mtable+0x15>
    11ea:	30 97       	sbiw	r30, 0x00	; 0
    11ec:	39 f0       	breq	.+14     	; 0x11fc <__vector_15+0xb2>
    11ee:	6a e0       	ldi	r22, 0x0A	; 10
    11f0:	70 e0       	ldi	r23, 0x00	; 0
    11f2:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <otable+0x14>
    11f6:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <otable+0x15>
    11fa:	09 95       	icall
    11fc:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
    1200:	ff 91       	pop	r31
    1202:	ef 91       	pop	r30
    1204:	bf 91       	pop	r27
    1206:	af 91       	pop	r26
    1208:	9f 91       	pop	r25
    120a:	8f 91       	pop	r24
    120c:	7f 91       	pop	r23
    120e:	6f 91       	pop	r22
    1210:	5f 91       	pop	r21
    1212:	4f 91       	pop	r20
    1214:	3f 91       	pop	r19
    1216:	2f 91       	pop	r18
    1218:	0f 90       	pop	r0
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	0f 90       	pop	r0
    121e:	1f 90       	pop	r1
    1220:	18 95       	reti

00001222 <__vector_16>:
    1222:	1f 92       	push	r1
    1224:	0f 92       	push	r0
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	0f 92       	push	r0
    122a:	11 24       	eor	r1, r1
    122c:	2f 93       	push	r18
    122e:	3f 93       	push	r19
    1230:	4f 93       	push	r20
    1232:	5f 93       	push	r21
    1234:	6f 93       	push	r22
    1236:	7f 93       	push	r23
    1238:	8f 93       	push	r24
    123a:	9f 93       	push	r25
    123c:	af 93       	push	r26
    123e:	bf 93       	push	r27
    1240:	ef 93       	push	r30
    1242:	ff 93       	push	r31
    1244:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <overflows>
    1248:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <overflows+0x1>
    124c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1250:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1254:	c9 01       	movw	r24, r18
    1256:	03 2e       	mov	r0, r19
    1258:	00 0c       	add	r0, r0
    125a:	aa 0b       	sbc	r26, r26
    125c:	bb 0b       	sbc	r27, r27
    125e:	dc 01       	movw	r26, r24
    1260:	99 27       	eor	r25, r25
    1262:	88 27       	eor	r24, r24
    1264:	60 e0       	ldi	r22, 0x00	; 0
    1266:	70 e0       	ldi	r23, 0x00	; 0
    1268:	84 2b       	or	r24, r20
    126a:	95 2b       	or	r25, r21
    126c:	a6 2b       	or	r26, r22
    126e:	b7 2b       	or	r27, r23
    1270:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    1274:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    1278:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    127c:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    1280:	b0 9b       	sbis	0x16, 0	; 22
    1282:	1b c0       	rjmp	.+54     	; 0x12ba <__vector_16+0x98>
    1284:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1288:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    128c:	c9 01       	movw	r24, r18
    128e:	01 96       	adiw	r24, 0x01	; 1
    1290:	09 2e       	mov	r0, r25
    1292:	00 0c       	add	r0, r0
    1294:	aa 0b       	sbc	r26, r26
    1296:	bb 0b       	sbc	r27, r27
    1298:	dc 01       	movw	r26, r24
    129a:	99 27       	eor	r25, r25
    129c:	88 27       	eor	r24, r24
    129e:	60 e0       	ldi	r22, 0x00	; 0
    12a0:	70 e0       	ldi	r23, 0x00	; 0
    12a2:	84 2b       	or	r24, r20
    12a4:	95 2b       	or	r25, r21
    12a6:	a6 2b       	or	r26, r22
    12a8:	b7 2b       	or	r27, r23
    12aa:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    12ae:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    12b2:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    12b6:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    12ba:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <mtable+0x16>
    12be:	f0 91 ed 01 	lds	r31, 0x01ED	; 0x8001ed <mtable+0x17>
    12c2:	30 97       	sbiw	r30, 0x00	; 0
    12c4:	39 f0       	breq	.+14     	; 0x12d4 <__vector_16+0xb2>
    12c6:	6b e0       	ldi	r22, 0x0B	; 11
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <otable+0x16>
    12ce:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <otable+0x17>
    12d2:	09 95       	icall
    12d4:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
    12d8:	ff 91       	pop	r31
    12da:	ef 91       	pop	r30
    12dc:	bf 91       	pop	r27
    12de:	af 91       	pop	r26
    12e0:	9f 91       	pop	r25
    12e2:	8f 91       	pop	r24
    12e4:	7f 91       	pop	r23
    12e6:	6f 91       	pop	r22
    12e8:	5f 91       	pop	r21
    12ea:	4f 91       	pop	r20
    12ec:	3f 91       	pop	r19
    12ee:	2f 91       	pop	r18
    12f0:	0f 90       	pop	r0
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	0f 90       	pop	r0
    12f6:	1f 90       	pop	r1
    12f8:	18 95       	reti

000012fa <__vector_17>:
    12fa:	1f 92       	push	r1
    12fc:	0f 92       	push	r0
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	0f 92       	push	r0
    1302:	11 24       	eor	r1, r1
    1304:	2f 93       	push	r18
    1306:	3f 93       	push	r19
    1308:	4f 93       	push	r20
    130a:	5f 93       	push	r21
    130c:	6f 93       	push	r22
    130e:	7f 93       	push	r23
    1310:	8f 93       	push	r24
    1312:	9f 93       	push	r25
    1314:	af 93       	push	r26
    1316:	bf 93       	push	r27
    1318:	ef 93       	push	r30
    131a:	ff 93       	push	r31
    131c:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <overflows>
    1320:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <overflows+0x1>
    1324:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1328:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    132c:	c9 01       	movw	r24, r18
    132e:	03 2e       	mov	r0, r19
    1330:	00 0c       	add	r0, r0
    1332:	aa 0b       	sbc	r26, r26
    1334:	bb 0b       	sbc	r27, r27
    1336:	dc 01       	movw	r26, r24
    1338:	99 27       	eor	r25, r25
    133a:	88 27       	eor	r24, r24
    133c:	60 e0       	ldi	r22, 0x00	; 0
    133e:	70 e0       	ldi	r23, 0x00	; 0
    1340:	84 2b       	or	r24, r20
    1342:	95 2b       	or	r25, r21
    1344:	a6 2b       	or	r26, r22
    1346:	b7 2b       	or	r27, r23
    1348:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    134c:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    1350:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    1354:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    1358:	b0 9b       	sbis	0x16, 0	; 22
    135a:	1b c0       	rjmp	.+54     	; 0x1392 <__vector_17+0x98>
    135c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1360:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1364:	c9 01       	movw	r24, r18
    1366:	01 96       	adiw	r24, 0x01	; 1
    1368:	09 2e       	mov	r0, r25
    136a:	00 0c       	add	r0, r0
    136c:	aa 0b       	sbc	r26, r26
    136e:	bb 0b       	sbc	r27, r27
    1370:	dc 01       	movw	r26, r24
    1372:	99 27       	eor	r25, r25
    1374:	88 27       	eor	r24, r24
    1376:	60 e0       	ldi	r22, 0x00	; 0
    1378:	70 e0       	ldi	r23, 0x00	; 0
    137a:	84 2b       	or	r24, r20
    137c:	95 2b       	or	r25, r21
    137e:	a6 2b       	or	r26, r22
    1380:	b7 2b       	or	r27, r23
    1382:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    1386:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    138a:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    138e:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    1392:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <mtable+0x18>
    1396:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <mtable+0x19>
    139a:	30 97       	sbiw	r30, 0x00	; 0
    139c:	39 f0       	breq	.+14     	; 0x13ac <__vector_17+0xb2>
    139e:	6c e0       	ldi	r22, 0x0C	; 12
    13a0:	70 e0       	ldi	r23, 0x00	; 0
    13a2:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <otable+0x18>
    13a6:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <otable+0x19>
    13aa:	09 95       	icall
    13ac:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
    13b0:	ff 91       	pop	r31
    13b2:	ef 91       	pop	r30
    13b4:	bf 91       	pop	r27
    13b6:	af 91       	pop	r26
    13b8:	9f 91       	pop	r25
    13ba:	8f 91       	pop	r24
    13bc:	7f 91       	pop	r23
    13be:	6f 91       	pop	r22
    13c0:	5f 91       	pop	r21
    13c2:	4f 91       	pop	r20
    13c4:	3f 91       	pop	r19
    13c6:	2f 91       	pop	r18
    13c8:	0f 90       	pop	r0
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	0f 90       	pop	r0
    13ce:	1f 90       	pop	r1
    13d0:	18 95       	reti

000013d2 <__vector_18>:
    13d2:	1f 92       	push	r1
    13d4:	0f 92       	push	r0
    13d6:	0f b6       	in	r0, 0x3f	; 63
    13d8:	0f 92       	push	r0
    13da:	11 24       	eor	r1, r1
    13dc:	2f 93       	push	r18
    13de:	3f 93       	push	r19
    13e0:	4f 93       	push	r20
    13e2:	5f 93       	push	r21
    13e4:	6f 93       	push	r22
    13e6:	7f 93       	push	r23
    13e8:	8f 93       	push	r24
    13ea:	9f 93       	push	r25
    13ec:	af 93       	push	r26
    13ee:	bf 93       	push	r27
    13f0:	ef 93       	push	r30
    13f2:	ff 93       	push	r31
    13f4:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <overflows>
    13f8:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <overflows+0x1>
    13fc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1400:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1404:	c9 01       	movw	r24, r18
    1406:	03 2e       	mov	r0, r19
    1408:	00 0c       	add	r0, r0
    140a:	aa 0b       	sbc	r26, r26
    140c:	bb 0b       	sbc	r27, r27
    140e:	dc 01       	movw	r26, r24
    1410:	99 27       	eor	r25, r25
    1412:	88 27       	eor	r24, r24
    1414:	60 e0       	ldi	r22, 0x00	; 0
    1416:	70 e0       	ldi	r23, 0x00	; 0
    1418:	84 2b       	or	r24, r20
    141a:	95 2b       	or	r25, r21
    141c:	a6 2b       	or	r26, r22
    141e:	b7 2b       	or	r27, r23
    1420:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    1424:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    1428:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    142c:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    1430:	b0 9b       	sbis	0x16, 0	; 22
    1432:	1b c0       	rjmp	.+54     	; 0x146a <__vector_18+0x98>
    1434:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1438:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    143c:	c9 01       	movw	r24, r18
    143e:	01 96       	adiw	r24, 0x01	; 1
    1440:	09 2e       	mov	r0, r25
    1442:	00 0c       	add	r0, r0
    1444:	aa 0b       	sbc	r26, r26
    1446:	bb 0b       	sbc	r27, r27
    1448:	dc 01       	movw	r26, r24
    144a:	99 27       	eor	r25, r25
    144c:	88 27       	eor	r24, r24
    144e:	60 e0       	ldi	r22, 0x00	; 0
    1450:	70 e0       	ldi	r23, 0x00	; 0
    1452:	84 2b       	or	r24, r20
    1454:	95 2b       	or	r25, r21
    1456:	a6 2b       	or	r26, r22
    1458:	b7 2b       	or	r27, r23
    145a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    145e:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    1462:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    1466:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    146a:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <mtable+0x1a>
    146e:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <mtable+0x1b>
    1472:	30 97       	sbiw	r30, 0x00	; 0
    1474:	39 f0       	breq	.+14     	; 0x1484 <__vector_18+0xb2>
    1476:	6d e0       	ldi	r22, 0x0D	; 13
    1478:	70 e0       	ldi	r23, 0x00	; 0
    147a:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <otable+0x1a>
    147e:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <otable+0x1b>
    1482:	09 95       	icall
    1484:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
    1488:	ff 91       	pop	r31
    148a:	ef 91       	pop	r30
    148c:	bf 91       	pop	r27
    148e:	af 91       	pop	r26
    1490:	9f 91       	pop	r25
    1492:	8f 91       	pop	r24
    1494:	7f 91       	pop	r23
    1496:	6f 91       	pop	r22
    1498:	5f 91       	pop	r21
    149a:	4f 91       	pop	r20
    149c:	3f 91       	pop	r19
    149e:	2f 91       	pop	r18
    14a0:	0f 90       	pop	r0
    14a2:	0f be       	out	0x3f, r0	; 63
    14a4:	0f 90       	pop	r0
    14a6:	1f 90       	pop	r1
    14a8:	18 95       	reti

000014aa <__vector_19>:
    14aa:	1f 92       	push	r1
    14ac:	0f 92       	push	r0
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	0f 92       	push	r0
    14b2:	11 24       	eor	r1, r1
    14b4:	2f 93       	push	r18
    14b6:	3f 93       	push	r19
    14b8:	4f 93       	push	r20
    14ba:	5f 93       	push	r21
    14bc:	6f 93       	push	r22
    14be:	7f 93       	push	r23
    14c0:	8f 93       	push	r24
    14c2:	9f 93       	push	r25
    14c4:	af 93       	push	r26
    14c6:	bf 93       	push	r27
    14c8:	ef 93       	push	r30
    14ca:	ff 93       	push	r31
    14cc:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <overflows>
    14d0:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <overflows+0x1>
    14d4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14d8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14dc:	c9 01       	movw	r24, r18
    14de:	03 2e       	mov	r0, r19
    14e0:	00 0c       	add	r0, r0
    14e2:	aa 0b       	sbc	r26, r26
    14e4:	bb 0b       	sbc	r27, r27
    14e6:	dc 01       	movw	r26, r24
    14e8:	99 27       	eor	r25, r25
    14ea:	88 27       	eor	r24, r24
    14ec:	60 e0       	ldi	r22, 0x00	; 0
    14ee:	70 e0       	ldi	r23, 0x00	; 0
    14f0:	84 2b       	or	r24, r20
    14f2:	95 2b       	or	r25, r21
    14f4:	a6 2b       	or	r26, r22
    14f6:	b7 2b       	or	r27, r23
    14f8:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    14fc:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    1500:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    1504:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    1508:	b0 9b       	sbis	0x16, 0	; 22
    150a:	1b c0       	rjmp	.+54     	; 0x1542 <__vector_19+0x98>
    150c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1510:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1514:	c9 01       	movw	r24, r18
    1516:	01 96       	adiw	r24, 0x01	; 1
    1518:	09 2e       	mov	r0, r25
    151a:	00 0c       	add	r0, r0
    151c:	aa 0b       	sbc	r26, r26
    151e:	bb 0b       	sbc	r27, r27
    1520:	dc 01       	movw	r26, r24
    1522:	99 27       	eor	r25, r25
    1524:	88 27       	eor	r24, r24
    1526:	60 e0       	ldi	r22, 0x00	; 0
    1528:	70 e0       	ldi	r23, 0x00	; 0
    152a:	84 2b       	or	r24, r20
    152c:	95 2b       	or	r25, r21
    152e:	a6 2b       	or	r26, r22
    1530:	b7 2b       	or	r27, r23
    1532:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    1536:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    153a:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    153e:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    1542:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <mtable+0x1c>
    1546:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <mtable+0x1d>
    154a:	30 97       	sbiw	r30, 0x00	; 0
    154c:	39 f0       	breq	.+14     	; 0x155c <__vector_19+0xb2>
    154e:	6e e0       	ldi	r22, 0x0E	; 14
    1550:	70 e0       	ldi	r23, 0x00	; 0
    1552:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <otable+0x1c>
    1556:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <otable+0x1d>
    155a:	09 95       	icall
    155c:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
    1560:	ff 91       	pop	r31
    1562:	ef 91       	pop	r30
    1564:	bf 91       	pop	r27
    1566:	af 91       	pop	r26
    1568:	9f 91       	pop	r25
    156a:	8f 91       	pop	r24
    156c:	7f 91       	pop	r23
    156e:	6f 91       	pop	r22
    1570:	5f 91       	pop	r21
    1572:	4f 91       	pop	r20
    1574:	3f 91       	pop	r19
    1576:	2f 91       	pop	r18
    1578:	0f 90       	pop	r0
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	0f 90       	pop	r0
    157e:	1f 90       	pop	r1
    1580:	18 95       	reti

00001582 <__vector_20>:
    1582:	1f 92       	push	r1
    1584:	0f 92       	push	r0
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	0f 92       	push	r0
    158a:	11 24       	eor	r1, r1
    158c:	2f 93       	push	r18
    158e:	3f 93       	push	r19
    1590:	4f 93       	push	r20
    1592:	5f 93       	push	r21
    1594:	6f 93       	push	r22
    1596:	7f 93       	push	r23
    1598:	8f 93       	push	r24
    159a:	9f 93       	push	r25
    159c:	af 93       	push	r26
    159e:	bf 93       	push	r27
    15a0:	ef 93       	push	r30
    15a2:	ff 93       	push	r31
    15a4:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <overflows>
    15a8:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <overflows+0x1>
    15ac:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    15b0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15b4:	c9 01       	movw	r24, r18
    15b6:	03 2e       	mov	r0, r19
    15b8:	00 0c       	add	r0, r0
    15ba:	aa 0b       	sbc	r26, r26
    15bc:	bb 0b       	sbc	r27, r27
    15be:	dc 01       	movw	r26, r24
    15c0:	99 27       	eor	r25, r25
    15c2:	88 27       	eor	r24, r24
    15c4:	60 e0       	ldi	r22, 0x00	; 0
    15c6:	70 e0       	ldi	r23, 0x00	; 0
    15c8:	84 2b       	or	r24, r20
    15ca:	95 2b       	or	r25, r21
    15cc:	a6 2b       	or	r26, r22
    15ce:	b7 2b       	or	r27, r23
    15d0:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    15d4:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    15d8:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    15dc:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    15e0:	b0 9b       	sbis	0x16, 0	; 22
    15e2:	1b c0       	rjmp	.+54     	; 0x161a <__vector_20+0x98>
    15e4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    15e8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15ec:	c9 01       	movw	r24, r18
    15ee:	01 96       	adiw	r24, 0x01	; 1
    15f0:	09 2e       	mov	r0, r25
    15f2:	00 0c       	add	r0, r0
    15f4:	aa 0b       	sbc	r26, r26
    15f6:	bb 0b       	sbc	r27, r27
    15f8:	dc 01       	movw	r26, r24
    15fa:	99 27       	eor	r25, r25
    15fc:	88 27       	eor	r24, r24
    15fe:	60 e0       	ldi	r22, 0x00	; 0
    1600:	70 e0       	ldi	r23, 0x00	; 0
    1602:	84 2b       	or	r24, r20
    1604:	95 2b       	or	r25, r21
    1606:	a6 2b       	or	r26, r22
    1608:	b7 2b       	or	r27, r23
    160a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    160e:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    1612:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    1616:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    161a:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <mtable+0x1e>
    161e:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <mtable+0x1f>
    1622:	30 97       	sbiw	r30, 0x00	; 0
    1624:	39 f0       	breq	.+14     	; 0x1634 <__vector_20+0xb2>
    1626:	6f e0       	ldi	r22, 0x0F	; 15
    1628:	70 e0       	ldi	r23, 0x00	; 0
    162a:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <otable+0x1e>
    162e:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <otable+0x1f>
    1632:	09 95       	icall
    1634:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
    1638:	ff 91       	pop	r31
    163a:	ef 91       	pop	r30
    163c:	bf 91       	pop	r27
    163e:	af 91       	pop	r26
    1640:	9f 91       	pop	r25
    1642:	8f 91       	pop	r24
    1644:	7f 91       	pop	r23
    1646:	6f 91       	pop	r22
    1648:	5f 91       	pop	r21
    164a:	4f 91       	pop	r20
    164c:	3f 91       	pop	r19
    164e:	2f 91       	pop	r18
    1650:	0f 90       	pop	r0
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	0f 90       	pop	r0
    1656:	1f 90       	pop	r1
    1658:	18 95       	reti

0000165a <__vector_21>:
    165a:	1f 92       	push	r1
    165c:	0f 92       	push	r0
    165e:	0f b6       	in	r0, 0x3f	; 63
    1660:	0f 92       	push	r0
    1662:	11 24       	eor	r1, r1
    1664:	2f 93       	push	r18
    1666:	3f 93       	push	r19
    1668:	4f 93       	push	r20
    166a:	5f 93       	push	r21
    166c:	6f 93       	push	r22
    166e:	7f 93       	push	r23
    1670:	8f 93       	push	r24
    1672:	9f 93       	push	r25
    1674:	af 93       	push	r26
    1676:	bf 93       	push	r27
    1678:	ef 93       	push	r30
    167a:	ff 93       	push	r31
    167c:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <overflows>
    1680:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <overflows+0x1>
    1684:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1688:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    168c:	c9 01       	movw	r24, r18
    168e:	03 2e       	mov	r0, r19
    1690:	00 0c       	add	r0, r0
    1692:	aa 0b       	sbc	r26, r26
    1694:	bb 0b       	sbc	r27, r27
    1696:	dc 01       	movw	r26, r24
    1698:	99 27       	eor	r25, r25
    169a:	88 27       	eor	r24, r24
    169c:	60 e0       	ldi	r22, 0x00	; 0
    169e:	70 e0       	ldi	r23, 0x00	; 0
    16a0:	84 2b       	or	r24, r20
    16a2:	95 2b       	or	r25, r21
    16a4:	a6 2b       	or	r26, r22
    16a6:	b7 2b       	or	r27, r23
    16a8:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    16ac:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    16b0:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    16b4:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    16b8:	b0 9b       	sbis	0x16, 0	; 22
    16ba:	1b c0       	rjmp	.+54     	; 0x16f2 <__vector_21+0x98>
    16bc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16c0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16c4:	c9 01       	movw	r24, r18
    16c6:	01 96       	adiw	r24, 0x01	; 1
    16c8:	09 2e       	mov	r0, r25
    16ca:	00 0c       	add	r0, r0
    16cc:	aa 0b       	sbc	r26, r26
    16ce:	bb 0b       	sbc	r27, r27
    16d0:	dc 01       	movw	r26, r24
    16d2:	99 27       	eor	r25, r25
    16d4:	88 27       	eor	r24, r24
    16d6:	60 e0       	ldi	r22, 0x00	; 0
    16d8:	70 e0       	ldi	r23, 0x00	; 0
    16da:	84 2b       	or	r24, r20
    16dc:	95 2b       	or	r25, r21
    16de:	a6 2b       	or	r26, r22
    16e0:	b7 2b       	or	r27, r23
    16e2:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    16e6:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    16ea:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    16ee:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    16f2:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <mtable+0x20>
    16f6:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <mtable+0x21>
    16fa:	30 97       	sbiw	r30, 0x00	; 0
    16fc:	39 f0       	breq	.+14     	; 0x170c <__vector_21+0xb2>
    16fe:	60 e1       	ldi	r22, 0x10	; 16
    1700:	70 e0       	ldi	r23, 0x00	; 0
    1702:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <otable+0x20>
    1706:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <otable+0x21>
    170a:	09 95       	icall
    170c:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
    1710:	ff 91       	pop	r31
    1712:	ef 91       	pop	r30
    1714:	bf 91       	pop	r27
    1716:	af 91       	pop	r26
    1718:	9f 91       	pop	r25
    171a:	8f 91       	pop	r24
    171c:	7f 91       	pop	r23
    171e:	6f 91       	pop	r22
    1720:	5f 91       	pop	r21
    1722:	4f 91       	pop	r20
    1724:	3f 91       	pop	r19
    1726:	2f 91       	pop	r18
    1728:	0f 90       	pop	r0
    172a:	0f be       	out	0x3f, r0	; 63
    172c:	0f 90       	pop	r0
    172e:	1f 90       	pop	r1
    1730:	18 95       	reti

00001732 <__vector_22>:
    1732:	1f 92       	push	r1
    1734:	0f 92       	push	r0
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	0f 92       	push	r0
    173a:	11 24       	eor	r1, r1
    173c:	2f 93       	push	r18
    173e:	3f 93       	push	r19
    1740:	4f 93       	push	r20
    1742:	5f 93       	push	r21
    1744:	6f 93       	push	r22
    1746:	7f 93       	push	r23
    1748:	8f 93       	push	r24
    174a:	9f 93       	push	r25
    174c:	af 93       	push	r26
    174e:	bf 93       	push	r27
    1750:	ef 93       	push	r30
    1752:	ff 93       	push	r31
    1754:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <overflows>
    1758:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <overflows+0x1>
    175c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1760:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1764:	c9 01       	movw	r24, r18
    1766:	03 2e       	mov	r0, r19
    1768:	00 0c       	add	r0, r0
    176a:	aa 0b       	sbc	r26, r26
    176c:	bb 0b       	sbc	r27, r27
    176e:	dc 01       	movw	r26, r24
    1770:	99 27       	eor	r25, r25
    1772:	88 27       	eor	r24, r24
    1774:	60 e0       	ldi	r22, 0x00	; 0
    1776:	70 e0       	ldi	r23, 0x00	; 0
    1778:	84 2b       	or	r24, r20
    177a:	95 2b       	or	r25, r21
    177c:	a6 2b       	or	r26, r22
    177e:	b7 2b       	or	r27, r23
    1780:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    1784:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    1788:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    178c:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    1790:	b0 9b       	sbis	0x16, 0	; 22
    1792:	1b c0       	rjmp	.+54     	; 0x17ca <__vector_22+0x98>
    1794:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1798:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    179c:	c9 01       	movw	r24, r18
    179e:	01 96       	adiw	r24, 0x01	; 1
    17a0:	09 2e       	mov	r0, r25
    17a2:	00 0c       	add	r0, r0
    17a4:	aa 0b       	sbc	r26, r26
    17a6:	bb 0b       	sbc	r27, r27
    17a8:	dc 01       	movw	r26, r24
    17aa:	99 27       	eor	r25, r25
    17ac:	88 27       	eor	r24, r24
    17ae:	60 e0       	ldi	r22, 0x00	; 0
    17b0:	70 e0       	ldi	r23, 0x00	; 0
    17b2:	84 2b       	or	r24, r20
    17b4:	95 2b       	or	r25, r21
    17b6:	a6 2b       	or	r26, r22
    17b8:	b7 2b       	or	r27, r23
    17ba:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    17be:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    17c2:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    17c6:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    17ca:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <mtable+0x22>
    17ce:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <mtable+0x23>
    17d2:	30 97       	sbiw	r30, 0x00	; 0
    17d4:	39 f0       	breq	.+14     	; 0x17e4 <__vector_22+0xb2>
    17d6:	61 e1       	ldi	r22, 0x11	; 17
    17d8:	70 e0       	ldi	r23, 0x00	; 0
    17da:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <otable+0x22>
    17de:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <otable+0x23>
    17e2:	09 95       	icall
    17e4:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
    17e8:	ff 91       	pop	r31
    17ea:	ef 91       	pop	r30
    17ec:	bf 91       	pop	r27
    17ee:	af 91       	pop	r26
    17f0:	9f 91       	pop	r25
    17f2:	8f 91       	pop	r24
    17f4:	7f 91       	pop	r23
    17f6:	6f 91       	pop	r22
    17f8:	5f 91       	pop	r21
    17fa:	4f 91       	pop	r20
    17fc:	3f 91       	pop	r19
    17fe:	2f 91       	pop	r18
    1800:	0f 90       	pop	r0
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	0f 90       	pop	r0
    1806:	1f 90       	pop	r1
    1808:	18 95       	reti

0000180a <enqueueByDeadline>:
    180a:	ef 92       	push	r14
    180c:	ff 92       	push	r15
    180e:	0f 93       	push	r16
    1810:	1f 93       	push	r17
    1812:	cf 93       	push	r28
    1814:	df 93       	push	r29
    1816:	7b 01       	movw	r14, r22
    1818:	eb 01       	movw	r28, r22
    181a:	a8 81       	ld	r26, Y
    181c:	b9 81       	ldd	r27, Y+1	; 0x01
    181e:	10 97       	sbiw	r26, 0x00	; 0
    1820:	61 f1       	breq	.+88     	; 0x187a <enqueueByDeadline+0x70>
    1822:	fc 01       	movw	r30, r24
    1824:	06 81       	ldd	r16, Z+6	; 0x06
    1826:	17 81       	ldd	r17, Z+7	; 0x07
    1828:	20 85       	ldd	r18, Z+8	; 0x08
    182a:	31 85       	ldd	r19, Z+9	; 0x09
    182c:	16 96       	adiw	r26, 0x06	; 6
    182e:	4d 91       	ld	r20, X+
    1830:	5d 91       	ld	r21, X+
    1832:	6d 91       	ld	r22, X+
    1834:	7c 91       	ld	r23, X
    1836:	19 97       	sbiw	r26, 0x09	; 9
    1838:	04 17       	cp	r16, r20
    183a:	15 07       	cpc	r17, r21
    183c:	26 07       	cpc	r18, r22
    183e:	37 07       	cpc	r19, r23
    1840:	14 f4       	brge	.+4      	; 0x1846 <enqueueByDeadline+0x3c>
    1842:	1b c0       	rjmp	.+54     	; 0x187a <enqueueByDeadline+0x70>
    1844:	df 01       	movw	r26, r30
    1846:	ed 91       	ld	r30, X+
    1848:	fc 91       	ld	r31, X
    184a:	11 97       	sbiw	r26, 0x01	; 1
    184c:	30 97       	sbiw	r30, 0x00	; 0
    184e:	49 f0       	breq	.+18     	; 0x1862 <enqueueByDeadline+0x58>
    1850:	46 81       	ldd	r20, Z+6	; 0x06
    1852:	57 81       	ldd	r21, Z+7	; 0x07
    1854:	60 85       	ldd	r22, Z+8	; 0x08
    1856:	71 85       	ldd	r23, Z+9	; 0x09
    1858:	04 17       	cp	r16, r20
    185a:	15 07       	cpc	r17, r21
    185c:	26 07       	cpc	r18, r22
    185e:	37 07       	cpc	r19, r23
    1860:	8c f7       	brge	.-30     	; 0x1844 <enqueueByDeadline+0x3a>
    1862:	ec 01       	movw	r28, r24
    1864:	f9 83       	std	Y+1, r31	; 0x01
    1866:	e8 83       	st	Y, r30
    1868:	10 97       	sbiw	r26, 0x00	; 0
    186a:	21 f4       	brne	.+8      	; 0x1874 <enqueueByDeadline+0x6a>
    186c:	f7 01       	movw	r30, r14
    186e:	91 83       	std	Z+1, r25	; 0x01
    1870:	80 83       	st	Z, r24
    1872:	07 c0       	rjmp	.+14     	; 0x1882 <enqueueByDeadline+0x78>
    1874:	8d 93       	st	X+, r24
    1876:	9c 93       	st	X, r25
    1878:	04 c0       	rjmp	.+8      	; 0x1882 <enqueueByDeadline+0x78>
    187a:	ec 01       	movw	r28, r24
    187c:	b9 83       	std	Y+1, r27	; 0x01
    187e:	a8 83       	st	Y, r26
    1880:	f5 cf       	rjmp	.-22     	; 0x186c <enqueueByDeadline+0x62>
    1882:	df 91       	pop	r29
    1884:	cf 91       	pop	r28
    1886:	1f 91       	pop	r17
    1888:	0f 91       	pop	r16
    188a:	ff 90       	pop	r15
    188c:	ef 90       	pop	r14
    188e:	08 95       	ret

00001890 <enqueueByBaseline>:
    1890:	ef 92       	push	r14
    1892:	ff 92       	push	r15
    1894:	0f 93       	push	r16
    1896:	1f 93       	push	r17
    1898:	cf 93       	push	r28
    189a:	df 93       	push	r29
    189c:	7b 01       	movw	r14, r22
    189e:	eb 01       	movw	r28, r22
    18a0:	a8 81       	ld	r26, Y
    18a2:	b9 81       	ldd	r27, Y+1	; 0x01
    18a4:	10 97       	sbiw	r26, 0x00	; 0
    18a6:	61 f1       	breq	.+88     	; 0x1900 <enqueueByBaseline+0x70>
    18a8:	fc 01       	movw	r30, r24
    18aa:	02 81       	ldd	r16, Z+2	; 0x02
    18ac:	13 81       	ldd	r17, Z+3	; 0x03
    18ae:	24 81       	ldd	r18, Z+4	; 0x04
    18b0:	35 81       	ldd	r19, Z+5	; 0x05
    18b2:	12 96       	adiw	r26, 0x02	; 2
    18b4:	4d 91       	ld	r20, X+
    18b6:	5d 91       	ld	r21, X+
    18b8:	6d 91       	ld	r22, X+
    18ba:	7c 91       	ld	r23, X
    18bc:	15 97       	sbiw	r26, 0x05	; 5
    18be:	04 17       	cp	r16, r20
    18c0:	15 07       	cpc	r17, r21
    18c2:	26 07       	cpc	r18, r22
    18c4:	37 07       	cpc	r19, r23
    18c6:	14 f4       	brge	.+4      	; 0x18cc <enqueueByBaseline+0x3c>
    18c8:	1b c0       	rjmp	.+54     	; 0x1900 <enqueueByBaseline+0x70>
    18ca:	df 01       	movw	r26, r30
    18cc:	ed 91       	ld	r30, X+
    18ce:	fc 91       	ld	r31, X
    18d0:	11 97       	sbiw	r26, 0x01	; 1
    18d2:	30 97       	sbiw	r30, 0x00	; 0
    18d4:	49 f0       	breq	.+18     	; 0x18e8 <enqueueByBaseline+0x58>
    18d6:	42 81       	ldd	r20, Z+2	; 0x02
    18d8:	53 81       	ldd	r21, Z+3	; 0x03
    18da:	64 81       	ldd	r22, Z+4	; 0x04
    18dc:	75 81       	ldd	r23, Z+5	; 0x05
    18de:	04 17       	cp	r16, r20
    18e0:	15 07       	cpc	r17, r21
    18e2:	26 07       	cpc	r18, r22
    18e4:	37 07       	cpc	r19, r23
    18e6:	8c f7       	brge	.-30     	; 0x18ca <enqueueByBaseline+0x3a>
    18e8:	ec 01       	movw	r28, r24
    18ea:	f9 83       	std	Y+1, r31	; 0x01
    18ec:	e8 83       	st	Y, r30
    18ee:	10 97       	sbiw	r26, 0x00	; 0
    18f0:	21 f4       	brne	.+8      	; 0x18fa <enqueueByBaseline+0x6a>
    18f2:	f7 01       	movw	r30, r14
    18f4:	91 83       	std	Z+1, r25	; 0x01
    18f6:	80 83       	st	Z, r24
    18f8:	07 c0       	rjmp	.+14     	; 0x1908 <enqueueByBaseline+0x78>
    18fa:	8d 93       	st	X+, r24
    18fc:	9c 93       	st	X, r25
    18fe:	04 c0       	rjmp	.+8      	; 0x1908 <enqueueByBaseline+0x78>
    1900:	ec 01       	movw	r28, r24
    1902:	b9 83       	std	Y+1, r27	; 0x01
    1904:	a8 83       	st	Y, r26
    1906:	f5 cf       	rjmp	.-22     	; 0x18f2 <enqueueByBaseline+0x62>
    1908:	df 91       	pop	r29
    190a:	cf 91       	pop	r28
    190c:	1f 91       	pop	r17
    190e:	0f 91       	pop	r16
    1910:	ff 90       	pop	r15
    1912:	ef 90       	pop	r14
    1914:	08 95       	ret

00001916 <dequeue>:
    1916:	dc 01       	movw	r26, r24
    1918:	ed 91       	ld	r30, X+
    191a:	fc 91       	ld	r31, X
    191c:	11 97       	sbiw	r26, 0x01	; 1
    191e:	30 97       	sbiw	r30, 0x00	; 0
    1920:	59 f4       	brne	.+22     	; 0x1938 <dequeue+0x22>
    1922:	8f ef       	ldi	r24, 0xFF	; 255
    1924:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    1928:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
    192c:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	83 bf       	out	0x33, r24	; 51
    1934:	88 95       	sleep
    1936:	fd cf       	rjmp	.-6      	; 0x1932 <dequeue+0x1c>
    1938:	20 81       	ld	r18, Z
    193a:	31 81       	ldd	r19, Z+1	; 0x01
    193c:	2d 93       	st	X+, r18
    193e:	3c 93       	st	X, r19
    1940:	cf 01       	movw	r24, r30
    1942:	08 95       	ret

00001944 <__vector_9>:
    1944:	1f 92       	push	r1
    1946:	0f 92       	push	r0
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	0f 92       	push	r0
    194c:	11 24       	eor	r1, r1
    194e:	2f 93       	push	r18
    1950:	3f 93       	push	r19
    1952:	4f 93       	push	r20
    1954:	5f 93       	push	r21
    1956:	6f 93       	push	r22
    1958:	7f 93       	push	r23
    195a:	8f 93       	push	r24
    195c:	9f 93       	push	r25
    195e:	ef 93       	push	r30
    1960:	ff 93       	push	r31
    1962:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <overflows>
    1966:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <overflows+0x1>
    196a:	01 96       	adiw	r24, 0x01	; 1
    196c:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <overflows+0x1>
    1970:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <overflows>
    1974:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <timerQ>
    1978:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <timerQ+0x1>
    197c:	30 97       	sbiw	r30, 0x00	; 0
    197e:	01 f1       	breq	.+64     	; 0x19c0 <__vector_9+0x7c>
    1980:	42 81       	ldd	r20, Z+2	; 0x02
    1982:	53 81       	ldd	r21, Z+3	; 0x03
    1984:	64 81       	ldd	r22, Z+4	; 0x04
    1986:	75 81       	ldd	r23, Z+5	; 0x05
    1988:	86 17       	cp	r24, r22
    198a:	97 07       	cpc	r25, r23
    198c:	c9 f4       	brne	.+50     	; 0x19c0 <__vector_9+0x7c>
    198e:	ca 01       	movw	r24, r20
    1990:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1994:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1998:	42 1b       	sub	r20, r18
    199a:	53 0b       	sbc	r21, r19
    199c:	41 30       	cpi	r20, 0x01	; 1
    199e:	51 05       	cpc	r21, r1
    19a0:	29 f4       	brne	.+10     	; 0x19ac <__vector_9+0x68>
    19a2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19a6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19aa:	01 96       	adiw	r24, 0x01	; 1
    19ac:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    19b0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    19b4:	ef e6       	ldi	r30, 0x6F	; 111
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	82 60       	ori	r24, 0x02	; 2
    19bc:	80 83       	st	Z, r24
    19be:	05 c0       	rjmp	.+10     	; 0x19ca <__vector_9+0x86>
    19c0:	ef e6       	ldi	r30, 0x6F	; 111
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	8d 7f       	andi	r24, 0xFD	; 253
    19c8:	80 83       	st	Z, r24
    19ca:	ff 91       	pop	r31
    19cc:	ef 91       	pop	r30
    19ce:	9f 91       	pop	r25
    19d0:	8f 91       	pop	r24
    19d2:	7f 91       	pop	r23
    19d4:	6f 91       	pop	r22
    19d6:	5f 91       	pop	r21
    19d8:	4f 91       	pop	r20
    19da:	3f 91       	pop	r19
    19dc:	2f 91       	pop	r18
    19de:	0f 90       	pop	r0
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	0f 90       	pop	r0
    19e4:	1f 90       	pop	r1
    19e6:	18 95       	reti

000019e8 <__vector_7>:
    19e8:	1f 92       	push	r1
    19ea:	0f 92       	push	r0
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	0f 92       	push	r0
    19f0:	11 24       	eor	r1, r1
    19f2:	cf 92       	push	r12
    19f4:	df 92       	push	r13
    19f6:	ef 92       	push	r14
    19f8:	ff 92       	push	r15
    19fa:	2f 93       	push	r18
    19fc:	3f 93       	push	r19
    19fe:	4f 93       	push	r20
    1a00:	5f 93       	push	r21
    1a02:	6f 93       	push	r22
    1a04:	7f 93       	push	r23
    1a06:	8f 93       	push	r24
    1a08:	9f 93       	push	r25
    1a0a:	af 93       	push	r26
    1a0c:	bf 93       	push	r27
    1a0e:	ef 93       	push	r30
    1a10:	ff 93       	push	r31
    1a12:	c0 90 34 01 	lds	r12, 0x0134	; 0x800134 <overflows>
    1a16:	d0 90 35 01 	lds	r13, 0x0135	; 0x800135 <overflows+0x1>
    1a1a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a1e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a22:	b0 99       	sbic	0x16, 0	; 22
    1a24:	0f c0       	rjmp	.+30     	; 0x1a44 <__vector_7+0x5c>
    1a26:	0d 2c       	mov	r0, r13
    1a28:	00 0c       	add	r0, r0
    1a2a:	ee 08       	sbc	r14, r14
    1a2c:	ff 08       	sbc	r15, r15
    1a2e:	d6 01       	movw	r26, r12
    1a30:	99 27       	eor	r25, r25
    1a32:	88 27       	eor	r24, r24
    1a34:	69 01       	movw	r12, r18
    1a36:	e1 2c       	mov	r14, r1
    1a38:	f1 2c       	mov	r15, r1
    1a3a:	c8 2a       	or	r12, r24
    1a3c:	d9 2a       	or	r13, r25
    1a3e:	ea 2a       	or	r14, r26
    1a40:	fb 2a       	or	r15, r27
    1a42:	15 c0       	rjmp	.+42     	; 0x1a6e <__vector_7+0x86>
    1a44:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a48:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a4c:	8f ef       	ldi	r24, 0xFF	; 255
    1a4e:	c8 1a       	sub	r12, r24
    1a50:	d8 0a       	sbc	r13, r24
    1a52:	0d 2c       	mov	r0, r13
    1a54:	00 0c       	add	r0, r0
    1a56:	ee 08       	sbc	r14, r14
    1a58:	ff 08       	sbc	r15, r15
    1a5a:	d6 01       	movw	r26, r12
    1a5c:	99 27       	eor	r25, r25
    1a5e:	88 27       	eor	r24, r24
    1a60:	69 01       	movw	r12, r18
    1a62:	e1 2c       	mov	r14, r1
    1a64:	f1 2c       	mov	r15, r1
    1a66:	c8 2a       	or	r12, r24
    1a68:	d9 2a       	or	r13, r25
    1a6a:	ea 2a       	or	r14, r26
    1a6c:	fb 2a       	or	r15, r27
    1a6e:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <timerQ>
    1a72:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <timerQ+0x1>
    1a76:	30 97       	sbiw	r30, 0x00	; 0
    1a78:	09 f4       	brne	.+2      	; 0x1a7c <__vector_7+0x94>
    1a7a:	42 c0       	rjmp	.+132    	; 0x1b00 <__vector_7+0x118>
    1a7c:	82 81       	ldd	r24, Z+2	; 0x02
    1a7e:	93 81       	ldd	r25, Z+3	; 0x03
    1a80:	a4 81       	ldd	r26, Z+4	; 0x04
    1a82:	b5 81       	ldd	r27, Z+5	; 0x05
    1a84:	8c 19       	sub	r24, r12
    1a86:	9d 09       	sbc	r25, r13
    1a88:	ae 09       	sbc	r26, r14
    1a8a:	bf 09       	sbc	r27, r15
    1a8c:	18 16       	cp	r1, r24
    1a8e:	19 06       	cpc	r1, r25
    1a90:	1a 06       	cpc	r1, r26
    1a92:	1b 06       	cpc	r1, r27
    1a94:	ec f1       	brlt	.+122    	; 0x1b10 <__vector_7+0x128>
    1a96:	8a e3       	ldi	r24, 0x3A	; 58
    1a98:	91 e0       	ldi	r25, 0x01	; 1
    1a9a:	0e 94 8b 0c 	call	0x1916	; 0x1916 <dequeue>
    1a9e:	6c e3       	ldi	r22, 0x3C	; 60
    1aa0:	71 e0       	ldi	r23, 0x01	; 1
    1aa2:	0e 94 05 0c 	call	0x180a	; 0x180a <enqueueByDeadline>
    1aa6:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <timerQ>
    1aaa:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <timerQ+0x1>
    1aae:	30 97       	sbiw	r30, 0x00	; 0
    1ab0:	39 f1       	breq	.+78     	; 0x1b00 <__vector_7+0x118>
    1ab2:	82 81       	ldd	r24, Z+2	; 0x02
    1ab4:	93 81       	ldd	r25, Z+3	; 0x03
    1ab6:	a4 81       	ldd	r26, Z+4	; 0x04
    1ab8:	b5 81       	ldd	r27, Z+5	; 0x05
    1aba:	8c 19       	sub	r24, r12
    1abc:	9d 09       	sbc	r25, r13
    1abe:	ae 09       	sbc	r26, r14
    1ac0:	bf 09       	sbc	r27, r15
    1ac2:	18 16       	cp	r1, r24
    1ac4:	19 06       	cpc	r1, r25
    1ac6:	1a 06       	cpc	r1, r26
    1ac8:	1b 06       	cpc	r1, r27
    1aca:	2c f7       	brge	.-54     	; 0x1a96 <__vector_7+0xae>
    1acc:	21 c0       	rjmp	.+66     	; 0x1b10 <__vector_7+0x128>
    1ace:	9c 01       	movw	r18, r24
    1ad0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ad4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ad8:	84 1b       	sub	r24, r20
    1ada:	95 0b       	sbc	r25, r21
    1adc:	01 97       	sbiw	r24, 0x01	; 1
    1ade:	31 f4       	brne	.+12     	; 0x1aec <__vector_7+0x104>
    1ae0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ae4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ae8:	2f 5f       	subi	r18, 0xFF	; 255
    1aea:	3f 4f       	sbci	r19, 0xFF	; 255
    1aec:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1af0:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1af4:	ef e6       	ldi	r30, 0x6F	; 111
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	82 60       	ori	r24, 0x02	; 2
    1afc:	80 83       	st	Z, r24
    1afe:	05 c0       	rjmp	.+10     	; 0x1b0a <__vector_7+0x122>
    1b00:	ef e6       	ldi	r30, 0x6F	; 111
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	80 81       	ld	r24, Z
    1b06:	8d 7f       	andi	r24, 0xFD	; 253
    1b08:	80 83       	st	Z, r24
    1b0a:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
    1b0e:	0c c0       	rjmp	.+24     	; 0x1b28 <__vector_7+0x140>
    1b10:	82 81       	ldd	r24, Z+2	; 0x02
    1b12:	93 81       	ldd	r25, Z+3	; 0x03
    1b14:	a4 81       	ldd	r26, Z+4	; 0x04
    1b16:	b5 81       	ldd	r27, Z+5	; 0x05
    1b18:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <overflows>
    1b1c:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <overflows+0x1>
    1b20:	2a 17       	cp	r18, r26
    1b22:	3b 07       	cpc	r19, r27
    1b24:	69 f7       	brne	.-38     	; 0x1b00 <__vector_7+0x118>
    1b26:	d3 cf       	rjmp	.-90     	; 0x1ace <__vector_7+0xe6>
    1b28:	ff 91       	pop	r31
    1b2a:	ef 91       	pop	r30
    1b2c:	bf 91       	pop	r27
    1b2e:	af 91       	pop	r26
    1b30:	9f 91       	pop	r25
    1b32:	8f 91       	pop	r24
    1b34:	7f 91       	pop	r23
    1b36:	6f 91       	pop	r22
    1b38:	5f 91       	pop	r21
    1b3a:	4f 91       	pop	r20
    1b3c:	3f 91       	pop	r19
    1b3e:	2f 91       	pop	r18
    1b40:	ff 90       	pop	r15
    1b42:	ef 90       	pop	r14
    1b44:	df 90       	pop	r13
    1b46:	cf 90       	pop	r12
    1b48:	0f 90       	pop	r0
    1b4a:	0f be       	out	0x3f, r0	; 63
    1b4c:	0f 90       	pop	r0
    1b4e:	1f 90       	pop	r1
    1b50:	18 95       	reti

00001b52 <async>:
    1b52:	3f 92       	push	r3
    1b54:	4f 92       	push	r4
    1b56:	5f 92       	push	r5
    1b58:	6f 92       	push	r6
    1b5a:	7f 92       	push	r7
    1b5c:	8f 92       	push	r8
    1b5e:	9f 92       	push	r9
    1b60:	af 92       	push	r10
    1b62:	bf 92       	push	r11
    1b64:	cf 92       	push	r12
    1b66:	df 92       	push	r13
    1b68:	ef 92       	push	r14
    1b6a:	ff 92       	push	r15
    1b6c:	0f 93       	push	r16
    1b6e:	1f 93       	push	r17
    1b70:	cf 93       	push	r28
    1b72:	df 93       	push	r29
    1b74:	2b 01       	movw	r4, r22
    1b76:	3c 01       	movw	r6, r24
    1b78:	49 01       	movw	r8, r18
    1b7a:	5a 01       	movw	r10, r20
    1b7c:	8f b7       	in	r24, 0x3f	; 63
    1b7e:	80 78       	andi	r24, 0x80	; 128
    1b80:	38 2e       	mov	r3, r24
    1b82:	f8 94       	cli
    1b84:	8d e2       	ldi	r24, 0x2D	; 45
    1b86:	91 e0       	ldi	r25, 0x01	; 1
    1b88:	0e 94 8b 0c 	call	0x1916	; 0x1916 <dequeue>
    1b8c:	ec 01       	movw	r28, r24
    1b8e:	1b 87       	std	Y+11, r17	; 0x0b
    1b90:	0a 87       	std	Y+10, r16	; 0x0a
    1b92:	fd 86       	std	Y+13, r15	; 0x0d
    1b94:	ec 86       	std	Y+12, r14	; 0x0c
    1b96:	df 86       	std	Y+15, r13	; 0x0f
    1b98:	ce 86       	std	Y+14, r12	; 0x0e
    1b9a:	33 20       	and	r3, r3
    1b9c:	61 f0       	breq	.+24     	; 0x1bb6 <async+0x64>
    1b9e:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <current>
    1ba2:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <current+0x1>
    1ba6:	02 80       	ldd	r0, Z+2	; 0x02
    1ba8:	f3 81       	ldd	r31, Z+3	; 0x03
    1baa:	e0 2d       	mov	r30, r0
    1bac:	82 81       	ldd	r24, Z+2	; 0x02
    1bae:	93 81       	ldd	r25, Z+3	; 0x03
    1bb0:	a4 81       	ldd	r26, Z+4	; 0x04
    1bb2:	b5 81       	ldd	r27, Z+5	; 0x05
    1bb4:	08 c0       	rjmp	.+16     	; 0x1bc6 <async+0x74>
    1bb6:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <timestamp>
    1bba:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <timestamp+0x1>
    1bbe:	a0 91 38 01 	lds	r26, 0x0138	; 0x800138 <timestamp+0x2>
    1bc2:	b0 91 39 01 	lds	r27, 0x0139	; 0x800139 <timestamp+0x3>
    1bc6:	48 0e       	add	r4, r24
    1bc8:	59 1e       	adc	r5, r25
    1bca:	6a 1e       	adc	r6, r26
    1bcc:	7b 1e       	adc	r7, r27
    1bce:	4a 82       	std	Y+2, r4	; 0x02
    1bd0:	5b 82       	std	Y+3, r5	; 0x03
    1bd2:	6c 82       	std	Y+4, r6	; 0x04
    1bd4:	7d 82       	std	Y+5, r7	; 0x05
    1bd6:	18 14       	cp	r1, r8
    1bd8:	19 04       	cpc	r1, r9
    1bda:	1a 04       	cpc	r1, r10
    1bdc:	1b 04       	cpc	r1, r11
    1bde:	44 f0       	brlt	.+16     	; 0x1bf0 <async+0x9e>
    1be0:	0f 2e       	mov	r0, r31
    1be2:	88 24       	eor	r8, r8
    1be4:	8a 94       	dec	r8
    1be6:	98 2c       	mov	r9, r8
    1be8:	a8 2c       	mov	r10, r8
    1bea:	ff e7       	ldi	r31, 0x7F	; 127
    1bec:	bf 2e       	mov	r11, r31
    1bee:	f0 2d       	mov	r31, r0
    1bf0:	84 0c       	add	r8, r4
    1bf2:	95 1c       	adc	r9, r5
    1bf4:	a6 1c       	adc	r10, r6
    1bf6:	b7 1c       	adc	r11, r7
    1bf8:	8e 82       	std	Y+6, r8	; 0x06
    1bfa:	9f 82       	std	Y+7, r9	; 0x07
    1bfc:	a8 86       	std	Y+8, r10	; 0x08
    1bfe:	b9 86       	std	Y+9, r11	; 0x09
    1c00:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <overflows>
    1c04:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <overflows+0x1>
    1c08:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c0c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c10:	b0 99       	sbic	0x16, 0	; 22
    1c12:	0e c0       	rjmp	.+28     	; 0x1c30 <async+0xde>
    1c14:	09 2e       	mov	r0, r25
    1c16:	00 0c       	add	r0, r0
    1c18:	aa 0b       	sbc	r26, r26
    1c1a:	bb 0b       	sbc	r27, r27
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	99 27       	eor	r25, r25
    1c20:	88 27       	eor	r24, r24
    1c22:	60 e0       	ldi	r22, 0x00	; 0
    1c24:	70 e0       	ldi	r23, 0x00	; 0
    1c26:	84 2b       	or	r24, r20
    1c28:	95 2b       	or	r25, r21
    1c2a:	a6 2b       	or	r26, r22
    1c2c:	b7 2b       	or	r27, r23
    1c2e:	13 c0       	rjmp	.+38     	; 0x1c56 <async+0x104>
    1c30:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c34:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c38:	01 96       	adiw	r24, 0x01	; 1
    1c3a:	09 2e       	mov	r0, r25
    1c3c:	00 0c       	add	r0, r0
    1c3e:	aa 0b       	sbc	r26, r26
    1c40:	bb 0b       	sbc	r27, r27
    1c42:	dc 01       	movw	r26, r24
    1c44:	99 27       	eor	r25, r25
    1c46:	88 27       	eor	r24, r24
    1c48:	a9 01       	movw	r20, r18
    1c4a:	60 e0       	ldi	r22, 0x00	; 0
    1c4c:	70 e0       	ldi	r23, 0x00	; 0
    1c4e:	84 2b       	or	r24, r20
    1c50:	95 2b       	or	r25, r21
    1c52:	a6 2b       	or	r26, r22
    1c54:	b7 2b       	or	r27, r23
    1c56:	48 1a       	sub	r4, r24
    1c58:	59 0a       	sbc	r5, r25
    1c5a:	6a 0a       	sbc	r6, r26
    1c5c:	7b 0a       	sbc	r7, r27
    1c5e:	14 14       	cp	r1, r4
    1c60:	15 04       	cpc	r1, r5
    1c62:	16 04       	cpc	r1, r6
    1c64:	17 04       	cpc	r1, r7
    1c66:	ac f5       	brge	.+106    	; 0x1cd2 <async+0x180>
    1c68:	6a e3       	ldi	r22, 0x3A	; 58
    1c6a:	71 e0       	ldi	r23, 0x01	; 1
    1c6c:	ce 01       	movw	r24, r28
    1c6e:	0e 94 48 0c 	call	0x1890	; 0x1890 <enqueueByBaseline>
    1c72:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <timerQ>
    1c76:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <timerQ+0x1>
    1c7a:	30 97       	sbiw	r30, 0x00	; 0
    1c7c:	21 f1       	breq	.+72     	; 0x1cc6 <async+0x174>
    1c7e:	82 81       	ldd	r24, Z+2	; 0x02
    1c80:	93 81       	ldd	r25, Z+3	; 0x03
    1c82:	a4 81       	ldd	r26, Z+4	; 0x04
    1c84:	b5 81       	ldd	r27, Z+5	; 0x05
    1c86:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <overflows>
    1c8a:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <overflows+0x1>
    1c8e:	2a 17       	cp	r18, r26
    1c90:	3b 07       	cpc	r19, r27
    1c92:	c9 f4       	brne	.+50     	; 0x1cc6 <async+0x174>
    1c94:	9c 01       	movw	r18, r24
    1c96:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c9a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c9e:	84 1b       	sub	r24, r20
    1ca0:	95 0b       	sbc	r25, r21
    1ca2:	01 97       	sbiw	r24, 0x01	; 1
    1ca4:	31 f4       	brne	.+12     	; 0x1cb2 <async+0x160>
    1ca6:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1caa:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1cae:	2f 5f       	subi	r18, 0xFF	; 255
    1cb0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb2:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1cb6:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1cba:	ef e6       	ldi	r30, 0x6F	; 111
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	80 81       	ld	r24, Z
    1cc0:	82 60       	ori	r24, 0x02	; 2
    1cc2:	80 83       	st	Z, r24
    1cc4:	41 c0       	rjmp	.+130    	; 0x1d48 <async+0x1f6>
    1cc6:	ef e6       	ldi	r30, 0x6F	; 111
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	8d 7f       	andi	r24, 0xFD	; 253
    1cce:	80 83       	st	Z, r24
    1cd0:	3b c0       	rjmp	.+118    	; 0x1d48 <async+0x1f6>
    1cd2:	6c e3       	ldi	r22, 0x3C	; 60
    1cd4:	71 e0       	ldi	r23, 0x01	; 1
    1cd6:	ce 01       	movw	r24, r28
    1cd8:	0e 94 05 0c 	call	0x180a	; 0x180a <enqueueByDeadline>
    1cdc:	33 20       	and	r3, r3
    1cde:	b9 f1       	breq	.+110    	; 0x1d4e <async+0x1fc>
    1ce0:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <threadPool>
    1ce4:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <threadPool+0x1>
    1ce8:	00 97       	sbiw	r24, 0x00	; 0
    1cea:	81 f1       	breq	.+96     	; 0x1d4c <async+0x1fa>
    1cec:	e0 91 29 01 	lds	r30, 0x0129	; 0x800129 <activeStack>
    1cf0:	f0 91 2a 01 	lds	r31, 0x012A	; 0x80012a <activeStack+0x1>
    1cf4:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <msgQ>
    1cf8:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <msgQ+0x1>
    1cfc:	02 81       	ldd	r16, Z+2	; 0x02
    1cfe:	13 81       	ldd	r17, Z+3	; 0x03
    1d00:	d9 01       	movw	r26, r18
    1d02:	16 96       	adiw	r26, 0x06	; 6
    1d04:	4d 91       	ld	r20, X+
    1d06:	5d 91       	ld	r21, X+
    1d08:	6d 91       	ld	r22, X+
    1d0a:	7c 91       	ld	r23, X
    1d0c:	19 97       	sbiw	r26, 0x09	; 9
    1d0e:	d8 01       	movw	r26, r16
    1d10:	16 96       	adiw	r26, 0x06	; 6
    1d12:	0d 91       	ld	r16, X+
    1d14:	1d 91       	ld	r17, X+
    1d16:	2d 91       	ld	r18, X+
    1d18:	3c 91       	ld	r19, X
    1d1a:	19 97       	sbiw	r26, 0x09	; 9
    1d1c:	40 1b       	sub	r20, r16
    1d1e:	51 0b       	sbc	r21, r17
    1d20:	62 0b       	sbc	r22, r18
    1d22:	73 0b       	sbc	r23, r19
    1d24:	9a f4       	brpl	.+38     	; 0x1d4c <async+0x1fa>
    1d26:	dc 01       	movw	r26, r24
    1d28:	2d 91       	ld	r18, X+
    1d2a:	3c 91       	ld	r19, X
    1d2c:	11 97       	sbiw	r26, 0x01	; 1
    1d2e:	30 93 2c 01 	sts	0x012C, r19	; 0x80012c <threadPool+0x1>
    1d32:	20 93 2b 01 	sts	0x012B, r18	; 0x80012b <threadPool>
    1d36:	ed 93       	st	X+, r30
    1d38:	fc 93       	st	X, r31
    1d3a:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <activeStack+0x1>
    1d3e:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <activeStack>
    1d42:	0e 94 12 04 	call	0x824	; 0x824 <dispatch>
    1d46:	02 c0       	rjmp	.+4      	; 0x1d4c <async+0x1fa>
    1d48:	33 20       	and	r3, r3
    1d4a:	09 f0       	breq	.+2      	; 0x1d4e <async+0x1fc>
    1d4c:	78 94       	sei
    1d4e:	ce 01       	movw	r24, r28
    1d50:	df 91       	pop	r29
    1d52:	cf 91       	pop	r28
    1d54:	1f 91       	pop	r17
    1d56:	0f 91       	pop	r16
    1d58:	ff 90       	pop	r15
    1d5a:	ef 90       	pop	r14
    1d5c:	df 90       	pop	r13
    1d5e:	cf 90       	pop	r12
    1d60:	bf 90       	pop	r11
    1d62:	af 90       	pop	r10
    1d64:	9f 90       	pop	r9
    1d66:	8f 90       	pop	r8
    1d68:	7f 90       	pop	r7
    1d6a:	6f 90       	pop	r6
    1d6c:	5f 90       	pop	r5
    1d6e:	4f 90       	pop	r4
    1d70:	3f 90       	pop	r3
    1d72:	08 95       	ret

00001d74 <sync>:
    1d74:	cf 92       	push	r12
    1d76:	df 92       	push	r13
    1d78:	ef 92       	push	r14
    1d7a:	ff 92       	push	r15
    1d7c:	0f 93       	push	r16
    1d7e:	1f 93       	push	r17
    1d80:	cf 93       	push	r28
    1d82:	df 93       	push	r29
    1d84:	ec 01       	movw	r28, r24
    1d86:	7b 01       	movw	r14, r22
    1d88:	6a 01       	movw	r12, r20
    1d8a:	1f b7       	in	r17, 0x3f	; 63
    1d8c:	10 78       	andi	r17, 0x80	; 128
    1d8e:	f8 94       	cli
    1d90:	a8 81       	ld	r26, Y
    1d92:	b9 81       	ldd	r27, Y+1	; 0x01
    1d94:	10 97       	sbiw	r26, 0x00	; 0
    1d96:	61 f1       	breq	.+88     	; 0x1df0 <sync+0x7c>
    1d98:	14 96       	adiw	r26, 0x04	; 4
    1d9a:	ed 91       	ld	r30, X+
    1d9c:	fc 91       	ld	r31, X
    1d9e:	15 97       	sbiw	r26, 0x05	; 5
    1da0:	30 97       	sbiw	r30, 0x00	; 0
    1da2:	41 f0       	breq	.+16     	; 0x1db4 <sync+0x40>
    1da4:	a0 81       	ld	r26, Z
    1da6:	b1 81       	ldd	r27, Z+1	; 0x01
    1da8:	14 96       	adiw	r26, 0x04	; 4
    1daa:	ed 91       	ld	r30, X+
    1dac:	fc 91       	ld	r31, X
    1dae:	15 97       	sbiw	r26, 0x05	; 5
    1db0:	30 97       	sbiw	r30, 0x00	; 0
    1db2:	c1 f7       	brne	.-16     	; 0x1da4 <sync+0x30>
    1db4:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <current>
    1db8:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <current+0x1>
    1dbc:	2a 17       	cp	r18, r26
    1dbe:	3b 07       	cpc	r19, r27
    1dc0:	21 f0       	breq	.+8      	; 0x1dca <sync+0x56>
    1dc2:	11 23       	and	r17, r17
    1dc4:	09 f4       	brne	.+2      	; 0x1dc8 <sync+0x54>
    1dc6:	3d c0       	rjmp	.+122    	; 0x1e42 <sync+0xce>
    1dc8:	07 c0       	rjmp	.+14     	; 0x1dd8 <sync+0x64>
    1dca:	11 23       	and	r17, r17
    1dcc:	09 f4       	brne	.+2      	; 0x1dd0 <sync+0x5c>
    1dce:	3c c0       	rjmp	.+120    	; 0x1e48 <sync+0xd4>
    1dd0:	78 94       	sei
    1dd2:	8f ef       	ldi	r24, 0xFF	; 255
    1dd4:	9f ef       	ldi	r25, 0xFF	; 255
    1dd6:	52 c0       	rjmp	.+164    	; 0x1e7c <sync+0x108>
    1dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dda:	9b 81       	ldd	r25, Y+3	; 0x03
    1ddc:	00 97       	sbiw	r24, 0x00	; 0
    1dde:	d1 f1       	breq	.+116    	; 0x1e54 <sync+0xe0>
    1de0:	fc 01       	movw	r30, r24
    1de2:	15 82       	std	Z+5, r1	; 0x05
    1de4:	14 82       	std	Z+4, r1	; 0x04
    1de6:	36 c0       	rjmp	.+108    	; 0x1e54 <sync+0xe0>
    1de8:	78 94       	sei
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	46 c0       	rjmp	.+140    	; 0x1e7c <sync+0x108>
    1df0:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <current>
    1df4:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <current+0x1>
    1df8:	99 83       	std	Y+1, r25	; 0x01
    1dfa:	88 83       	st	Y, r24
    1dfc:	11 23       	and	r17, r17
    1dfe:	29 f0       	breq	.+10     	; 0x1e0a <sync+0x96>
    1e00:	8a 81       	ldd	r24, Y+2	; 0x02
    1e02:	9b 81       	ldd	r25, Y+3	; 0x03
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	09 f0       	breq	.+2      	; 0x1e0a <sync+0x96>
    1e08:	78 94       	sei
    1e0a:	b6 01       	movw	r22, r12
    1e0c:	ce 01       	movw	r24, r28
    1e0e:	f7 01       	movw	r30, r14
    1e10:	09 95       	icall
    1e12:	f8 2e       	mov	r15, r24
    1e14:	09 2f       	mov	r16, r25
    1e16:	8f b7       	in	r24, 0x3f	; 63
    1e18:	f8 94       	cli
    1e1a:	19 82       	std	Y+1, r1	; 0x01
    1e1c:	18 82       	st	Y, r1
    1e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e20:	9b 81       	ldd	r25, Y+3	; 0x03
    1e22:	82 30       	cpi	r24, 0x02	; 2
    1e24:	91 05       	cpc	r25, r1
    1e26:	38 f0       	brcs	.+14     	; 0x1e36 <sync+0xc2>
    1e28:	1b 82       	std	Y+3, r1	; 0x03
    1e2a:	1a 82       	std	Y+2, r1	; 0x02
    1e2c:	fc 01       	movw	r30, r24
    1e2e:	15 82       	std	Z+5, r1	; 0x05
    1e30:	14 82       	std	Z+4, r1	; 0x04
    1e32:	0e 94 12 04 	call	0x824	; 0x824 <dispatch>
    1e36:	11 23       	and	r17, r17
    1e38:	51 f0       	breq	.+20     	; 0x1e4e <sync+0xda>
    1e3a:	78 94       	sei
    1e3c:	8f 2d       	mov	r24, r15
    1e3e:	90 2f       	mov	r25, r16
    1e40:	1d c0       	rjmp	.+58     	; 0x1e7c <sync+0x108>
    1e42:	8f ef       	ldi	r24, 0xFF	; 255
    1e44:	9f ef       	ldi	r25, 0xFF	; 255
    1e46:	1a c0       	rjmp	.+52     	; 0x1e7c <sync+0x108>
    1e48:	8f ef       	ldi	r24, 0xFF	; 255
    1e4a:	9f ef       	ldi	r25, 0xFF	; 255
    1e4c:	17 c0       	rjmp	.+46     	; 0x1e7c <sync+0x108>
    1e4e:	8f 2d       	mov	r24, r15
    1e50:	90 2f       	mov	r25, r16
    1e52:	14 c0       	rjmp	.+40     	; 0x1e7c <sync+0x108>
    1e54:	3b 83       	std	Y+3, r19	; 0x03
    1e56:	2a 83       	std	Y+2, r18	; 0x02
    1e58:	f9 01       	movw	r30, r18
    1e5a:	d5 83       	std	Z+5, r29	; 0x05
    1e5c:	c4 83       	std	Z+4, r28	; 0x04
    1e5e:	cd 01       	movw	r24, r26
    1e60:	0e 94 12 04 	call	0x824	; 0x824 <dispatch>
    1e64:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <current>
    1e68:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <current+0x1>
    1e6c:	82 81       	ldd	r24, Z+2	; 0x02
    1e6e:	93 81       	ldd	r25, Z+3	; 0x03
    1e70:	89 2b       	or	r24, r25
    1e72:	09 f4       	brne	.+2      	; 0x1e76 <sync+0x102>
    1e74:	b9 cf       	rjmp	.-142    	; 0x1de8 <sync+0x74>
    1e76:	f9 83       	std	Y+1, r31	; 0x01
    1e78:	e8 83       	st	Y, r30
    1e7a:	c2 cf       	rjmp	.-124    	; 0x1e00 <sync+0x8c>
    1e7c:	df 91       	pop	r29
    1e7e:	cf 91       	pop	r28
    1e80:	1f 91       	pop	r17
    1e82:	0f 91       	pop	r16
    1e84:	ff 90       	pop	r15
    1e86:	ef 90       	pop	r14
    1e88:	df 90       	pop	r13
    1e8a:	cf 90       	pop	r12
    1e8c:	08 95       	ret

00001e8e <run>:
    1e8e:	00 91 27 01 	lds	r16, 0x0127	; 0x800127 <current>
    1e92:	10 91 28 01 	lds	r17, 0x0128	; 0x800128 <current+0x1>
    1e96:	8c e3       	ldi	r24, 0x3C	; 60
    1e98:	91 e0       	ldi	r25, 0x01	; 1
    1e9a:	0e 94 8b 0c 	call	0x1916	; 0x1916 <dequeue>
    1e9e:	ec 01       	movw	r28, r24
    1ea0:	d8 01       	movw	r26, r16
    1ea2:	13 96       	adiw	r26, 0x03	; 3
    1ea4:	9c 93       	st	X, r25
    1ea6:	8e 93       	st	-X, r24
    1ea8:	12 97       	sbiw	r26, 0x02	; 2
    1eaa:	78 94       	sei
    1eac:	4e 85       	ldd	r20, Y+14	; 0x0e
    1eae:	5f 85       	ldd	r21, Y+15	; 0x0f
    1eb0:	6c 85       	ldd	r22, Y+12	; 0x0c
    1eb2:	7d 85       	ldd	r23, Y+13	; 0x0d
    1eb4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1eb6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1eb8:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <sync>
    1ebc:	8f b7       	in	r24, 0x3f	; 63
    1ebe:	f8 94       	cli
    1ec0:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <msgPool>
    1ec4:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <msgPool+0x1>
    1ec8:	99 83       	std	Y+1, r25	; 0x01
    1eca:	88 83       	st	Y, r24
    1ecc:	d0 93 2e 01 	sts	0x012E, r29	; 0x80012e <msgPool+0x1>
    1ed0:	c0 93 2d 01 	sts	0x012D, r28	; 0x80012d <msgPool>
    1ed4:	e0 91 29 01 	lds	r30, 0x0129	; 0x800129 <activeStack>
    1ed8:	f0 91 2a 01 	lds	r31, 0x012A	; 0x80012a <activeStack+0x1>
    1edc:	00 81       	ld	r16, Z
    1ede:	11 81       	ldd	r17, Z+1	; 0x01
    1ee0:	e8 01       	movw	r28, r16
    1ee2:	2a 81       	ldd	r18, Y+2	; 0x02
    1ee4:	3b 81       	ldd	r19, Y+3	; 0x03
    1ee6:	a0 91 3c 01 	lds	r26, 0x013C	; 0x80013c <msgQ>
    1eea:	b0 91 3d 01 	lds	r27, 0x013D	; 0x80013d <msgQ+0x1>
    1eee:	10 97       	sbiw	r26, 0x00	; 0
    1ef0:	c1 f0       	breq	.+48     	; 0x1f22 <run+0x94>
    1ef2:	21 15       	cp	r18, r1
    1ef4:	31 05       	cpc	r19, r1
    1ef6:	59 f2       	breq	.-106    	; 0x1e8e <run>
    1ef8:	16 96       	adiw	r26, 0x06	; 6
    1efa:	8d 91       	ld	r24, X+
    1efc:	9d 91       	ld	r25, X+
    1efe:	0d 90       	ld	r0, X+
    1f00:	bc 91       	ld	r27, X
    1f02:	a0 2d       	mov	r26, r0
    1f04:	e9 01       	movw	r28, r18
    1f06:	4e 81       	ldd	r20, Y+6	; 0x06
    1f08:	5f 81       	ldd	r21, Y+7	; 0x07
    1f0a:	68 85       	ldd	r22, Y+8	; 0x08
    1f0c:	79 85       	ldd	r23, Y+9	; 0x09
    1f0e:	84 1b       	sub	r24, r20
    1f10:	95 0b       	sbc	r25, r21
    1f12:	a6 0b       	sbc	r26, r22
    1f14:	b7 0b       	sbc	r27, r23
    1f16:	18 16       	cp	r1, r24
    1f18:	19 06       	cpc	r1, r25
    1f1a:	1a 06       	cpc	r1, r26
    1f1c:	1b 06       	cpc	r1, r27
    1f1e:	0c f0       	brlt	.+2      	; 0x1f22 <run+0x94>
    1f20:	b6 cf       	rjmp	.-148    	; 0x1e8e <run>
    1f22:	10 93 2a 01 	sts	0x012A, r17	; 0x80012a <activeStack+0x1>
    1f26:	00 93 29 01 	sts	0x0129, r16	; 0x800129 <activeStack>
    1f2a:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <threadPool>
    1f2e:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <threadPool+0x1>
    1f32:	91 83       	std	Z+1, r25	; 0x01
    1f34:	80 83       	st	Z, r24
    1f36:	f0 93 2c 01 	sts	0x012C, r31	; 0x80012c <threadPool+0x1>
    1f3a:	e0 93 2b 01 	sts	0x012B, r30	; 0x80012b <threadPool>
    1f3e:	a0 91 29 01 	lds	r26, 0x0129	; 0x800129 <activeStack>
    1f42:	b0 91 2a 01 	lds	r27, 0x012A	; 0x80012a <activeStack+0x1>
    1f46:	14 96       	adiw	r26, 0x04	; 4
    1f48:	ed 91       	ld	r30, X+
    1f4a:	fc 91       	ld	r31, X
    1f4c:	15 97       	sbiw	r26, 0x05	; 5
    1f4e:	30 97       	sbiw	r30, 0x00	; 0
    1f50:	41 f0       	breq	.+16     	; 0x1f62 <run+0xd4>
    1f52:	a0 81       	ld	r26, Z
    1f54:	b1 81       	ldd	r27, Z+1	; 0x01
    1f56:	14 96       	adiw	r26, 0x04	; 4
    1f58:	ed 91       	ld	r30, X+
    1f5a:	fc 91       	ld	r31, X
    1f5c:	15 97       	sbiw	r26, 0x05	; 5
    1f5e:	30 97       	sbiw	r30, 0x00	; 0
    1f60:	c1 f7       	brne	.-16     	; 0x1f52 <run+0xc4>
    1f62:	cd 01       	movw	r24, r26
    1f64:	0e 94 12 04 	call	0x824	; 0x824 <dispatch>
    1f68:	92 cf       	rjmp	.-220    	; 0x1e8e <run>

00001f6a <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    1f6a:	42 31       	cpi	r20, 0x12	; 18
    1f6c:	b8 f4       	brcc	.+46     	; 0x1f9c <install+0x32>
        char status;
        DISABLE(status);
    1f6e:	2f b7       	in	r18, 0x3f	; 63
    1f70:	f8 94       	cli
        otable[i] = obj;
    1f72:	50 e0       	ldi	r21, 0x00	; 0
    1f74:	44 0f       	add	r20, r20
    1f76:	55 1f       	adc	r21, r21
    1f78:	fa 01       	movw	r30, r20
    1f7a:	e2 5c       	subi	r30, 0xC2	; 194
    1f7c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f7e:	91 83       	std	Z+1, r25	; 0x01
    1f80:	80 83       	st	Z, r24
        mtable[i] = m;
    1f82:	fa 01       	movw	r30, r20
    1f84:	ea 52       	subi	r30, 0x2A	; 42
    1f86:	fe 4f       	sbci	r31, 0xFE	; 254
    1f88:	71 83       	std	Z+1, r23	; 0x01
    1f8a:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    1f8c:	41 e0       	ldi	r20, 0x01	; 1
    1f8e:	50 e0       	ldi	r21, 0x00	; 0
    1f90:	fc 01       	movw	r30, r24
    1f92:	53 83       	std	Z+3, r21	; 0x03
    1f94:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    1f96:	22 23       	and	r18, r18
    1f98:	0c f4       	brge	.+2      	; 0x1f9c <install+0x32>
    1f9a:	78 94       	sei
    1f9c:	08 95       	ret

00001f9e <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    1f9e:	8c 01       	movw	r16, r24
    1fa0:	7b 01       	movw	r14, r22
    1fa2:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    1fa4:	8f b7       	in	r24, 0x3f	; 63
    1fa6:	f8 94       	cli
    initialize();
    1fa8:	0e 94 a7 03 	call	0x74e	; 0x74e <initialize>
    ENABLE(1);
    1fac:	78 94       	sei
    if (m != NULL)
    1fae:	e1 14       	cp	r14, r1
    1fb0:	f1 04       	cpc	r15, r1
    1fb2:	41 f0       	breq	.+16     	; 0x1fc4 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	a9 01       	movw	r20, r18
    1fba:	60 e0       	ldi	r22, 0x00	; 0
    1fbc:	70 e0       	ldi	r23, 0x00	; 0
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <async>
    DISABLE(status);
    1fc4:	8f b7       	in	r24, 0x3f	; 63
    1fc6:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    1fc8:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
    ENABLE(1);
    1fcc:	78 94       	sei
    while (1) {
        SLEEP();
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	83 bf       	out	0x33, r24	; 51
    1fd2:	88 95       	sleep
    1fd4:	fd cf       	rjmp	.-6      	; 0x1fd0 <tinytimber+0x32>

00001fd6 <writeToPort>:
}
*/

// Write to PORT E pin 6 or 4
void writeToPort(Writer *self, uint8_t whichPulse) {
	if(whichPulse == 0) {
    1fd6:	61 11       	cpse	r22, r1
    1fd8:	05 c0       	rjmp	.+10     	; 0x1fe4 <writeToPort+0xe>
		//PORTE = ^(1<<6);
		PORTE = PORTE ^ 0b01000000;
    1fda:	9e b1       	in	r25, 0x0e	; 14
    1fdc:	80 e4       	ldi	r24, 0x40	; 64
    1fde:	89 27       	eor	r24, r25
    1fe0:	8e b9       	out	0x0e, r24	; 14
    1fe2:	08 95       	ret
	} else {
		//PORTE = ^(1<<4);
		PORTE = PORTE ^ 0b00010000;
    1fe4:	9e b1       	in	r25, 0x0e	; 14
    1fe6:	80 e1       	ldi	r24, 0x10	; 16
    1fe8:	89 27       	eor	r24, r25
    1fea:	8e b9       	out	0x0e, r24	; 14
    1fec:	08 95       	ret

00001fee <disableOutput>:
	}
}

// Disable the output for either pin 6 or 4
void disableOutput(Writer *self, uint8_t whichPulse) {
	if(whichPulse == 0) {
    1fee:	61 11       	cpse	r22, r1
    1ff0:	02 c0       	rjmp	.+4      	; 0x1ff6 <disableOutput+0x8>
		PORTE = PORTE & 0b10111111;
    1ff2:	76 98       	cbi	0x0e, 6	; 14
    1ff4:	08 95       	ret
	} else {
		PORTE = PORTE & 0b11101111;
    1ff6:	74 98       	cbi	0x0e, 4	; 14
    1ff8:	08 95       	ret

00001ffa <__divmodsi4>:
    1ffa:	05 2e       	mov	r0, r21
    1ffc:	97 fb       	bst	r25, 7
    1ffe:	1e f4       	brtc	.+6      	; 0x2006 <__divmodsi4+0xc>
    2000:	00 94       	com	r0
    2002:	0e 94 14 10 	call	0x2028	; 0x2028 <__negsi2>
    2006:	57 fd       	sbrc	r21, 7
    2008:	07 d0       	rcall	.+14     	; 0x2018 <__divmodsi4_neg2>
    200a:	0e 94 1c 10 	call	0x2038	; 0x2038 <__udivmodsi4>
    200e:	07 fc       	sbrc	r0, 7
    2010:	03 d0       	rcall	.+6      	; 0x2018 <__divmodsi4_neg2>
    2012:	4e f4       	brtc	.+18     	; 0x2026 <__divmodsi4_exit>
    2014:	0c 94 14 10 	jmp	0x2028	; 0x2028 <__negsi2>

00002018 <__divmodsi4_neg2>:
    2018:	50 95       	com	r21
    201a:	40 95       	com	r20
    201c:	30 95       	com	r19
    201e:	21 95       	neg	r18
    2020:	3f 4f       	sbci	r19, 0xFF	; 255
    2022:	4f 4f       	sbci	r20, 0xFF	; 255
    2024:	5f 4f       	sbci	r21, 0xFF	; 255

00002026 <__divmodsi4_exit>:
    2026:	08 95       	ret

00002028 <__negsi2>:
    2028:	90 95       	com	r25
    202a:	80 95       	com	r24
    202c:	70 95       	com	r23
    202e:	61 95       	neg	r22
    2030:	7f 4f       	sbci	r23, 0xFF	; 255
    2032:	8f 4f       	sbci	r24, 0xFF	; 255
    2034:	9f 4f       	sbci	r25, 0xFF	; 255
    2036:	08 95       	ret

00002038 <__udivmodsi4>:
    2038:	a1 e2       	ldi	r26, 0x21	; 33
    203a:	1a 2e       	mov	r1, r26
    203c:	aa 1b       	sub	r26, r26
    203e:	bb 1b       	sub	r27, r27
    2040:	fd 01       	movw	r30, r26
    2042:	0d c0       	rjmp	.+26     	; 0x205e <__udivmodsi4_ep>

00002044 <__udivmodsi4_loop>:
    2044:	aa 1f       	adc	r26, r26
    2046:	bb 1f       	adc	r27, r27
    2048:	ee 1f       	adc	r30, r30
    204a:	ff 1f       	adc	r31, r31
    204c:	a2 17       	cp	r26, r18
    204e:	b3 07       	cpc	r27, r19
    2050:	e4 07       	cpc	r30, r20
    2052:	f5 07       	cpc	r31, r21
    2054:	20 f0       	brcs	.+8      	; 0x205e <__udivmodsi4_ep>
    2056:	a2 1b       	sub	r26, r18
    2058:	b3 0b       	sbc	r27, r19
    205a:	e4 0b       	sbc	r30, r20
    205c:	f5 0b       	sbc	r31, r21

0000205e <__udivmodsi4_ep>:
    205e:	66 1f       	adc	r22, r22
    2060:	77 1f       	adc	r23, r23
    2062:	88 1f       	adc	r24, r24
    2064:	99 1f       	adc	r25, r25
    2066:	1a 94       	dec	r1
    2068:	69 f7       	brne	.-38     	; 0x2044 <__udivmodsi4_loop>
    206a:	60 95       	com	r22
    206c:	70 95       	com	r23
    206e:	80 95       	com	r24
    2070:	90 95       	com	r25
    2072:	9b 01       	movw	r18, r22
    2074:	ac 01       	movw	r20, r24
    2076:	bd 01       	movw	r22, r26
    2078:	cf 01       	movw	r24, r30
    207a:	08 95       	ret

0000207c <setjmp>:
    207c:	dc 01       	movw	r26, r24
    207e:	2d 92       	st	X+, r2
    2080:	3d 92       	st	X+, r3
    2082:	4d 92       	st	X+, r4
    2084:	5d 92       	st	X+, r5
    2086:	6d 92       	st	X+, r6
    2088:	7d 92       	st	X+, r7
    208a:	8d 92       	st	X+, r8
    208c:	9d 92       	st	X+, r9
    208e:	ad 92       	st	X+, r10
    2090:	bd 92       	st	X+, r11
    2092:	cd 92       	st	X+, r12
    2094:	dd 92       	st	X+, r13
    2096:	ed 92       	st	X+, r14
    2098:	fd 92       	st	X+, r15
    209a:	0d 93       	st	X+, r16
    209c:	1d 93       	st	X+, r17
    209e:	cd 93       	st	X+, r28
    20a0:	dd 93       	st	X+, r29
    20a2:	ff 91       	pop	r31
    20a4:	ef 91       	pop	r30
    20a6:	8d b7       	in	r24, 0x3d	; 61
    20a8:	8d 93       	st	X+, r24
    20aa:	8e b7       	in	r24, 0x3e	; 62
    20ac:	8d 93       	st	X+, r24
    20ae:	8f b7       	in	r24, 0x3f	; 63
    20b0:	8d 93       	st	X+, r24
    20b2:	ed 93       	st	X+, r30
    20b4:	fd 93       	st	X+, r31
    20b6:	88 27       	eor	r24, r24
    20b8:	99 27       	eor	r25, r25
    20ba:	09 94       	ijmp

000020bc <longjmp>:
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	81 30       	cpi	r24, 0x01	; 1
    20c2:	91 05       	cpc	r25, r1
    20c4:	81 1d       	adc	r24, r1
    20c6:	2d 90       	ld	r2, X+
    20c8:	3d 90       	ld	r3, X+
    20ca:	4d 90       	ld	r4, X+
    20cc:	5d 90       	ld	r5, X+
    20ce:	6d 90       	ld	r6, X+
    20d0:	7d 90       	ld	r7, X+
    20d2:	8d 90       	ld	r8, X+
    20d4:	9d 90       	ld	r9, X+
    20d6:	ad 90       	ld	r10, X+
    20d8:	bd 90       	ld	r11, X+
    20da:	cd 90       	ld	r12, X+
    20dc:	dd 90       	ld	r13, X+
    20de:	ed 90       	ld	r14, X+
    20e0:	fd 90       	ld	r15, X+
    20e2:	0d 91       	ld	r16, X+
    20e4:	1d 91       	ld	r17, X+
    20e6:	cd 91       	ld	r28, X+
    20e8:	dd 91       	ld	r29, X+
    20ea:	ed 91       	ld	r30, X+
    20ec:	fd 91       	ld	r31, X+
    20ee:	0d 90       	ld	r0, X+
    20f0:	f8 94       	cli
    20f2:	fe bf       	out	0x3e, r31	; 62
    20f4:	0f be       	out	0x3f, r0	; 63
    20f6:	ed bf       	out	0x3d, r30	; 61
    20f8:	ed 91       	ld	r30, X+
    20fa:	fd 91       	ld	r31, X+
    20fc:	09 94       	ijmp

000020fe <_exit>:
    20fe:	f8 94       	cli

00002100 <__stop_program>:
    2100:	ff cf       	rjmp	.-2      	; 0x2100 <__stop_program>
